{"version":3,"file":"static/js/6.1e2f1232.chunk.js","mappings":"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","sources":["../node_modules/@mui/icons-material/esm/Favorite.js","../node_modules/@firebase/database/src/core/version.ts","../node_modules/@firebase/database/src/core/storage/DOMStorageWrapper.ts","../node_modules/@firebase/database/src/core/storage/MemoryStorage.ts","../node_modules/@firebase/database/src/core/storage/storage.ts","../node_modules/@firebase/database/src/core/util/util.ts","../node_modules/@firebase/database/src/core/AppCheckTokenProvider.ts","../node_modules/@firebase/database/src/core/AuthTokenProvider.ts","../node_modules/@firebase/database/src/realtime/Constants.ts","../node_modules/@firebase/database/src/core/RepoInfo.ts","../node_modules/@firebase/database/src/core/stats/StatsCollection.ts","../node_modules/@firebase/database/src/core/stats/StatsManager.ts","../node_modules/@firebase/database/src/realtime/polling/PacketReceiver.ts","../node_modules/@firebase/database/src/realtime/BrowserPollConnection.ts","../node_modules/@firebase/database/src/realtime/WebSocketConnection.ts","../node_modules/@firebase/database/src/realtime/TransportManager.ts","../node_modules/@firebase/database/src/realtime/Connection.ts","../node_modules/@firebase/database/src/core/ServerActions.ts","../node_modules/@firebase/database/src/core/util/EventEmitter.ts","../node_modules/@firebase/database/src/core/util/OnlineMonitor.ts","../node_modules/@firebase/database/src/core/util/Path.ts","../node_modules/@firebase/database/src/core/util/VisibilityMonitor.ts","../node_modules/@firebase/database/src/core/PersistentConnection.ts","../node_modules/@firebase/database/src/core/snap/indexes/KeyIndex.ts","../node_modules/@firebase/database/src/core/snap/Node.ts","../node_modules/@firebase/database/src/core/snap/indexes/Index.ts","../node_modules/@firebase/database/src/core/util/SortedMap.ts","../node_modules/@firebase/database/src/core/snap/snap.ts","../node_modules/@firebase/database/src/core/snap/comparators.ts","../node_modules/@firebase/database/src/core/snap/LeafNode.ts","../node_modules/@firebase/database/src/core/snap/indexes/PriorityIndex.ts","../node_modules/@firebase/database/src/core/snap/IndexMap.ts","../node_modules/@firebase/database/src/core/snap/ChildrenNode.ts","../node_modules/@firebase/database/src/core/snap/childSet.ts","../node_modules/@firebase/database/src/core/snap/nodeFromJSON.ts","../node_modules/@firebase/database/src/core/snap/indexes/PathIndex.ts","../node_modules/@firebase/database/src/core/snap/indexes/ValueIndex.ts","../node_modules/@firebase/database/src/core/util/NextPushId.ts","../node_modules/@firebase/database/src/core/view/Change.ts","../node_modules/@firebase/database/src/core/view/filter/IndexedFilter.ts","../node_modules/@firebase/database/src/core/view/filter/RangedFilter.ts","../node_modules/@firebase/database/src/core/view/filter/LimitedFilter.ts","../node_modules/@firebase/database/src/core/view/QueryParams.ts","../node_modules/@firebase/database/src/core/ReadonlyRestClient.ts","../node_modules/@firebase/database/src/core/SnapshotHolder.ts","../node_modules/@firebase/database/src/core/SparseSnapshotTree.ts","../node_modules/@firebase/database/src/core/operation/Operation.ts","../node_modules/@firebase/database/src/core/stats/StatsListener.ts","../node_modules/@firebase/database/src/core/stats/StatsReporter.ts","../node_modules/@firebase/database/src/core/util/ImmutableTree.ts","../node_modules/@firebase/database/src/core/operation/AckUserWrite.ts","../node_modules/@firebase/database/src/core/operation/Overwrite.ts","../node_modules/@firebase/database/src/core/operation/Merge.ts","../node_modules/@firebase/database/src/core/view/CacheNode.ts","../node_modules/@firebase/database/src/core/view/EventGenerator.ts","../node_modules/@firebase/database/src/core/view/ViewCache.ts","../node_modules/@firebase/database/src/core/CompoundWrite.ts","../node_modules/@firebase/database/src/core/WriteTree.ts","../node_modules/@firebase/database/src/core/view/ChildChangeAccumulator.ts","../node_modules/@firebase/database/src/core/view/CompleteChildSource.ts","../node_modules/@firebase/database/src/core/view/ViewProcessor.ts","../node_modules/@firebase/database/src/core/SyncPoint.ts","../node_modules/@firebase/database/src/core/view/View.ts","../node_modules/@firebase/database/src/core/SyncTree.ts","../node_modules/@firebase/database/src/core/util/ServerValues.ts","../node_modules/@firebase/database/src/core/util/Tree.ts","../node_modules/@firebase/database/src/core/util/validation.ts","../node_modules/@firebase/database/src/core/view/EventQueue.ts","../node_modules/@firebase/database/src/core/Repo.ts","../node_modules/@firebase/database/src/core/util/libs/parser.ts","../node_modules/@firebase/database/src/api/Reference_impl.ts","../node_modules/@firebase/database/src/api/Database.ts","../node_modules/@firebase/database/src/api/test_access.ts","../node_modules/@firebase/database/src/register.ts"],"sourcesContent":["import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"m12 21.35-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z\"\n}), 'Favorite');","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** The semver (www.semver.org) version of the SDK. */\nexport let SDK_VERSION = '';\n\n/**\n * SDK_VERSION should be set before any database instance is created\n * @internal\n */\nexport function setSDKVersion(version: string): void {\n  SDK_VERSION = version;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { jsonEval, stringify } from '@firebase/util';\n\n/**\n * Wraps a DOM Storage object and:\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\n *\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\n * and one for localStorage.\n *\n */\nexport class DOMStorageWrapper {\n  // Use a prefix to avoid collisions with other stuff saved by the app.\n  private prefix_ = 'firebase:';\n\n  /**\n   * @param domStorage_ - The underlying storage object (e.g. localStorage or sessionStorage)\n   */\n  constructor(private domStorage_: Storage) {}\n\n  /**\n   * @param key - The key to save the value under\n   * @param value - The value being stored, or null to remove the key.\n   */\n  set(key: string, value: unknown | null) {\n    if (value == null) {\n      this.domStorage_.removeItem(this.prefixedName_(key));\n    } else {\n      this.domStorage_.setItem(this.prefixedName_(key), stringify(value));\n    }\n  }\n\n  /**\n   * @returns The value that was stored under this key, or null\n   */\n  get(key: string): unknown {\n    const storedVal = this.domStorage_.getItem(this.prefixedName_(key));\n    if (storedVal == null) {\n      return null;\n    } else {\n      return jsonEval(storedVal);\n    }\n  }\n\n  remove(key: string) {\n    this.domStorage_.removeItem(this.prefixedName_(key));\n  }\n\n  isInMemoryStorage: boolean;\n\n  prefixedName_(name: string): string {\n    return this.prefix_ + name;\n  }\n\n  toString(): string {\n    return this.domStorage_.toString();\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains } from '@firebase/util';\n\n/**\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\n * (TODO: create interface for both to implement).\n */\nexport class MemoryStorage {\n  private cache_: { [k: string]: unknown } = {};\n\n  set(key: string, value: unknown | null) {\n    if (value == null) {\n      delete this.cache_[key];\n    } else {\n      this.cache_[key] = value;\n    }\n  }\n\n  get(key: string): unknown {\n    if (contains(this.cache_, key)) {\n      return this.cache_[key];\n    }\n    return null;\n  }\n\n  remove(key: string) {\n    delete this.cache_[key];\n  }\n\n  isInMemoryStorage = true;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DOMStorageWrapper } from './DOMStorageWrapper';\nimport { MemoryStorage } from './MemoryStorage';\n\ndeclare const window: Window;\n\n/**\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\n * to reflect this type\n *\n * @param domStorageName - Name of the underlying storage object\n *   (e.g. 'localStorage' or 'sessionStorage').\n * @returns Turning off type information until a common interface is defined.\n */\nconst createStoragefor = function (\n  domStorageName: string\n): DOMStorageWrapper | MemoryStorage {\n  try {\n    // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\n    // so it must be inside the try/catch.\n    if (\n      typeof window !== 'undefined' &&\n      typeof window[domStorageName] !== 'undefined'\n    ) {\n      // Need to test cache. Just because it's here doesn't mean it works\n      const domStorage = window[domStorageName];\n      domStorage.setItem('firebase:sentinel', 'cache');\n      domStorage.removeItem('firebase:sentinel');\n      return new DOMStorageWrapper(domStorage);\n    }\n  } catch (e) {}\n\n  // Failed to create wrapper.  Just return in-memory storage.\n  // TODO: log?\n  return new MemoryStorage();\n};\n\n/** A storage object that lasts across sessions */\nexport const PersistentStorage = createStoragefor('localStorage');\n\n/** A storage object that only lasts one session */\nexport const SessionStorage = createStoragefor('sessionStorage');\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger, LogLevel } from '@firebase/logger';\nimport {\n  assert,\n  base64,\n  Sha1,\n  stringToByteArray,\n  stringify,\n  isNodeSdk\n} from '@firebase/util';\n\nimport { SessionStorage } from '../storage/storage';\nimport { QueryContext } from '../view/EventRegistration';\n\ndeclare const window: Window;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndeclare const Windows: any;\n\nconst logClient = new Logger('@firebase/database');\n\n/**\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\n */\nexport const LUIDGenerator: () => number = (function () {\n  let id = 1;\n  return function () {\n    return id++;\n  };\n})();\n\n/**\n * Sha1 hash of the input string\n * @param str - The string to hash\n * @returns {!string} The resulting hash\n */\nexport const sha1 = function (str: string): string {\n  const utf8Bytes = stringToByteArray(str);\n  const sha1 = new Sha1();\n  sha1.update(utf8Bytes);\n  const sha1Bytes = sha1.digest();\n  return base64.encodeByteArray(sha1Bytes);\n};\n\nconst buildLogMessage_ = function (...varArgs: unknown[]): string {\n  let message = '';\n  for (let i = 0; i < varArgs.length; i++) {\n    const arg = varArgs[i];\n    if (\n      Array.isArray(arg) ||\n      (arg &&\n        typeof arg === 'object' &&\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        typeof (arg as any).length === 'number')\n    ) {\n      message += buildLogMessage_.apply(null, arg);\n    } else if (typeof arg === 'object') {\n      message += stringify(arg);\n    } else {\n      message += arg;\n    }\n    message += ' ';\n  }\n\n  return message;\n};\n\n/**\n * Use this for all debug messages in Firebase.\n */\nexport let logger: ((a: string) => void) | null = null;\n\n/**\n * Flag to check for log availability on first log message\n */\nlet firstLog_ = true;\n\n/**\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\n * @param logger_ - A flag to turn on logging, or a custom logger\n * @param persistent - Whether or not to persist logging settings across refreshes\n */\nexport const enableLogging = function (\n  logger_?: boolean | ((a: string) => void) | null,\n  persistent?: boolean\n) {\n  assert(\n    !persistent || logger_ === true || logger_ === false,\n    \"Can't turn on custom loggers persistently.\"\n  );\n  if (logger_ === true) {\n    logClient.logLevel = LogLevel.VERBOSE;\n    logger = logClient.log.bind(logClient);\n    if (persistent) {\n      SessionStorage.set('logging_enabled', true);\n    }\n  } else if (typeof logger_ === 'function') {\n    logger = logger_;\n  } else {\n    logger = null;\n    SessionStorage.remove('logging_enabled');\n  }\n};\n\nexport const log = function (...varArgs: unknown[]) {\n  if (firstLog_ === true) {\n    firstLog_ = false;\n    if (logger === null && SessionStorage.get('logging_enabled') === true) {\n      enableLogging(true);\n    }\n  }\n\n  if (logger) {\n    const message = buildLogMessage_.apply(null, varArgs);\n    logger(message);\n  }\n};\n\nexport const logWrapper = function (\n  prefix: string\n): (...varArgs: unknown[]) => void {\n  return function (...varArgs: unknown[]) {\n    log(prefix, ...varArgs);\n  };\n};\n\nexport const error = function (...varArgs: string[]) {\n  const message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_(...varArgs);\n  logClient.error(message);\n};\n\nexport const fatal = function (...varArgs: string[]) {\n  const message = `FIREBASE FATAL ERROR: ${buildLogMessage_(...varArgs)}`;\n  logClient.error(message);\n  throw new Error(message);\n};\n\nexport const warn = function (...varArgs: unknown[]) {\n  const message = 'FIREBASE WARNING: ' + buildLogMessage_(...varArgs);\n  logClient.warn(message);\n};\n\n/**\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\n * does not use https.\n */\nexport const warnIfPageIsSecure = function () {\n  // Be very careful accessing browser globals. Who knows what may or may not exist.\n  if (\n    typeof window !== 'undefined' &&\n    window.location &&\n    window.location.protocol &&\n    window.location.protocol.indexOf('https:') !== -1\n  ) {\n    warn(\n      'Insecure Firebase access from a secure page. ' +\n        'Please use https in calls to new Firebase().'\n    );\n  }\n};\n\nexport const warnAboutUnsupportedMethod = function (methodName: string) {\n  warn(\n    methodName +\n      ' is unsupported and will likely change soon.  ' +\n      'Please do not use.'\n  );\n};\n\n/**\n * Returns true if data is NaN, or +/- Infinity.\n */\nexport const isInvalidJSONNumber = function (data: unknown): boolean {\n  return (\n    typeof data === 'number' &&\n    (data !== data || // NaN\n      data === Number.POSITIVE_INFINITY ||\n      data === Number.NEGATIVE_INFINITY)\n  );\n};\n\nexport const executeWhenDOMReady = function (fn: () => void) {\n  if (isNodeSdk() || document.readyState === 'complete') {\n    fn();\n  } else {\n    // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\n    // fire before onload), but fall back to onload.\n\n    let called = false;\n    const wrappedFn = function () {\n      if (!document.body) {\n        setTimeout(wrappedFn, Math.floor(10));\n        return;\n      }\n\n      if (!called) {\n        called = true;\n        fn();\n      }\n    };\n\n    if (document.addEventListener) {\n      document.addEventListener('DOMContentLoaded', wrappedFn, false);\n      // fallback to onload.\n      window.addEventListener('load', wrappedFn, false);\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if ((document as any).attachEvent) {\n      // IE.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (document as any).attachEvent('onreadystatechange', () => {\n        if (document.readyState === 'complete') {\n          wrappedFn();\n        }\n      });\n      // fallback to onload.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (window as any).attachEvent('onload', wrappedFn);\n\n      // jQuery has an extra hack for IE that we could employ (based on\n      // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\n      // I'm hoping we don't need it.\n    }\n  }\n};\n\n/**\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\n */\nexport const MIN_NAME = '[MIN_NAME]';\n\n/**\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\n */\nexport const MAX_NAME = '[MAX_NAME]';\n\n/**\n * Compares valid Firebase key names, plus min and max name\n */\nexport const nameCompare = function (a: string, b: string): number {\n  if (a === b) {\n    return 0;\n  } else if (a === MIN_NAME || b === MAX_NAME) {\n    return -1;\n  } else if (b === MIN_NAME || a === MAX_NAME) {\n    return 1;\n  } else {\n    const aAsInt = tryParseInt(a),\n      bAsInt = tryParseInt(b);\n\n    if (aAsInt !== null) {\n      if (bAsInt !== null) {\n        return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;\n      } else {\n        return -1;\n      }\n    } else if (bAsInt !== null) {\n      return 1;\n    } else {\n      return a < b ? -1 : 1;\n    }\n  }\n};\n\n/**\n * @returns {!number} comparison result.\n */\nexport const stringCompare = function (a: string, b: string): number {\n  if (a === b) {\n    return 0;\n  } else if (a < b) {\n    return -1;\n  } else {\n    return 1;\n  }\n};\n\nexport const requireKey = function (\n  key: string,\n  obj: { [k: string]: unknown }\n): unknown {\n  if (obj && key in obj) {\n    return obj[key];\n  } else {\n    throw new Error(\n      'Missing required key (' + key + ') in object: ' + stringify(obj)\n    );\n  }\n};\n\nexport const ObjectToUniqueKey = function (obj: unknown): string {\n  if (typeof obj !== 'object' || obj === null) {\n    return stringify(obj);\n  }\n\n  const keys = [];\n  // eslint-disable-next-line guard-for-in\n  for (const k in obj) {\n    keys.push(k);\n  }\n\n  // Export as json, but with the keys sorted.\n  keys.sort();\n  let key = '{';\n  for (let i = 0; i < keys.length; i++) {\n    if (i !== 0) {\n      key += ',';\n    }\n    key += stringify(keys[i]);\n    key += ':';\n    key += ObjectToUniqueKey(obj[keys[i]]);\n  }\n\n  key += '}';\n  return key;\n};\n\n/**\n * Splits a string into a number of smaller segments of maximum size\n * @param str - The string\n * @param segsize - The maximum number of chars in the string.\n * @returns The string, split into appropriately-sized chunks\n */\nexport const splitStringBySize = function (\n  str: string,\n  segsize: number\n): string[] {\n  const len = str.length;\n\n  if (len <= segsize) {\n    return [str];\n  }\n\n  const dataSegs = [];\n  for (let c = 0; c < len; c += segsize) {\n    if (c + segsize > len) {\n      dataSegs.push(str.substring(c, len));\n    } else {\n      dataSegs.push(str.substring(c, c + segsize));\n    }\n  }\n  return dataSegs;\n};\n\n/**\n * Apply a function to each (key, value) pair in an object or\n * apply a function to each (index, value) pair in an array\n * @param obj - The object or array to iterate over\n * @param fn - The function to apply\n */\nexport function each(obj: object, fn: (k: string, v: unknown) => void) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      fn(key, obj[key]);\n    }\n  }\n}\n\n/**\n * Like goog.bind, but doesn't bother to create a closure if opt_context is null/undefined.\n * @param callback - Callback function.\n * @param context - Optional context to bind to.\n *\n */\nexport const bindCallback = function (\n  callback: (a: unknown) => void,\n  context?: object | null\n): (a: unknown) => void {\n  return context ? callback.bind(context) : callback;\n};\n\n/**\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\n * I made one modification at the end and removed the NaN / Infinity\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\n * @param v - A double\n *\n */\nexport const doubleToIEEE754String = function (v: number): string {\n  assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\n\n  const ebits = 11,\n    fbits = 52;\n  const bias = (1 << (ebits - 1)) - 1;\n  let s, e, f, ln, i;\n\n  // Compute sign, exponent, fraction\n  // Skip NaN / Infinity handling --MJL.\n  if (v === 0) {\n    e = 0;\n    f = 0;\n    s = 1 / v === -Infinity ? 1 : 0;\n  } else {\n    s = v < 0;\n    v = Math.abs(v);\n\n    if (v >= Math.pow(2, 1 - bias)) {\n      // Normalized\n      ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n      e = ln + bias;\n      f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\n    } else {\n      // Denormalized\n      e = 0;\n      f = Math.round(v / Math.pow(2, 1 - bias - fbits));\n    }\n  }\n\n  // Pack sign, exponent, fraction\n  const bits = [];\n  for (i = fbits; i; i -= 1) {\n    bits.push(f % 2 ? 1 : 0);\n    f = Math.floor(f / 2);\n  }\n  for (i = ebits; i; i -= 1) {\n    bits.push(e % 2 ? 1 : 0);\n    e = Math.floor(e / 2);\n  }\n  bits.push(s ? 1 : 0);\n  bits.reverse();\n  const str = bits.join('');\n\n  // Return the data as a hex string. --MJL\n  let hexByteString = '';\n  for (i = 0; i < 64; i += 8) {\n    let hexByte = parseInt(str.substr(i, 8), 2).toString(16);\n    if (hexByte.length === 1) {\n      hexByte = '0' + hexByte;\n    }\n    hexByteString = hexByteString + hexByte;\n  }\n  return hexByteString.toLowerCase();\n};\n\n/**\n * Used to detect if we're in a Chrome content script (which executes in an\n * isolated environment where long-polling doesn't work).\n */\nexport const isChromeExtensionContentScript = function (): boolean {\n  return !!(\n    typeof window === 'object' &&\n    window['chrome'] &&\n    window['chrome']['extension'] &&\n    !/^chrome/.test(window.location.href)\n  );\n};\n\n/**\n * Used to detect if we're in a Windows 8 Store app.\n */\nexport const isWindowsStoreApp = function (): boolean {\n  // Check for the presence of a couple WinRT globals\n  return typeof Windows === 'object' && typeof Windows.UI === 'object';\n};\n\n/**\n * Converts a server error code to a Javascript Error\n */\nexport function errorForServerCode(code: string, query: QueryContext): Error {\n  let reason = 'Unknown Error';\n  if (code === 'too_big') {\n    reason =\n      'The data requested exceeds the maximum size ' +\n      'that can be accessed with a single request.';\n  } else if (code === 'permission_denied') {\n    reason = \"Client doesn't have permission to access the desired data.\";\n  } else if (code === 'unavailable') {\n    reason = 'The service is unavailable';\n  }\n\n  const error = new Error(\n    code + ' at ' + query._path.toString() + ': ' + reason\n  );\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (error as any).code = code.toUpperCase();\n  return error;\n}\n\n/**\n * Used to test for integer-looking strings\n */\nexport const INTEGER_REGEXP_ = new RegExp('^-?(0*)\\\\d{1,10}$');\n\n/**\n * For use in keys, the minimum possible 32-bit integer.\n */\nexport const INTEGER_32_MIN = -2147483648;\n\n/**\n * For use in kyes, the maximum possible 32-bit integer.\n */\nexport const INTEGER_32_MAX = 2147483647;\n\n/**\n * If the string contains a 32-bit integer, return it.  Else return null.\n */\nexport const tryParseInt = function (str: string): number | null {\n  if (INTEGER_REGEXP_.test(str)) {\n    const intVal = Number(str);\n    if (intVal >= INTEGER_32_MIN && intVal <= INTEGER_32_MAX) {\n      return intVal;\n    }\n  }\n  return null;\n};\n\n/**\n * Helper to run some code but catch any exceptions and re-throw them later.\n * Useful for preventing user callbacks from breaking internal code.\n *\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\n * convenient (we don't have to try to figure out when is a safe point to\n * re-throw it), and the behavior seems reasonable:\n *\n * * If you aren't pausing on exceptions, you get an error in the console with\n *   the correct stack trace.\n * * If you're pausing on all exceptions, the debugger will pause on your\n *   exception and then again when we rethrow it.\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\n *   on us re-throwing it.\n *\n * @param fn - The code to guard.\n */\nexport const exceptionGuard = function (fn: () => void) {\n  try {\n    fn();\n  } catch (e) {\n    // Re-throw exception when it's safe.\n    setTimeout(() => {\n      // It used to be that \"throw e\" would result in a good console error with\n      // relevant context, but as of Chrome 39, you just get the firebase.js\n      // file/line number where we re-throw it, which is useless. So we log\n      // e.stack explicitly.\n      const stack = e.stack || '';\n      warn('Exception was thrown by user callback.', stack);\n      throw e;\n    }, Math.floor(0));\n  }\n};\n\n/**\n * Helper function to safely call opt_callback with the specified arguments.  It:\n * 1. Turns into a no-op if opt_callback is null or undefined.\n * 2. Wraps the call inside exceptionGuard to prevent exceptions from breaking our state.\n *\n * @param callback - Optional onComplete callback.\n * @param varArgs - Arbitrary args to be passed to opt_onComplete\n */\nexport const callUserCallback = function (\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  callback?: Function | null,\n  ...varArgs: unknown[]\n) {\n  if (typeof callback === 'function') {\n    exceptionGuard(() => {\n      callback(...varArgs);\n    });\n  }\n};\n\n/**\n * @returns {boolean} true if we think we're currently being crawled.\n */\nexport const beingCrawled = function (): boolean {\n  const userAgent =\n    (typeof window === 'object' &&\n      window['navigator'] &&\n      window['navigator']['userAgent']) ||\n    '';\n\n  // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\n  // believe to support JavaScript/AJAX rendering.\n  // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\n  // would have seen the page\" is flaky if we don't treat it as a crawler.\n  return (\n    userAgent.search(\n      /googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i\n    ) >= 0\n  );\n};\n\n/**\n * Export a property of an object using a getter function.\n */\nexport const exportPropGetter = function (\n  object: object,\n  name: string,\n  fnGet: () => unknown\n) {\n  Object.defineProperty(object, name, { get: fnGet });\n};\n\n/**\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\n *\n * It is removed with clearTimeout() as normal.\n *\n * @param fn - Function to run.\n * @param time - Milliseconds to wait before running.\n * @returns The setTimeout() return value.\n */\nexport const setTimeoutNonBlocking = function (\n  fn: () => void,\n  time: number\n): number | object {\n  const timeout: number | object = setTimeout(fn, time);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  if (typeof timeout === 'object' && (timeout as any)['unref']) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (timeout as any)['unref']();\n  }\n  return timeout;\n};\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AppCheckInternalComponentName,\n  AppCheckTokenListener,\n  AppCheckTokenResult,\n  FirebaseAppCheckInternal\n} from '@firebase/app-check-interop-types';\nimport { Provider } from '@firebase/component';\n\nimport { warn } from './util/util';\n\n/**\n * Abstraction around AppCheck's token fetching capabilities.\n */\nexport class AppCheckTokenProvider {\n  private appCheck?: FirebaseAppCheckInternal;\n  constructor(\n    private appName_: string,\n    private appCheckProvider?: Provider<AppCheckInternalComponentName>\n  ) {\n    this.appCheck = appCheckProvider?.getImmediate({ optional: true });\n    if (!this.appCheck) {\n      appCheckProvider?.get().then(appCheck => (this.appCheck = appCheck));\n    }\n  }\n\n  getToken(forceRefresh?: boolean): Promise<AppCheckTokenResult> {\n    if (!this.appCheck) {\n      return new Promise<AppCheckTokenResult>((resolve, reject) => {\n        // Support delayed initialization of FirebaseAppCheck. This allows our\n        // customers to initialize the RTDB SDK before initializing Firebase\n        // AppCheck and ensures that all requests are authenticated if a token\n        // becomes available before the timoeout below expires.\n        setTimeout(() => {\n          if (this.appCheck) {\n            this.getToken(forceRefresh).then(resolve, reject);\n          } else {\n            resolve(null);\n          }\n        }, 0);\n      });\n    }\n    return this.appCheck.getToken(forceRefresh);\n  }\n\n  addTokenChangeListener(listener: AppCheckTokenListener) {\n    this.appCheckProvider\n      ?.get()\n      .then(appCheck => appCheck.addTokenListener(listener));\n  }\n\n  notifyForInvalidToken(): void {\n    warn(\n      `Provided AppCheck credentials for the app named \"${this.appName_}\" ` +\n        'are invalid. This usually indicates your app was not initialized correctly.'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseAuthTokenData } from '@firebase/app-types/private';\nimport {\n  FirebaseAuthInternal,\n  FirebaseAuthInternalName\n} from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\n\nimport { log, warn } from './util/util';\n\nexport interface AuthTokenProvider {\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData>;\n  addTokenChangeListener(listener: (token: string | null) => void): void;\n  removeTokenChangeListener(listener: (token: string | null) => void): void;\n  notifyForInvalidToken(): void;\n}\n\n/**\n * Abstraction around FirebaseApp's token fetching capabilities.\n */\nexport class FirebaseAuthTokenProvider implements AuthTokenProvider {\n  private auth_: FirebaseAuthInternal | null = null;\n\n  constructor(\n    private appName_: string,\n    private firebaseOptions_: object,\n    private authProvider_: Provider<FirebaseAuthInternalName>\n  ) {\n    this.auth_ = authProvider_.getImmediate({ optional: true });\n    if (!this.auth_) {\n      authProvider_.onInit(auth => (this.auth_ = auth));\n    }\n  }\n\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData> {\n    if (!this.auth_) {\n      return new Promise<FirebaseAuthTokenData>((resolve, reject) => {\n        // Support delayed initialization of FirebaseAuth. This allows our\n        // customers to initialize the RTDB SDK before initializing Firebase\n        // Auth and ensures that all requests are authenticated if a token\n        // becomes available before the timoeout below expires.\n        setTimeout(() => {\n          if (this.auth_) {\n            this.getToken(forceRefresh).then(resolve, reject);\n          } else {\n            resolve(null);\n          }\n        }, 0);\n      });\n    }\n\n    return this.auth_.getToken(forceRefresh).catch(error => {\n      // TODO: Need to figure out all the cases this is raised and whether\n      // this makes sense.\n      if (error && error.code === 'auth/token-not-initialized') {\n        log('Got auth/token-not-initialized error.  Treating as null token.');\n        return null;\n      } else {\n        return Promise.reject(error);\n      }\n    });\n  }\n\n  addTokenChangeListener(listener: (token: string | null) => void): void {\n    // TODO: We might want to wrap the listener and call it with no args to\n    // avoid a leaky abstraction, but that makes removing the listener harder.\n    if (this.auth_) {\n      this.auth_.addAuthTokenListener(listener);\n    } else {\n      this.authProvider_\n        .get()\n        .then(auth => auth.addAuthTokenListener(listener));\n    }\n  }\n\n  removeTokenChangeListener(listener: (token: string | null) => void): void {\n    this.authProvider_\n      .get()\n      .then(auth => auth.removeAuthTokenListener(listener));\n  }\n\n  notifyForInvalidToken(): void {\n    let errorMessage =\n      'Provided authentication credentials for the app named \"' +\n      this.appName_ +\n      '\" are invalid. This usually indicates your app was not ' +\n      'initialized correctly. ';\n    if ('credential' in this.firebaseOptions_) {\n      errorMessage +=\n        'Make sure the \"credential\" property provided to initializeApp() ' +\n        'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n        'project.';\n    } else if ('serviceAccount' in this.firebaseOptions_) {\n      errorMessage +=\n        'Make sure the \"serviceAccount\" property provided to initializeApp() ' +\n        'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n        'project.';\n    } else {\n      errorMessage +=\n        'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' +\n        'initializeApp() match the values provided for your app at ' +\n        'https://console.firebase.google.com/.';\n    }\n    warn(errorMessage);\n  }\n}\n\n/* AuthTokenProvider that supplies a constant token. Used by Admin SDK or mockUserToken with emulators. */\nexport class EmulatorTokenProvider implements AuthTokenProvider {\n  /** A string that is treated as an admin access token by the RTDB emulator. Used by Admin SDK. */\n  static OWNER = 'owner';\n\n  constructor(private accessToken: string) {}\n\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData> {\n    return Promise.resolve({\n      accessToken: this.accessToken\n    });\n  }\n\n  addTokenChangeListener(listener: (token: string | null) => void): void {\n    // Invoke the listener immediately to match the behavior in Firebase Auth\n    // (see packages/auth/src/auth.js#L1807)\n    listener(this.accessToken);\n  }\n\n  removeTokenChangeListener(listener: (token: string | null) => void): void {}\n\n  notifyForInvalidToken(): void {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const PROTOCOL_VERSION = '5';\n\nexport const VERSION_PARAM = 'v';\n\nexport const TRANSPORT_SESSION_PARAM = 's';\n\nexport const REFERER_PARAM = 'r';\n\nexport const FORGE_REF = 'f';\n\n// Matches console.firebase.google.com, firebase-console-*.corp.google.com and\n// firebase.corp.google.com\nexport const FORGE_DOMAIN_RE =\n  /(console\\.firebase|firebase-console-\\w+\\.corp|firebase\\.corp)\\.google\\.com/;\n\nexport const LAST_SESSION_PARAM = 'ls';\n\nexport const APPLICATION_ID_PARAM = 'p';\n\nexport const APP_CHECK_TOKEN_PARAM = 'ac';\n\nexport const WEBSOCKET = 'websocket';\n\nexport const LONG_POLLING = 'long_polling';\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { LONG_POLLING, WEBSOCKET } from '../realtime/Constants';\n\nimport { PersistentStorage } from './storage/storage';\nimport { each } from './util/util';\n\n/**\n * A class that holds metadata about a Repo object\n */\nexport class RepoInfo {\n  private _host: string;\n  private _domain: string;\n  internalHost: string;\n\n  /**\n   * @param host - Hostname portion of the url for the repo\n   * @param secure - Whether or not this repo is accessed over ssl\n   * @param namespace - The namespace represented by the repo\n   * @param webSocketOnly - Whether to prefer websockets over all other transports (used by Nest).\n   * @param nodeAdmin - Whether this instance uses Admin SDK credentials\n   * @param persistenceKey - Override the default session persistence storage key\n   */\n  constructor(\n    host: string,\n    public readonly secure: boolean,\n    public readonly namespace: string,\n    public readonly webSocketOnly: boolean,\n    public readonly nodeAdmin: boolean = false,\n    public readonly persistenceKey: string = '',\n    public readonly includeNamespaceInQueryParams: boolean = false\n  ) {\n    this._host = host.toLowerCase();\n    this._domain = this._host.substr(this._host.indexOf('.') + 1);\n    this.internalHost =\n      (PersistentStorage.get('host:' + host) as string) || this._host;\n  }\n\n  isCacheableHost(): boolean {\n    return this.internalHost.substr(0, 2) === 's-';\n  }\n\n  isCustomHost() {\n    return (\n      this._domain !== 'firebaseio.com' &&\n      this._domain !== 'firebaseio-demo.com'\n    );\n  }\n\n  get host() {\n    return this._host;\n  }\n\n  set host(newHost: string) {\n    if (newHost !== this.internalHost) {\n      this.internalHost = newHost;\n      if (this.isCacheableHost()) {\n        PersistentStorage.set('host:' + this._host, this.internalHost);\n      }\n    }\n  }\n\n  toString(): string {\n    let str = this.toURLString();\n    if (this.persistenceKey) {\n      str += '<' + this.persistenceKey + '>';\n    }\n    return str;\n  }\n\n  toURLString(): string {\n    const protocol = this.secure ? 'https://' : 'http://';\n    const query = this.includeNamespaceInQueryParams\n      ? `?ns=${this.namespace}`\n      : '';\n    return `${protocol}${this.host}/${query}`;\n  }\n}\n\nfunction repoInfoNeedsQueryParam(repoInfo: RepoInfo): boolean {\n  return (\n    repoInfo.host !== repoInfo.internalHost ||\n    repoInfo.isCustomHost() ||\n    repoInfo.includeNamespaceInQueryParams\n  );\n}\n\n/**\n * Returns the websocket URL for this repo\n * @param repoInfo - RepoInfo object\n * @param type - of connection\n * @param params - list\n * @returns The URL for this repo\n */\nexport function repoInfoConnectionURL(\n  repoInfo: RepoInfo,\n  type: string,\n  params: { [k: string]: string }\n): string {\n  assert(typeof type === 'string', 'typeof type must == string');\n  assert(typeof params === 'object', 'typeof params must == object');\n\n  let connURL: string;\n  if (type === WEBSOCKET) {\n    connURL =\n      (repoInfo.secure ? 'wss://' : 'ws://') + repoInfo.internalHost + '/.ws?';\n  } else if (type === LONG_POLLING) {\n    connURL =\n      (repoInfo.secure ? 'https://' : 'http://') +\n      repoInfo.internalHost +\n      '/.lp?';\n  } else {\n    throw new Error('Unknown connection type: ' + type);\n  }\n  if (repoInfoNeedsQueryParam(repoInfo)) {\n    params['ns'] = repoInfo.namespace;\n  }\n\n  const pairs: string[] = [];\n\n  each(params, (key: string, value: string) => {\n    pairs.push(key + '=' + value);\n  });\n\n  return connURL + pairs.join('&');\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { deepCopy, contains } from '@firebase/util';\n\n/**\n * Tracks a collection of stats.\n */\nexport class StatsCollection {\n  private counters_: { [k: string]: number } = {};\n\n  incrementCounter(name: string, amount: number = 1) {\n    if (!contains(this.counters_, name)) {\n      this.counters_[name] = 0;\n    }\n\n    this.counters_[name] += amount;\n  }\n\n  get() {\n    return deepCopy(this.counters_);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../RepoInfo';\n\nimport { StatsCollection } from './StatsCollection';\n\nconst collections: { [k: string]: StatsCollection } = {};\nconst reporters: { [k: string]: unknown } = {};\n\nexport function statsManagerGetCollection(repoInfo: RepoInfo): StatsCollection {\n  const hashString = repoInfo.toString();\n\n  if (!collections[hashString]) {\n    collections[hashString] = new StatsCollection();\n  }\n\n  return collections[hashString];\n}\n\nexport function statsManagerGetOrCreateReporter<T>(\n  repoInfo: RepoInfo,\n  creatorFunction: () => T\n): T {\n  const hashString = repoInfo.toString();\n\n  if (!reporters[hashString]) {\n    reporters[hashString] = creatorFunction();\n  }\n\n  return reporters[hashString] as T;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { exceptionGuard } from '../../core/util/util';\n\n/**\n * This class ensures the packets from the server arrive in order\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\n */\nexport class PacketReceiver {\n  pendingResponses: unknown[] = [];\n  currentResponseNum = 0;\n  closeAfterResponse = -1;\n  onClose: (() => void) | null = null;\n\n  /**\n   * @param onMessage_\n   */\n  constructor(private onMessage_: (a: {}) => void) {}\n\n  closeAfter(responseNum: number, callback: () => void) {\n    this.closeAfterResponse = responseNum;\n    this.onClose = callback;\n    if (this.closeAfterResponse < this.currentResponseNum) {\n      this.onClose();\n      this.onClose = null;\n    }\n  }\n\n  /**\n   * Each message from the server comes with a response number, and an array of data. The responseNumber\n   * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\n   * browsers will respond in the same order as the requests we sent\n   */\n  handleResponse(requestNum: number, data: unknown[]) {\n    this.pendingResponses[requestNum] = data;\n    while (this.pendingResponses[this.currentResponseNum]) {\n      const toProcess = this.pendingResponses[\n        this.currentResponseNum\n      ] as unknown[];\n      delete this.pendingResponses[this.currentResponseNum];\n      for (let i = 0; i < toProcess.length; ++i) {\n        if (toProcess[i]) {\n          exceptionGuard(() => {\n            this.onMessage_(toProcess[i]);\n          });\n        }\n      }\n      if (this.currentResponseNum === this.closeAfterResponse) {\n        if (this.onClose) {\n          this.onClose();\n          this.onClose = null;\n        }\n        break;\n      }\n      this.currentResponseNum++;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { base64Encode, isNodeSdk, stringify } from '@firebase/util';\n\nimport { RepoInfo, repoInfoConnectionURL } from '../core/RepoInfo';\nimport { StatsCollection } from '../core/stats/StatsCollection';\nimport { statsManagerGetCollection } from '../core/stats/StatsManager';\nimport {\n  executeWhenDOMReady,\n  isChromeExtensionContentScript,\n  isWindowsStoreApp,\n  log,\n  logWrapper,\n  LUIDGenerator,\n  splitStringBySize\n} from '../core/util/util';\n\nimport {\n  APP_CHECK_TOKEN_PARAM,\n  APPLICATION_ID_PARAM,\n  FORGE_DOMAIN_RE,\n  FORGE_REF,\n  LAST_SESSION_PARAM,\n  LONG_POLLING,\n  PROTOCOL_VERSION,\n  REFERER_PARAM,\n  TRANSPORT_SESSION_PARAM,\n  VERSION_PARAM\n} from './Constants';\nimport { PacketReceiver } from './polling/PacketReceiver';\nimport { Transport } from './Transport';\n\n// URL query parameters associated with longpolling\nexport const FIREBASE_LONGPOLL_START_PARAM = 'start';\nexport const FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\nexport const FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\nexport const FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\nexport const FIREBASE_LONGPOLL_ID_PARAM = 'id';\nexport const FIREBASE_LONGPOLL_PW_PARAM = 'pw';\nexport const FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\nexport const FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\nexport const FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\nexport const FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\nexport const FIREBASE_LONGPOLL_DATA_PARAM = 'd';\nexport const FIREBASE_LONGPOLL_DISCONN_FRAME_PARAM = 'disconn';\nexport const FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\n\n//Data size constants.\n//TODO: Perf: the maximum length actually differs from browser to browser.\n// We should check what browser we're on and set accordingly.\nconst MAX_URL_DATA_SIZE = 1870;\nconst SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\nconst MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\n\n/**\n * Keepalive period\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\n * length of 30 seconds that we can't exceed.\n */\nconst KEEPALIVE_REQUEST_INTERVAL = 25000;\n\n/**\n * How long to wait before aborting a long-polling connection attempt.\n */\nconst LP_CONNECT_TIMEOUT = 30000;\n\n/**\n * This class manages a single long-polling connection.\n */\nexport class BrowserPollConnection implements Transport {\n  bytesSent = 0;\n  bytesReceived = 0;\n  urlFn: (params: object) => string;\n  scriptTagHolder: FirebaseIFrameScriptHolder;\n  myDisconnFrame: HTMLIFrameElement;\n  curSegmentNum: number;\n  myPacketOrderer: PacketReceiver;\n  id: string;\n  password: string;\n  private log_: (...a: unknown[]) => void;\n  private stats_: StatsCollection;\n  private everConnected_ = false;\n  private isClosed_: boolean;\n  private connectTimeoutTimer_: number | null;\n  private onDisconnect_: ((a?: boolean) => void) | null;\n\n  /**\n   * @param connId An identifier for this connection, used for logging\n   * @param repoInfo The info for the endpoint to send data to.\n   * @param applicationId The Firebase App ID for this project.\n   * @param appCheckToken The AppCheck token for this client.\n   * @param authToken The AuthToken to use for this connection.\n   * @param transportSessionId Optional transportSessionid if we are\n   * reconnecting for an existing transport session\n   * @param lastSessionId Optional lastSessionId if the PersistentConnection has\n   * already created a connection previously\n   */\n  constructor(\n    public connId: string,\n    public repoInfo: RepoInfo,\n    private applicationId?: string,\n    private appCheckToken?: string,\n    private authToken?: string,\n    public transportSessionId?: string,\n    public lastSessionId?: string\n  ) {\n    this.log_ = logWrapper(connId);\n    this.stats_ = statsManagerGetCollection(repoInfo);\n    this.urlFn = (params: { [k: string]: string }) => {\n      // Always add the token if we have one.\n      if (this.appCheckToken) {\n        params[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\n      }\n      return repoInfoConnectionURL(repoInfo, LONG_POLLING, params);\n    };\n  }\n\n  /**\n   * @param onMessage - Callback when messages arrive\n   * @param onDisconnect - Callback with connection lost.\n   */\n  open(onMessage: (msg: {}) => void, onDisconnect: (a?: boolean) => void) {\n    this.curSegmentNum = 0;\n    this.onDisconnect_ = onDisconnect;\n    this.myPacketOrderer = new PacketReceiver(onMessage);\n    this.isClosed_ = false;\n\n    this.connectTimeoutTimer_ = setTimeout(() => {\n      this.log_('Timed out trying to connect.');\n      // Make sure we clear the host cache\n      this.onClosed_();\n      this.connectTimeoutTimer_ = null;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(LP_CONNECT_TIMEOUT)) as any;\n\n    // Ensure we delay the creation of the iframe until the DOM is loaded.\n    executeWhenDOMReady(() => {\n      if (this.isClosed_) {\n        return;\n      }\n\n      //Set up a callback that gets triggered once a connection is set up.\n      this.scriptTagHolder = new FirebaseIFrameScriptHolder(\n        (...args) => {\n          const [command, arg1, arg2, arg3, arg4] = args;\n          this.incrementIncomingBytes_(args);\n          if (!this.scriptTagHolder) {\n            return; // we closed the connection.\n          }\n\n          if (this.connectTimeoutTimer_) {\n            clearTimeout(this.connectTimeoutTimer_);\n            this.connectTimeoutTimer_ = null;\n          }\n          this.everConnected_ = true;\n          if (command === FIREBASE_LONGPOLL_START_PARAM) {\n            this.id = arg1 as string;\n            this.password = arg2 as string;\n          } else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\n            // Don't clear the host cache. We got a response from the server, so we know it's reachable\n            if (arg1) {\n              // We aren't expecting any more data (other than what the server's already in the process of sending us\n              // through our already open polls), so don't send any more.\n              this.scriptTagHolder.sendNewPolls = false;\n\n              // arg1 in this case is the last response number sent by the server. We should try to receive\n              // all of the responses up to this one before closing\n              this.myPacketOrderer.closeAfter(arg1 as number, () => {\n                this.onClosed_();\n              });\n            } else {\n              this.onClosed_();\n            }\n          } else {\n            throw new Error('Unrecognized command received: ' + command);\n          }\n        },\n        (...args) => {\n          const [pN, data] = args;\n          this.incrementIncomingBytes_(args);\n          this.myPacketOrderer.handleResponse(pN as number, data as unknown[]);\n        },\n        () => {\n          this.onClosed_();\n        },\n        this.urlFn\n      );\n\n      //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\n      //from cache.\n      const urlParams: { [k: string]: string | number } = {};\n      urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(\n        Math.random() * 100000000\n      );\n      if (this.scriptTagHolder.uniqueCallbackIdentifier) {\n        urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] =\n          this.scriptTagHolder.uniqueCallbackIdentifier;\n      }\n      urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n      if (this.transportSessionId) {\n        urlParams[TRANSPORT_SESSION_PARAM] = this.transportSessionId;\n      }\n      if (this.lastSessionId) {\n        urlParams[LAST_SESSION_PARAM] = this.lastSessionId;\n      }\n      if (this.applicationId) {\n        urlParams[APPLICATION_ID_PARAM] = this.applicationId;\n      }\n      if (this.appCheckToken) {\n        urlParams[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\n      }\n      if (\n        typeof location !== 'undefined' &&\n        location.hostname &&\n        FORGE_DOMAIN_RE.test(location.hostname)\n      ) {\n        urlParams[REFERER_PARAM] = FORGE_REF;\n      }\n      const connectURL = this.urlFn(urlParams);\n      this.log_('Connecting via long-poll to ' + connectURL);\n      this.scriptTagHolder.addTag(connectURL, () => {\n        /* do nothing */\n      });\n    });\n  }\n\n  /**\n   * Call this when a handshake has completed successfully and we want to consider the connection established\n   */\n  start() {\n    this.scriptTagHolder.startLongPoll(this.id, this.password);\n    this.addDisconnectPingFrame(this.id, this.password);\n  }\n\n  private static forceAllow_: boolean;\n\n  /**\n   * Forces long polling to be considered as a potential transport\n   */\n  static forceAllow() {\n    BrowserPollConnection.forceAllow_ = true;\n  }\n\n  private static forceDisallow_: boolean;\n\n  /**\n   * Forces longpolling to not be considered as a potential transport\n   */\n  static forceDisallow() {\n    BrowserPollConnection.forceDisallow_ = true;\n  }\n\n  // Static method, use string literal so it can be accessed in a generic way\n  static isAvailable() {\n    if (isNodeSdk()) {\n      return false;\n    } else if (BrowserPollConnection.forceAllow_) {\n      return true;\n    } else {\n      // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\n      // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\n      return (\n        !BrowserPollConnection.forceDisallow_ &&\n        typeof document !== 'undefined' &&\n        document.createElement != null &&\n        !isChromeExtensionContentScript() &&\n        !isWindowsStoreApp()\n      );\n    }\n  }\n\n  /**\n   * No-op for polling\n   */\n  markConnectionHealthy() {}\n\n  /**\n   * Stops polling and cleans up the iframe\n   */\n  private shutdown_() {\n    this.isClosed_ = true;\n\n    if (this.scriptTagHolder) {\n      this.scriptTagHolder.close();\n      this.scriptTagHolder = null;\n    }\n\n    //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\n    if (this.myDisconnFrame) {\n      document.body.removeChild(this.myDisconnFrame);\n      this.myDisconnFrame = null;\n    }\n\n    if (this.connectTimeoutTimer_) {\n      clearTimeout(this.connectTimeoutTimer_);\n      this.connectTimeoutTimer_ = null;\n    }\n  }\n\n  /**\n   * Triggered when this transport is closed\n   */\n  private onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is closing itself');\n      this.shutdown_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_(this.everConnected_);\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n\n  /**\n   * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\n   * that we've left.\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is being closed.');\n      this.shutdown_();\n    }\n  }\n\n  /**\n   * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\n   * broken into chunks (since URLs have a small maximum length).\n   * @param data - The JSON data to transmit.\n   */\n  send(data: {}) {\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n\n    //first, lets get the base64-encoded data\n    const base64data = base64Encode(dataStr);\n\n    //We can only fit a certain amount in each URL, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n    const dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\n\n    //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\n    //of segments so that we can reassemble the packet on the server.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.scriptTagHolder.enqueueSegment(\n        this.curSegmentNum,\n        dataSegs.length,\n        dataSegs[i]\n      );\n      this.curSegmentNum++;\n    }\n  }\n\n  /**\n   * This is how we notify the server that we're leaving.\n   * We aren't able to send requests with DHTML on a window close event, but we can\n   * trigger XHR requests in some browsers (everything but Opera basically).\n   */\n  addDisconnectPingFrame(id: string, pw: string) {\n    if (isNodeSdk()) {\n      return;\n    }\n    this.myDisconnFrame = document.createElement('iframe');\n    const urlParams: { [k: string]: string } = {};\n    urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\n    urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\n    urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\n    this.myDisconnFrame.src = this.urlFn(urlParams);\n    this.myDisconnFrame.style.display = 'none';\n\n    document.body.appendChild(this.myDisconnFrame);\n  }\n\n  /**\n   * Used to track the bytes received by this client\n   */\n  private incrementIncomingBytes_(args: unknown) {\n    // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\n    const bytesReceived = stringify(args).length;\n    this.bytesReceived += bytesReceived;\n    this.stats_.incrementCounter('bytes_received', bytesReceived);\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface IFrameElement extends HTMLIFrameElement {\n  doc: Document;\n}\n\n/*********************************************************************************************\n * A wrapper around an iframe that is used as a long-polling script holder.\n *********************************************************************************************/\nexport class FirebaseIFrameScriptHolder {\n  //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\n  //problems in some browsers.\n  outstandingRequests = new Set<number>();\n\n  //A queue of the pending segments waiting for transmission to the server.\n  pendingSegs: Array<{ seg: number; ts: number; d: unknown }> = [];\n\n  //A serial number. We use this for two things:\n  // 1) A way to ensure the browser doesn't cache responses to polls\n  // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\n  //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\n  //    JSONP code in the order it was added to the iframe.\n  currentSerial = Math.floor(Math.random() * 100000000);\n\n  // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\n  // incoming data from the server that we're waiting for).\n  sendNewPolls = true;\n\n  uniqueCallbackIdentifier: number;\n  myIFrame: IFrameElement;\n  alive: boolean;\n  myID: string;\n  myPW: string;\n  commandCB: (command: string, ...args: unknown[]) => void;\n  onMessageCB: (...args: unknown[]) => void;\n\n  /**\n   * @param commandCB - The callback to be called when control commands are recevied from the server.\n   * @param onMessageCB - The callback to be triggered when responses arrive from the server.\n   * @param onDisconnect - The callback to be triggered when this tag holder is closed\n   * @param urlFn - A function that provides the URL of the endpoint to send data to.\n   */\n  constructor(\n    commandCB: (command: string, ...args: unknown[]) => void,\n    onMessageCB: (...args: unknown[]) => void,\n    public onDisconnect: () => void,\n    public urlFn: (a: object) => string\n  ) {\n    if (!isNodeSdk()) {\n      //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\n      //iframes where we put the long-polling script tags. We have two callbacks:\n      //   1) Command Callback - Triggered for control issues, like starting a connection.\n      //   2) Message Callback - Triggered when new data arrives.\n      this.uniqueCallbackIdentifier = LUIDGenerator();\n      window[\n        FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier\n      ] = commandCB;\n      window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] =\n        onMessageCB;\n\n      //Create an iframe for us to add script tags to.\n      this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\n\n      // Set the iframe's contents.\n      let script = '';\n      // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\n      // for ie9, but ie8 needs to do it again in the document itself.\n      if (\n        this.myIFrame.src &&\n        this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:'\n      ) {\n        const currentDomain = document.domain;\n        script = '<script>document.domain=\"' + currentDomain + '\";</script>';\n      }\n      const iframeContents = '<html><body>' + script + '</body></html>';\n      try {\n        this.myIFrame.doc.open();\n        this.myIFrame.doc.write(iframeContents);\n        this.myIFrame.doc.close();\n      } catch (e) {\n        log('frame writing exception');\n        if (e.stack) {\n          log(e.stack);\n        }\n        log(e);\n      }\n    } else {\n      this.commandCB = commandCB;\n      this.onMessageCB = onMessageCB;\n    }\n  }\n\n  /**\n   * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\n   * actually use.\n   */\n  private static createIFrame_(): IFrameElement {\n    const iframe = document.createElement('iframe') as IFrameElement;\n    iframe.style.display = 'none';\n\n    // This is necessary in order to initialize the document inside the iframe\n    if (document.body) {\n      document.body.appendChild(iframe);\n      try {\n        // If document.domain has been modified in IE, this will throw an error, and we need to set the\n        // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\n        // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\n        const a = iframe.contentWindow.document;\n        if (!a) {\n          // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\n          log('No IE domain setting required');\n        }\n      } catch (e) {\n        const domain = document.domain;\n        iframe.src =\n          \"javascript:void((function(){document.open();document.domain='\" +\n          domain +\n          \"';document.close();})())\";\n      }\n    } else {\n      // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\n      // never gets hit.\n      throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\n    }\n\n    // Get the document of the iframe in a browser-specific way.\n    if (iframe.contentDocument) {\n      iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\n    } else if (iframe.contentWindow) {\n      iframe.doc = iframe.contentWindow.document; // Internet Explorer\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if ((iframe as any).document) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      iframe.doc = (iframe as any).document; //others?\n    }\n\n    return iframe;\n  }\n\n  /**\n   * Cancel all outstanding queries and remove the frame.\n   */\n  close() {\n    //Mark this iframe as dead, so no new requests are sent.\n    this.alive = false;\n\n    if (this.myIFrame) {\n      //We have to actually remove all of the html inside this iframe before removing it from the\n      //window, or IE will continue loading and executing the script tags we've already added, which\n      //can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.\n      this.myIFrame.doc.body.innerHTML = '';\n      setTimeout(() => {\n        if (this.myIFrame !== null) {\n          document.body.removeChild(this.myIFrame);\n          this.myIFrame = null;\n        }\n      }, Math.floor(0));\n    }\n\n    // Protect from being called recursively.\n    const onDisconnect = this.onDisconnect;\n    if (onDisconnect) {\n      this.onDisconnect = null;\n      onDisconnect();\n    }\n  }\n\n  /**\n   * Actually start the long-polling session by adding the first script tag(s) to the iframe.\n   * @param id - The ID of this connection\n   * @param pw - The password for this connection\n   */\n  startLongPoll(id: string, pw: string) {\n    this.myID = id;\n    this.myPW = pw;\n    this.alive = true;\n\n    //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\n    while (this.newRequest_()) {}\n  }\n\n  /**\n   * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\n   * too many outstanding requests and we are still alive.\n   *\n   * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\n   * needed.\n   */\n  private newRequest_() {\n    // We keep one outstanding request open all the time to receive data, but if we need to send data\n    // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\n    // close the old request.\n    if (\n      this.alive &&\n      this.sendNewPolls &&\n      this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)\n    ) {\n      //construct our url\n      this.currentSerial++;\n      const urlParams: { [k: string]: string | number } = {};\n      urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\n      urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\n      let theURL = this.urlFn(urlParams);\n      //Now add as much data as we can.\n      let curDataString = '';\n      let i = 0;\n\n      while (this.pendingSegs.length > 0) {\n        //first, lets see if the next segment will fit.\n        const nextSeg = this.pendingSegs[0];\n        if (\n          (nextSeg.d as unknown[]).length +\n            SEG_HEADER_SIZE +\n            curDataString.length <=\n          MAX_URL_DATA_SIZE\n        ) {\n          //great, the segment will fit. Lets append it.\n          const theSeg = this.pendingSegs.shift();\n          curDataString =\n            curDataString +\n            '&' +\n            FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +\n            i +\n            '=' +\n            theSeg.seg +\n            '&' +\n            FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +\n            i +\n            '=' +\n            theSeg.ts +\n            '&' +\n            FIREBASE_LONGPOLL_DATA_PARAM +\n            i +\n            '=' +\n            theSeg.d;\n          i++;\n        } else {\n          break;\n        }\n      }\n\n      theURL = theURL + curDataString;\n      this.addLongPollTag_(theURL, this.currentSerial);\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Queue a packet for transmission to the server.\n   * @param segnum - A sequential id for this packet segment used for reassembly\n   * @param totalsegs - The total number of segments in this packet\n   * @param data - The data for this segment.\n   */\n  enqueueSegment(segnum: number, totalsegs: number, data: unknown) {\n    //add this to the queue of segments to send.\n    this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });\n\n    //send the data immediately if there isn't already data being transmitted, unless\n    //startLongPoll hasn't been called yet.\n    if (this.alive) {\n      this.newRequest_();\n    }\n  }\n\n  /**\n   * Add a script tag for a regular long-poll request.\n   * @param url - The URL of the script tag.\n   * @param serial - The serial number of the request.\n   */\n  private addLongPollTag_(url: string, serial: number) {\n    //remember that we sent this request.\n    this.outstandingRequests.add(serial);\n\n    const doNewRequest = () => {\n      this.outstandingRequests.delete(serial);\n      this.newRequest_();\n    };\n\n    // If this request doesn't return on its own accord (by the server sending us some data), we'll\n    // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\n    const keepaliveTimeout = setTimeout(\n      doNewRequest,\n      Math.floor(KEEPALIVE_REQUEST_INTERVAL)\n    );\n\n    const readyStateCB = () => {\n      // Request completed.  Cancel the keepalive.\n      clearTimeout(keepaliveTimeout);\n\n      // Trigger a new request so we can continue receiving data.\n      doNewRequest();\n    };\n\n    this.addTag(url, readyStateCB);\n  }\n\n  /**\n   * Add an arbitrary script tag to the iframe.\n   * @param url - The URL for the script tag source.\n   * @param loadCB - A callback to be triggered once the script has loaded.\n   */\n  addTag(url: string, loadCB: () => void) {\n    if (isNodeSdk()) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (this as any).doNodeLongPoll(url, loadCB);\n    } else {\n      setTimeout(() => {\n        try {\n          // if we're already closed, don't add this poll\n          if (!this.sendNewPolls) {\n            return;\n          }\n          const newScript = this.myIFrame.doc.createElement('script');\n          newScript.type = 'text/javascript';\n          newScript.async = true;\n          newScript.src = url;\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          newScript.onload = (newScript as any).onreadystatechange =\n            function () {\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              const rstate = (newScript as any).readyState;\n              if (!rstate || rstate === 'loaded' || rstate === 'complete') {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                newScript.onload = (newScript as any).onreadystatechange = null;\n                if (newScript.parentNode) {\n                  newScript.parentNode.removeChild(newScript);\n                }\n                loadCB();\n              }\n            };\n          newScript.onerror = () => {\n            log('Long-poll script failed to load: ' + url);\n            this.sendNewPolls = false;\n            this.close();\n          };\n          this.myIFrame.doc.body.appendChild(newScript);\n        } catch (e) {\n          // TODO: we should make this error visible somehow\n        }\n      }, Math.floor(1));\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, isNodeSdk, jsonEval, stringify } from '@firebase/util';\n\nimport { RepoInfo, repoInfoConnectionURL } from '../core/RepoInfo';\nimport { StatsCollection } from '../core/stats/StatsCollection';\nimport { statsManagerGetCollection } from '../core/stats/StatsManager';\nimport { PersistentStorage } from '../core/storage/storage';\nimport { logWrapper, splitStringBySize } from '../core/util/util';\nimport { SDK_VERSION } from '../core/version';\n\nimport {\n  APP_CHECK_TOKEN_PARAM,\n  FORGE_DOMAIN_RE,\n  FORGE_REF,\n  LAST_SESSION_PARAM,\n  PROTOCOL_VERSION,\n  REFERER_PARAM,\n  TRANSPORT_SESSION_PARAM,\n  VERSION_PARAM,\n  WEBSOCKET\n} from './Constants';\nimport { Transport } from './Transport';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndeclare const MozWebSocket: any;\n\nconst WEBSOCKET_MAX_FRAME_SIZE = 16384;\nconst WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\n\nlet WebSocketImpl = null;\nif (typeof MozWebSocket !== 'undefined') {\n  WebSocketImpl = MozWebSocket;\n} else if (typeof WebSocket !== 'undefined') {\n  WebSocketImpl = WebSocket;\n}\n\nexport function setWebSocketImpl(impl) {\n  WebSocketImpl = impl;\n}\n\n/**\n * Create a new websocket connection with the given callbacks.\n */\nexport class WebSocketConnection implements Transport {\n  keepaliveTimer: number | null = null;\n  frames: string[] | null = null;\n  totalFrames = 0;\n  bytesSent = 0;\n  bytesReceived = 0;\n  connURL: string;\n  onDisconnect: (a?: boolean) => void;\n  onMessage: (msg: {}) => void;\n  mySock: WebSocket | null;\n  private log_: (...a: unknown[]) => void;\n  private stats_: StatsCollection;\n  private everConnected_: boolean;\n  private isClosed_: boolean;\n  private nodeAdmin: boolean;\n\n  /**\n   * @param connId identifier for this transport\n   * @param repoInfo The info for the websocket endpoint.\n   * @param applicationId The Firebase App ID for this project.\n   * @param appCheckToken The App Check Token for this client.\n   * @param authToken The Auth Token for this client.\n   * @param transportSessionId Optional transportSessionId if this is connecting\n   * to an existing transport session\n   * @param lastSessionId Optional lastSessionId if there was a previous\n   * connection\n   */\n  constructor(\n    public connId: string,\n    repoInfo: RepoInfo,\n    private applicationId?: string,\n    private appCheckToken?: string,\n    private authToken?: string,\n    transportSessionId?: string,\n    lastSessionId?: string\n  ) {\n    this.log_ = logWrapper(this.connId);\n    this.stats_ = statsManagerGetCollection(repoInfo);\n    this.connURL = WebSocketConnection.connectionURL_(\n      repoInfo,\n      transportSessionId,\n      lastSessionId,\n      appCheckToken\n    );\n    this.nodeAdmin = repoInfo.nodeAdmin;\n  }\n\n  /**\n   * @param repoInfo - The info for the websocket endpoint.\n   * @param transportSessionId - Optional transportSessionId if this is connecting to an existing transport\n   *                                         session\n   * @param lastSessionId - Optional lastSessionId if there was a previous connection\n   * @returns connection url\n   */\n  private static connectionURL_(\n    repoInfo: RepoInfo,\n    transportSessionId?: string,\n    lastSessionId?: string,\n    appCheckToken?: string\n  ): string {\n    const urlParams: { [k: string]: string } = {};\n    urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n\n    if (\n      !isNodeSdk() &&\n      typeof location !== 'undefined' &&\n      location.hostname &&\n      FORGE_DOMAIN_RE.test(location.hostname)\n    ) {\n      urlParams[REFERER_PARAM] = FORGE_REF;\n    }\n    if (transportSessionId) {\n      urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\n    }\n    if (lastSessionId) {\n      urlParams[LAST_SESSION_PARAM] = lastSessionId;\n    }\n    if (appCheckToken) {\n      urlParams[APP_CHECK_TOKEN_PARAM] = appCheckToken;\n    }\n\n    return repoInfoConnectionURL(repoInfo, WEBSOCKET, urlParams);\n  }\n\n  /**\n   * @param onMessage - Callback when messages arrive\n   * @param onDisconnect - Callback with connection lost.\n   */\n  open(onMessage: (msg: {}) => void, onDisconnect: (a?: boolean) => void) {\n    this.onDisconnect = onDisconnect;\n    this.onMessage = onMessage;\n\n    this.log_('Websocket connecting to ' + this.connURL);\n\n    this.everConnected_ = false;\n    // Assume failure until proven otherwise.\n    PersistentStorage.set('previous_websocket_failure', true);\n\n    try {\n      if (isNodeSdk()) {\n        const device = this.nodeAdmin ? 'AdminNode' : 'Node';\n        // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\n        const options: { [k: string]: object } = {\n          headers: {\n            'User-Agent': `Firebase/${PROTOCOL_VERSION}/${SDK_VERSION}/${process.platform}/${device}`,\n            'X-Firebase-GMPID': this.applicationId || ''\n          }\n        };\n\n        // If using Node with admin creds, AppCheck-related checks are unnecessary.\n        // Note that we send the credentials here even if they aren't admin credentials, which is\n        // not a problem.\n        // Note that this header is just used to bypass appcheck, and the token should still be sent\n        // through the websocket connection once it is established.\n        if (this.authToken) {\n          options.headers['Authorization'] = `Bearer ${this.authToken}`;\n        }\n        if (this.appCheckToken) {\n          options.headers['X-Firebase-AppCheck'] = this.appCheckToken;\n        }\n\n        // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\n        const env = process['env'];\n        const proxy =\n          this.connURL.indexOf('wss://') === 0\n            ? env['HTTPS_PROXY'] || env['https_proxy']\n            : env['HTTP_PROXY'] || env['http_proxy'];\n\n        if (proxy) {\n          options['proxy'] = { origin: proxy };\n        }\n\n        this.mySock = new WebSocketImpl(this.connURL, [], options);\n      } else {\n        const options: { [k: string]: object } = {\n          headers: {\n            'X-Firebase-GMPID': this.applicationId || '',\n            'X-Firebase-AppCheck': this.appCheckToken || ''\n          }\n        };\n        this.mySock = new WebSocketImpl(this.connURL, [], options);\n      }\n    } catch (e) {\n      this.log_('Error instantiating WebSocket.');\n      const error = e.message || e.data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n      return;\n    }\n\n    this.mySock.onopen = () => {\n      this.log_('Websocket connected.');\n      this.everConnected_ = true;\n    };\n\n    this.mySock.onclose = () => {\n      this.log_('Websocket connection was disconnected.');\n      this.mySock = null;\n      this.onClosed_();\n    };\n\n    this.mySock.onmessage = m => {\n      this.handleIncomingFrame(m as {});\n    };\n\n    this.mySock.onerror = e => {\n      this.log_('WebSocket error.  Closing connection.');\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const error = (e as any).message || (e as any).data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n    };\n  }\n\n  /**\n   * No-op for websockets, we don't need to do anything once the connection is confirmed as open\n   */\n  start() {}\n\n  static forceDisallow_: boolean;\n\n  static forceDisallow() {\n    WebSocketConnection.forceDisallow_ = true;\n  }\n\n  static isAvailable(): boolean {\n    let isOldAndroid = false;\n    if (typeof navigator !== 'undefined' && navigator.userAgent) {\n      const oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\n      const oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\n      if (oldAndroidMatch && oldAndroidMatch.length > 1) {\n        if (parseFloat(oldAndroidMatch[1]) < 4.4) {\n          isOldAndroid = true;\n        }\n      }\n    }\n\n    return (\n      !isOldAndroid &&\n      WebSocketImpl !== null &&\n      !WebSocketConnection.forceDisallow_\n    );\n  }\n\n  /**\n   * Number of response before we consider the connection \"healthy.\"\n   */\n  static responsesRequiredToBeHealthy = 2;\n\n  /**\n   * Time to wait for the connection te become healthy before giving up.\n   */\n  static healthyTimeout = 30000;\n\n  /**\n   * Returns true if we previously failed to connect with this transport.\n   */\n  static previouslyFailed(): boolean {\n    // If our persistent storage is actually only in-memory storage,\n    // we default to assuming that it previously failed to be safe.\n    return (\n      PersistentStorage.isInMemoryStorage ||\n      PersistentStorage.get('previous_websocket_failure') === true\n    );\n  }\n\n  markConnectionHealthy() {\n    PersistentStorage.remove('previous_websocket_failure');\n  }\n\n  private appendFrame_(data: string) {\n    this.frames.push(data);\n    if (this.frames.length === this.totalFrames) {\n      const fullMess = this.frames.join('');\n      this.frames = null;\n      const jsonMess = jsonEval(fullMess) as object;\n\n      //handle the message\n      this.onMessage(jsonMess);\n    }\n  }\n\n  /**\n   * @param frameCount - The number of frames we are expecting from the server\n   */\n  private handleNewFrameCount_(frameCount: number) {\n    this.totalFrames = frameCount;\n    this.frames = [];\n  }\n\n  /**\n   * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\n   * @returns Any remaining data to be process, or null if there is none\n   */\n  private extractFrameCount_(data: string): string | null {\n    assert(this.frames === null, 'We already have a frame buffer');\n    // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\n    // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\n    if (data.length <= 6) {\n      const frameCount = Number(data);\n      if (!isNaN(frameCount)) {\n        this.handleNewFrameCount_(frameCount);\n        return null;\n      }\n    }\n    this.handleNewFrameCount_(1);\n    return data;\n  }\n\n  /**\n   * Process a websocket frame that has arrived from the server.\n   * @param mess - The frame data\n   */\n  handleIncomingFrame(mess: { [k: string]: unknown }) {\n    if (this.mySock === null) {\n      return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\n    }\n    const data = mess['data'] as string;\n    this.bytesReceived += data.length;\n    this.stats_.incrementCounter('bytes_received', data.length);\n\n    this.resetKeepAlive();\n\n    if (this.frames !== null) {\n      // we're buffering\n      this.appendFrame_(data);\n    } else {\n      // try to parse out a frame count, otherwise, assume 1 and process it\n      const remainingData = this.extractFrameCount_(data);\n      if (remainingData !== null) {\n        this.appendFrame_(remainingData);\n      }\n    }\n  }\n\n  /**\n   * Send a message to the server\n   * @param data - The JSON object to transmit\n   */\n  send(data: {}) {\n    this.resetKeepAlive();\n\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n\n    //We can only fit a certain amount in each websocket frame, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n\n    const dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\n\n    //Send the length header\n    if (dataSegs.length > 1) {\n      this.sendString_(String(dataSegs.length));\n    }\n\n    //Send the actual data in segments.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.sendString_(dataSegs[i]);\n    }\n  }\n\n  private shutdown_() {\n    this.isClosed_ = true;\n    if (this.keepaliveTimer) {\n      clearInterval(this.keepaliveTimer);\n      this.keepaliveTimer = null;\n    }\n\n    if (this.mySock) {\n      this.mySock.close();\n      this.mySock = null;\n    }\n  }\n\n  private onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is closing itself');\n      this.shutdown_();\n\n      // since this is an internal close, trigger the close listener\n      if (this.onDisconnect) {\n        this.onDisconnect(this.everConnected_);\n        this.onDisconnect = null;\n      }\n    }\n  }\n\n  /**\n   * External-facing close handler.\n   * Close the websocket and kill the connection.\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is being closed');\n      this.shutdown_();\n    }\n  }\n\n  /**\n   * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\n   * the last activity.\n   */\n  resetKeepAlive() {\n    clearInterval(this.keepaliveTimer);\n    this.keepaliveTimer = setInterval(() => {\n      //If there has been no websocket activity for a while, send a no-op\n      if (this.mySock) {\n        this.sendString_('0');\n      }\n      this.resetKeepAlive();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL)) as any;\n  }\n\n  /**\n   * Send a string over the websocket.\n   *\n   * @param str - String to send.\n   */\n  private sendString_(str: string) {\n    // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\n    // calls for some unknown reason.  We treat these as an error and disconnect.\n    // See https://app.asana.com/0/58926111402292/68021340250410\n    try {\n      this.mySock.send(str);\n    } catch (e) {\n      this.log_(\n        'Exception thrown from WebSocket.send():',\n        e.message || e.data,\n        'Closing connection.'\n      );\n      setTimeout(this.onClosed_.bind(this), 0);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../core/RepoInfo';\nimport { warn } from '../core/util/util';\n\nimport { BrowserPollConnection } from './BrowserPollConnection';\nimport { TransportConstructor } from './Transport';\nimport { WebSocketConnection } from './WebSocketConnection';\n\n/**\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\n * lifecycle.\n *\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\n * they are available.\n */\nexport class TransportManager {\n  private transports_: TransportConstructor[];\n\n  static get ALL_TRANSPORTS() {\n    return [BrowserPollConnection, WebSocketConnection];\n  }\n\n  /**\n   * @param repoInfo - Metadata around the namespace we're connecting to\n   */\n  constructor(repoInfo: RepoInfo) {\n    this.initTransports_(repoInfo);\n  }\n\n  private initTransports_(repoInfo: RepoInfo) {\n    const isWebSocketsAvailable: boolean =\n      WebSocketConnection && WebSocketConnection['isAvailable']();\n    let isSkipPollConnection =\n      isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\n\n    if (repoInfo.webSocketOnly) {\n      if (!isWebSocketsAvailable) {\n        warn(\n          \"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\"\n        );\n      }\n\n      isSkipPollConnection = true;\n    }\n\n    if (isSkipPollConnection) {\n      this.transports_ = [WebSocketConnection];\n    } else {\n      const transports = (this.transports_ = [] as TransportConstructor[]);\n      for (const transport of TransportManager.ALL_TRANSPORTS) {\n        if (transport && transport['isAvailable']()) {\n          transports.push(transport);\n        }\n      }\n    }\n  }\n\n  /**\n   * @returns The constructor for the initial transport to use\n   */\n  initialTransport(): TransportConstructor {\n    if (this.transports_.length > 0) {\n      return this.transports_[0];\n    } else {\n      throw new Error('No transports available');\n    }\n  }\n\n  /**\n   * @returns The constructor for the next transport, or null\n   */\n  upgradeTransport(): TransportConstructor | null {\n    if (this.transports_.length > 1) {\n      return this.transports_[1];\n    } else {\n      return null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../core/RepoInfo';\nimport { PersistentStorage } from '../core/storage/storage';\nimport { Indexable } from '../core/util/misc';\nimport {\n  error,\n  logWrapper,\n  requireKey,\n  setTimeoutNonBlocking,\n  warn\n} from '../core/util/util';\n\nimport { PROTOCOL_VERSION } from './Constants';\nimport { Transport, TransportConstructor } from './Transport';\nimport { TransportManager } from './TransportManager';\n\n// Abort upgrade attempt if it takes longer than 60s.\nconst UPGRADE_TIMEOUT = 60000;\n\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\nconst DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\n\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\n// but we've sent/received enough bytes, we don't cancel the connection.\nconst BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\nconst BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\n\nconst enum RealtimeState {\n  CONNECTING,\n  CONNECTED,\n  DISCONNECTED\n}\n\nconst MESSAGE_TYPE = 't';\nconst MESSAGE_DATA = 'd';\nconst CONTROL_SHUTDOWN = 's';\nconst CONTROL_RESET = 'r';\nconst CONTROL_ERROR = 'e';\nconst CONTROL_PONG = 'o';\nconst SWITCH_ACK = 'a';\nconst END_TRANSMISSION = 'n';\nconst PING = 'p';\n\nconst SERVER_HELLO = 'h';\n\n/**\n * Creates a new real-time connection to the server using whichever method works\n * best in the current browser.\n */\nexport class Connection {\n  connectionCount = 0;\n  pendingDataMessages: unknown[] = [];\n  sessionId: string;\n\n  private conn_: Transport;\n  private healthyTimeout_: number;\n  private isHealthy_: boolean;\n  private log_: (...args: unknown[]) => void;\n  private primaryResponsesRequired_: number;\n  private rx_: Transport;\n  private secondaryConn_: Transport;\n  private secondaryResponsesRequired_: number;\n  private state_ = RealtimeState.CONNECTING;\n  private transportManager_: TransportManager;\n  private tx_: Transport;\n\n  /**\n   * @param id - an id for this connection\n   * @param repoInfo_ - the info for the endpoint to connect to\n   * @param applicationId_ - the Firebase App ID for this project\n   * @param appCheckToken_ - The App Check Token for this device.\n   * @param authToken_ - The auth token for this session.\n   * @param onMessage_ - the callback to be triggered when a server-push message arrives\n   * @param onReady_ - the callback to be triggered when this connection is ready to send messages.\n   * @param onDisconnect_ - the callback to be triggered when a connection was lost\n   * @param onKill_ - the callback to be triggered when this connection has permanently shut down.\n   * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\n   */\n  constructor(\n    public id: string,\n    private repoInfo_: RepoInfo,\n    private applicationId_: string | undefined,\n    private appCheckToken_: string | undefined,\n    private authToken_: string | undefined,\n    private onMessage_: (a: {}) => void,\n    private onReady_: (a: number, b: string) => void,\n    private onDisconnect_: () => void,\n    private onKill_: (a: string) => void,\n    public lastSessionId?: string\n  ) {\n    this.log_ = logWrapper('c:' + this.id + ':');\n    this.transportManager_ = new TransportManager(repoInfo_);\n    this.log_('Connection created');\n    this.start_();\n  }\n\n  /**\n   * Starts a connection attempt\n   */\n  private start_(): void {\n    const conn = this.transportManager_.initialTransport();\n    this.conn_ = new conn(\n      this.nextTransportId_(),\n      this.repoInfo_,\n      this.applicationId_,\n      this.appCheckToken_,\n      this.authToken_,\n      null,\n      this.lastSessionId\n    );\n\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\n\n    const onMessageReceived = this.connReceiver_(this.conn_);\n    const onConnectionLost = this.disconnReceiver_(this.conn_);\n    this.tx_ = this.conn_;\n    this.rx_ = this.conn_;\n    this.secondaryConn_ = null;\n    this.isHealthy_ = false;\n\n    /*\n     * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\n     * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\n     * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\n     * still have the context of your originating frame.\n     */\n    setTimeout(() => {\n      // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\n      this.conn_ && this.conn_.open(onMessageReceived, onConnectionLost);\n    }, Math.floor(0));\n\n    const healthyTimeoutMS = conn['healthyTimeout'] || 0;\n    if (healthyTimeoutMS > 0) {\n      this.healthyTimeout_ = setTimeoutNonBlocking(() => {\n        this.healthyTimeout_ = null;\n        if (!this.isHealthy_) {\n          if (\n            this.conn_ &&\n            this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE\n          ) {\n            this.log_(\n              'Connection exceeded healthy timeout but has received ' +\n                this.conn_.bytesReceived +\n                ' bytes.  Marking connection healthy.'\n            );\n            this.isHealthy_ = true;\n            this.conn_.markConnectionHealthy();\n          } else if (\n            this.conn_ &&\n            this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE\n          ) {\n            this.log_(\n              'Connection exceeded healthy timeout but has sent ' +\n                this.conn_.bytesSent +\n                ' bytes.  Leaving connection alive.'\n            );\n            // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\n            // the server.\n          } else {\n            this.log_('Closing unhealthy connection after timeout.');\n            this.close();\n          }\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      }, Math.floor(healthyTimeoutMS)) as any;\n    }\n  }\n\n  private nextTransportId_(): string {\n    return 'c:' + this.id + ':' + this.connectionCount++;\n  }\n\n  private disconnReceiver_(conn) {\n    return everConnected => {\n      if (conn === this.conn_) {\n        this.onConnectionLost_(everConnected);\n      } else if (conn === this.secondaryConn_) {\n        this.log_('Secondary connection lost.');\n        this.onSecondaryConnectionLost_();\n      } else {\n        this.log_('closing an old connection');\n      }\n    };\n  }\n\n  private connReceiver_(conn: Transport) {\n    return (message: Indexable) => {\n      if (this.state_ !== RealtimeState.DISCONNECTED) {\n        if (conn === this.rx_) {\n          this.onPrimaryMessageReceived_(message);\n        } else if (conn === this.secondaryConn_) {\n          this.onSecondaryMessageReceived_(message);\n        } else {\n          this.log_('message on old connection');\n        }\n      }\n    };\n  }\n\n  /**\n   * @param dataMsg - An arbitrary data message to be sent to the server\n   */\n  sendRequest(dataMsg: object) {\n    // wrap in a data message envelope and send it on\n    const msg = { t: 'd', d: dataMsg };\n    this.sendData_(msg);\n  }\n\n  tryCleanupConnection() {\n    if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\n      this.log_(\n        'cleaning up and promoting a connection: ' + this.secondaryConn_.connId\n      );\n      this.conn_ = this.secondaryConn_;\n      this.secondaryConn_ = null;\n      // the server will shutdown the old connection\n    }\n  }\n\n  private onSecondaryControl_(controlData: { [k: string]: unknown }) {\n    if (MESSAGE_TYPE in controlData) {\n      const cmd = controlData[MESSAGE_TYPE] as string;\n      if (cmd === SWITCH_ACK) {\n        this.upgradeIfSecondaryHealthy_();\n      } else if (cmd === CONTROL_RESET) {\n        // Most likely the session wasn't valid. Abandon the switch attempt\n        this.log_('Got a reset on secondary, closing it');\n        this.secondaryConn_.close();\n        // If we were already using this connection for something, than we need to fully close\n        if (\n          this.tx_ === this.secondaryConn_ ||\n          this.rx_ === this.secondaryConn_\n        ) {\n          this.close();\n        }\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on secondary.');\n        this.secondaryResponsesRequired_--;\n        this.upgradeIfSecondaryHealthy_();\n      }\n    }\n  }\n\n  private onSecondaryMessageReceived_(parsedData: Indexable) {\n    const layer: string = requireKey('t', parsedData) as string;\n    const data: unknown = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onSecondaryControl_(data as Indexable);\n    } else if (layer === 'd') {\n      // got a data message, but we're still second connection. Need to buffer it up\n      this.pendingDataMessages.push(data);\n    } else {\n      throw new Error('Unknown protocol layer: ' + layer);\n    }\n  }\n\n  private upgradeIfSecondaryHealthy_() {\n    if (this.secondaryResponsesRequired_ <= 0) {\n      this.log_('Secondary connection is healthy.');\n      this.isHealthy_ = true;\n      this.secondaryConn_.markConnectionHealthy();\n      this.proceedWithUpgrade_();\n    } else {\n      // Send a ping to make sure the connection is healthy.\n      this.log_('sending ping on secondary.');\n      this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });\n    }\n  }\n\n  private proceedWithUpgrade_() {\n    // tell this connection to consider itself open\n    this.secondaryConn_.start();\n    // send ack\n    this.log_('sending client ack on secondary');\n    this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });\n\n    // send end packet on primary transport, switch to sending on this one\n    // can receive on this one, buffer responses until end received on primary transport\n    this.log_('Ending transmission on primary');\n    this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });\n    this.tx_ = this.secondaryConn_;\n\n    this.tryCleanupConnection();\n  }\n\n  private onPrimaryMessageReceived_(parsedData: { [k: string]: unknown }) {\n    // Must refer to parsedData properties in quotes, so closure doesn't touch them.\n    const layer: string = requireKey('t', parsedData) as string;\n    const data: unknown = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onControl_(data as { [k: string]: unknown });\n    } else if (layer === 'd') {\n      this.onDataMessage_(data);\n    }\n  }\n\n  private onDataMessage_(message: unknown) {\n    this.onPrimaryResponse_();\n\n    // We don't do anything with data messages, just kick them up a level\n    this.onMessage_(message);\n  }\n\n  private onPrimaryResponse_() {\n    if (!this.isHealthy_) {\n      this.primaryResponsesRequired_--;\n      if (this.primaryResponsesRequired_ <= 0) {\n        this.log_('Primary connection is healthy.');\n        this.isHealthy_ = true;\n        this.conn_.markConnectionHealthy();\n      }\n    }\n  }\n\n  private onControl_(controlData: { [k: string]: unknown }) {\n    const cmd: string = requireKey(MESSAGE_TYPE, controlData) as string;\n    if (MESSAGE_DATA in controlData) {\n      const payload = controlData[MESSAGE_DATA];\n      if (cmd === SERVER_HELLO) {\n        this.onHandshake_(\n          payload as {\n            ts: number;\n            v: string;\n            h: string;\n            s: string;\n          }\n        );\n      } else if (cmd === END_TRANSMISSION) {\n        this.log_('recvd end transmission on primary');\n        this.rx_ = this.secondaryConn_;\n        for (let i = 0; i < this.pendingDataMessages.length; ++i) {\n          this.onDataMessage_(this.pendingDataMessages[i]);\n        }\n        this.pendingDataMessages = [];\n        this.tryCleanupConnection();\n      } else if (cmd === CONTROL_SHUTDOWN) {\n        // This was previously the 'onKill' callback passed to the lower-level connection\n        // payload in this case is the reason for the shutdown. Generally a human-readable error\n        this.onConnectionShutdown_(payload as string);\n      } else if (cmd === CONTROL_RESET) {\n        // payload in this case is the host we should contact\n        this.onReset_(payload as string);\n      } else if (cmd === CONTROL_ERROR) {\n        error('Server Error: ' + payload);\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on primary.');\n        this.onPrimaryResponse_();\n        this.sendPingOnPrimaryIfNecessary_();\n      } else {\n        error('Unknown control packet command: ' + cmd);\n      }\n    }\n  }\n\n  /**\n   * @param handshake - The handshake data returned from the server\n   */\n  private onHandshake_(handshake: {\n    ts: number;\n    v: string;\n    h: string;\n    s: string;\n  }): void {\n    const timestamp = handshake.ts;\n    const version = handshake.v;\n    const host = handshake.h;\n    this.sessionId = handshake.s;\n    this.repoInfo_.host = host;\n    // if we've already closed the connection, then don't bother trying to progress further\n    if (this.state_ === RealtimeState.CONNECTING) {\n      this.conn_.start();\n      this.onConnectionEstablished_(this.conn_, timestamp);\n      if (PROTOCOL_VERSION !== version) {\n        warn('Protocol version mismatch detected');\n      }\n      // TODO: do we want to upgrade? when? maybe a delay?\n      this.tryStartUpgrade_();\n    }\n  }\n\n  private tryStartUpgrade_() {\n    const conn = this.transportManager_.upgradeTransport();\n    if (conn) {\n      this.startUpgrade_(conn);\n    }\n  }\n\n  private startUpgrade_(conn: TransportConstructor) {\n    this.secondaryConn_ = new conn(\n      this.nextTransportId_(),\n      this.repoInfo_,\n      this.applicationId_,\n      this.appCheckToken_,\n      this.authToken_,\n      this.sessionId\n    );\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.secondaryResponsesRequired_ =\n      conn['responsesRequiredToBeHealthy'] || 0;\n\n    const onMessage = this.connReceiver_(this.secondaryConn_);\n    const onDisconnect = this.disconnReceiver_(this.secondaryConn_);\n    this.secondaryConn_.open(onMessage, onDisconnect);\n\n    // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\n    setTimeoutNonBlocking(() => {\n      if (this.secondaryConn_) {\n        this.log_('Timed out trying to upgrade.');\n        this.secondaryConn_.close();\n      }\n    }, Math.floor(UPGRADE_TIMEOUT));\n  }\n\n  private onReset_(host: string) {\n    this.log_('Reset packet received.  New host: ' + host);\n    this.repoInfo_.host = host;\n    // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\n    // We don't currently support resets after the connection has already been established\n    if (this.state_ === RealtimeState.CONNECTED) {\n      this.close();\n    } else {\n      // Close whatever connections we have open and start again.\n      this.closeConnections_();\n      this.start_();\n    }\n  }\n\n  private onConnectionEstablished_(conn: Transport, timestamp: number) {\n    this.log_('Realtime connection established.');\n    this.conn_ = conn;\n    this.state_ = RealtimeState.CONNECTED;\n\n    if (this.onReady_) {\n      this.onReady_(timestamp, this.sessionId);\n      this.onReady_ = null;\n    }\n\n    // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\n    // send some pings.\n    if (this.primaryResponsesRequired_ === 0) {\n      this.log_('Primary connection is healthy.');\n      this.isHealthy_ = true;\n    } else {\n      setTimeoutNonBlocking(() => {\n        this.sendPingOnPrimaryIfNecessary_();\n      }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\n    }\n  }\n\n  private sendPingOnPrimaryIfNecessary_() {\n    // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\n    if (!this.isHealthy_ && this.state_ === RealtimeState.CONNECTED) {\n      this.log_('sending ping on primary.');\n      this.sendData_({ t: 'c', d: { t: PING, d: {} } });\n    }\n  }\n\n  private onSecondaryConnectionLost_() {\n    const conn = this.secondaryConn_;\n    this.secondaryConn_ = null;\n    if (this.tx_ === conn || this.rx_ === conn) {\n      // we are relying on this connection already in some capacity. Therefore, a failure is real\n      this.close();\n    }\n  }\n\n  /**\n   * @param everConnected - Whether or not the connection ever reached a server. Used to determine if\n   * we should flush the host cache\n   */\n  private onConnectionLost_(everConnected: boolean) {\n    this.conn_ = null;\n\n    // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\n    // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\n    if (!everConnected && this.state_ === RealtimeState.CONNECTING) {\n      this.log_('Realtime connection failed.');\n      // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\n      if (this.repoInfo_.isCacheableHost()) {\n        PersistentStorage.remove('host:' + this.repoInfo_.host);\n        // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\n        this.repoInfo_.internalHost = this.repoInfo_.host;\n      }\n    } else if (this.state_ === RealtimeState.CONNECTED) {\n      this.log_('Realtime connection lost.');\n    }\n\n    this.close();\n  }\n\n  private onConnectionShutdown_(reason: string) {\n    this.log_('Connection shutdown command received. Shutting down...');\n\n    if (this.onKill_) {\n      this.onKill_(reason);\n      this.onKill_ = null;\n    }\n\n    // We intentionally don't want to fire onDisconnect (kill is a different case),\n    // so clear the callback.\n    this.onDisconnect_ = null;\n\n    this.close();\n  }\n\n  private sendData_(data: object) {\n    if (this.state_ !== RealtimeState.CONNECTED) {\n      throw 'Connection is not connected';\n    } else {\n      this.tx_.send(data);\n    }\n  }\n\n  /**\n   * Cleans up this connection, calling the appropriate callbacks\n   */\n  close() {\n    if (this.state_ !== RealtimeState.DISCONNECTED) {\n      this.log_('Closing realtime connection.');\n      this.state_ = RealtimeState.DISCONNECTED;\n\n      this.closeConnections_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_();\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n\n  private closeConnections_() {\n    this.log_('Shutting down all connections');\n    if (this.conn_) {\n      this.conn_.close();\n      this.conn_ = null;\n    }\n\n    if (this.secondaryConn_) {\n      this.secondaryConn_.close();\n      this.secondaryConn_ = null;\n    }\n\n    if (this.healthyTimeout_) {\n      clearTimeout(this.healthyTimeout_);\n      this.healthyTimeout_ = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { QueryContext } from './view/EventRegistration';\n\n/**\n * Interface defining the set of actions that can be performed against the Firebase server\n * (basically corresponds to our wire protocol).\n *\n * @interface\n */\nexport abstract class ServerActions {\n  abstract listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ): void;\n\n  /**\n   * Remove a listen.\n   */\n  abstract unlisten(query: QueryContext, tag: number | null): void;\n\n  /**\n   * Get the server value satisfying this query.\n   */\n  abstract get(query: QueryContext): Promise<string>;\n\n  put(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void,\n    hash?: string\n  ) {}\n\n  merge(\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {}\n\n  /**\n   * Refreshes the auth token for the current connection.\n   * @param token - The authentication token\n   */\n  refreshAuthToken(token: string) {}\n\n  /**\n   * Refreshes the app check token for the current connection.\n   * @param token The app check token\n   */\n  refreshAppCheckToken(token: string) {}\n\n  onDisconnectPut(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  onDisconnectMerge(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  onDisconnectCancel(\n    pathString: string,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  reportStats(stats: { [k: string]: unknown }) {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\n/**\n * Base class to be used if you want to emit events. Call the constructor with\n * the set of allowed event names.\n */\nexport abstract class EventEmitter {\n  private listeners_: {\n    [eventType: string]: Array<{\n      callback(...args: unknown[]): void;\n      context: unknown;\n    }>;\n  } = {};\n\n  constructor(private allowedEvents_: string[]) {\n    assert(\n      Array.isArray(allowedEvents_) && allowedEvents_.length > 0,\n      'Requires a non-empty array'\n    );\n  }\n\n  /**\n   * To be overridden by derived classes in order to fire an initial event when\n   * somebody subscribes for data.\n   *\n   * @returns {Array.<*>} Array of parameters to trigger initial event with.\n   */\n  abstract getInitialEvent(eventType: string): unknown[];\n\n  /**\n   * To be called by derived classes to trigger events.\n   */\n  protected trigger(eventType: string, ...varArgs: unknown[]) {\n    if (Array.isArray(this.listeners_[eventType])) {\n      // Clone the list, since callbacks could add/remove listeners.\n      const listeners = [...this.listeners_[eventType]];\n\n      for (let i = 0; i < listeners.length; i++) {\n        listeners[i].callback.apply(listeners[i].context, varArgs);\n      }\n    }\n  }\n\n  on(eventType: string, callback: (a: unknown) => void, context: unknown) {\n    this.validateEventType_(eventType);\n    this.listeners_[eventType] = this.listeners_[eventType] || [];\n    this.listeners_[eventType].push({ callback, context });\n\n    const eventData = this.getInitialEvent(eventType);\n    if (eventData) {\n      callback.apply(context, eventData);\n    }\n  }\n\n  off(eventType: string, callback: (a: unknown) => void, context: unknown) {\n    this.validateEventType_(eventType);\n    const listeners = this.listeners_[eventType] || [];\n    for (let i = 0; i < listeners.length; i++) {\n      if (\n        listeners[i].callback === callback &&\n        (!context || context === listeners[i].context)\n      ) {\n        listeners.splice(i, 1);\n        return;\n      }\n    }\n  }\n\n  private validateEventType_(eventType: string) {\n    assert(\n      this.allowedEvents_.find(et => {\n        return et === eventType;\n      }),\n      'Unknown event: ' + eventType\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, isMobileCordova } from '@firebase/util';\n\nimport { EventEmitter } from './EventEmitter';\n\n/**\n * Monitors online state (as reported by window.online/offline events).\n *\n * The expectation is that this could have many false positives (thinks we are online\n * when we're not), but no false negatives.  So we can safely use it to determine when\n * we definitely cannot reach the internet.\n */\nexport class OnlineMonitor extends EventEmitter {\n  private online_ = true;\n\n  static getInstance() {\n    return new OnlineMonitor();\n  }\n\n  constructor() {\n    super(['online']);\n\n    // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\n    // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\n    // It would seem that the 'online' event does not always fire consistently. So we disable it\n    // for Cordova.\n    if (\n      typeof window !== 'undefined' &&\n      typeof window.addEventListener !== 'undefined' &&\n      !isMobileCordova()\n    ) {\n      window.addEventListener(\n        'online',\n        () => {\n          if (!this.online_) {\n            this.online_ = true;\n            this.trigger('online', true);\n          }\n        },\n        false\n      );\n\n      window.addEventListener(\n        'offline',\n        () => {\n          if (this.online_) {\n            this.online_ = false;\n            this.trigger('online', false);\n          }\n        },\n        false\n      );\n    }\n  }\n\n  getInitialEvent(eventType: string): boolean[] {\n    assert(eventType === 'online', 'Unknown event type: ' + eventType);\n    return [this.online_];\n  }\n\n  currentlyOnline(): boolean {\n    return this.online_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stringLength } from '@firebase/util';\n\nimport { nameCompare } from './util';\n\n/** Maximum key depth. */\nconst MAX_PATH_DEPTH = 32;\n\n/** Maximum number of (UTF8) bytes in a Firebase path. */\nconst MAX_PATH_LENGTH_BYTES = 768;\n\n/**\n * An immutable object representing a parsed path.  It's immutable so that you\n * can pass them around to other functions without worrying about them changing\n * it.\n */\n\nexport class Path {\n  pieces_: string[];\n  pieceNum_: number;\n\n  /**\n   * @param pathOrString - Path string to parse, or another path, or the raw\n   * tokens array\n   */\n  constructor(pathOrString: string | string[], pieceNum?: number) {\n    if (pieceNum === void 0) {\n      this.pieces_ = (pathOrString as string).split('/');\n\n      // Remove empty pieces.\n      let copyTo = 0;\n      for (let i = 0; i < this.pieces_.length; i++) {\n        if (this.pieces_[i].length > 0) {\n          this.pieces_[copyTo] = this.pieces_[i];\n          copyTo++;\n        }\n      }\n      this.pieces_.length = copyTo;\n\n      this.pieceNum_ = 0;\n    } else {\n      this.pieces_ = pathOrString as string[];\n      this.pieceNum_ = pieceNum;\n    }\n  }\n\n  toString(): string {\n    let pathString = '';\n    for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\n      if (this.pieces_[i] !== '') {\n        pathString += '/' + this.pieces_[i];\n      }\n    }\n\n    return pathString || '/';\n  }\n}\n\nexport function newEmptyPath(): Path {\n  return new Path('');\n}\n\nexport function pathGetFront(path: Path): string | null {\n  if (path.pieceNum_ >= path.pieces_.length) {\n    return null;\n  }\n\n  return path.pieces_[path.pieceNum_];\n}\n\n/**\n * @returns The number of segments in this path\n */\nexport function pathGetLength(path: Path): number {\n  return path.pieces_.length - path.pieceNum_;\n}\n\nexport function pathPopFront(path: Path): Path {\n  let pieceNum = path.pieceNum_;\n  if (pieceNum < path.pieces_.length) {\n    pieceNum++;\n  }\n  return new Path(path.pieces_, pieceNum);\n}\n\nexport function pathGetBack(path: Path): string | null {\n  if (path.pieceNum_ < path.pieces_.length) {\n    return path.pieces_[path.pieces_.length - 1];\n  }\n\n  return null;\n}\n\nexport function pathToUrlEncodedString(path: Path): string {\n  let pathString = '';\n  for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\n    if (path.pieces_[i] !== '') {\n      pathString += '/' + encodeURIComponent(String(path.pieces_[i]));\n    }\n  }\n\n  return pathString || '/';\n}\n\n/**\n * Shallow copy of the parts of the path.\n *\n */\nexport function pathSlice(path: Path, begin: number = 0): string[] {\n  return path.pieces_.slice(path.pieceNum_ + begin);\n}\n\nexport function pathParent(path: Path): Path | null {\n  if (path.pieceNum_ >= path.pieces_.length) {\n    return null;\n  }\n\n  const pieces = [];\n  for (let i = path.pieceNum_; i < path.pieces_.length - 1; i++) {\n    pieces.push(path.pieces_[i]);\n  }\n\n  return new Path(pieces, 0);\n}\n\nexport function pathChild(path: Path, childPathObj: string | Path): Path {\n  const pieces = [];\n  for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\n    pieces.push(path.pieces_[i]);\n  }\n\n  if (childPathObj instanceof Path) {\n    for (let i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {\n      pieces.push(childPathObj.pieces_[i]);\n    }\n  } else {\n    const childPieces = childPathObj.split('/');\n    for (let i = 0; i < childPieces.length; i++) {\n      if (childPieces[i].length > 0) {\n        pieces.push(childPieces[i]);\n      }\n    }\n  }\n\n  return new Path(pieces, 0);\n}\n\n/**\n * @returns True if there are no segments in this path\n */\nexport function pathIsEmpty(path: Path): boolean {\n  return path.pieceNum_ >= path.pieces_.length;\n}\n\n/**\n * @returns The path from outerPath to innerPath\n */\nexport function newRelativePath(outerPath: Path, innerPath: Path): Path {\n  const outer = pathGetFront(outerPath),\n    inner = pathGetFront(innerPath);\n  if (outer === null) {\n    return innerPath;\n  } else if (outer === inner) {\n    return newRelativePath(pathPopFront(outerPath), pathPopFront(innerPath));\n  } else {\n    throw new Error(\n      'INTERNAL ERROR: innerPath (' +\n        innerPath +\n        ') is not within ' +\n        'outerPath (' +\n        outerPath +\n        ')'\n    );\n  }\n}\n\n/**\n * @returns -1, 0, 1 if left is less, equal, or greater than the right.\n */\nexport function pathCompare(left: Path, right: Path): number {\n  const leftKeys = pathSlice(left, 0);\n  const rightKeys = pathSlice(right, 0);\n  for (let i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\n    const cmp = nameCompare(leftKeys[i], rightKeys[i]);\n    if (cmp !== 0) {\n      return cmp;\n    }\n  }\n  if (leftKeys.length === rightKeys.length) {\n    return 0;\n  }\n  return leftKeys.length < rightKeys.length ? -1 : 1;\n}\n\n/**\n * @returns true if paths are the same.\n */\nexport function pathEquals(path: Path, other: Path): boolean {\n  if (pathGetLength(path) !== pathGetLength(other)) {\n    return false;\n  }\n\n  for (\n    let i = path.pieceNum_, j = other.pieceNum_;\n    i <= path.pieces_.length;\n    i++, j++\n  ) {\n    if (path.pieces_[i] !== other.pieces_[j]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * @returns True if this path is a parent (or the same as) other\n */\nexport function pathContains(path: Path, other: Path): boolean {\n  let i = path.pieceNum_;\n  let j = other.pieceNum_;\n  if (pathGetLength(path) > pathGetLength(other)) {\n    return false;\n  }\n  while (i < path.pieces_.length) {\n    if (path.pieces_[i] !== other.pieces_[j]) {\n      return false;\n    }\n    ++i;\n    ++j;\n  }\n  return true;\n}\n\n/**\n * Dynamic (mutable) path used to count path lengths.\n *\n * This class is used to efficiently check paths for valid\n * length (in UTF8 bytes) and depth (used in path validation).\n *\n * Throws Error exception if path is ever invalid.\n *\n * The definition of a path always begins with '/'.\n */\nexport class ValidationPath {\n  parts_: string[];\n  /** Initialize to number of '/' chars needed in path. */\n  byteLength_: number;\n\n  /**\n   * @param path - Initial Path.\n   * @param errorPrefix_ - Prefix for any error messages.\n   */\n  constructor(path: Path, public errorPrefix_: string) {\n    this.parts_ = pathSlice(path, 0);\n    /** Initialize to number of '/' chars needed in path. */\n    this.byteLength_ = Math.max(1, this.parts_.length);\n\n    for (let i = 0; i < this.parts_.length; i++) {\n      this.byteLength_ += stringLength(this.parts_[i]);\n    }\n    validationPathCheckValid(this);\n  }\n}\n\nexport function validationPathPush(\n  validationPath: ValidationPath,\n  child: string\n): void {\n  // Count the needed '/'\n  if (validationPath.parts_.length > 0) {\n    validationPath.byteLength_ += 1;\n  }\n  validationPath.parts_.push(child);\n  validationPath.byteLength_ += stringLength(child);\n  validationPathCheckValid(validationPath);\n}\n\nexport function validationPathPop(validationPath: ValidationPath): void {\n  const last = validationPath.parts_.pop();\n  validationPath.byteLength_ -= stringLength(last);\n  // Un-count the previous '/'\n  if (validationPath.parts_.length > 0) {\n    validationPath.byteLength_ -= 1;\n  }\n}\n\nfunction validationPathCheckValid(validationPath: ValidationPath): void {\n  if (validationPath.byteLength_ > MAX_PATH_LENGTH_BYTES) {\n    throw new Error(\n      validationPath.errorPrefix_ +\n        'has a key path longer than ' +\n        MAX_PATH_LENGTH_BYTES +\n        ' bytes (' +\n        validationPath.byteLength_ +\n        ').'\n    );\n  }\n  if (validationPath.parts_.length > MAX_PATH_DEPTH) {\n    throw new Error(\n      validationPath.errorPrefix_ +\n        'path specified exceeds the maximum depth that can be written (' +\n        MAX_PATH_DEPTH +\n        ') or object contains a cycle ' +\n        validationPathToErrorString(validationPath)\n    );\n  }\n}\n\n/**\n * String for use in error messages - uses '.' notation for path.\n */\nexport function validationPathToErrorString(\n  validationPath: ValidationPath\n): string {\n  if (validationPath.parts_.length === 0) {\n    return '';\n  }\n  return \"in property '\" + validationPath.parts_.join('.') + \"'\";\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { EventEmitter } from './EventEmitter';\n\ndeclare const document: Document;\n\nexport class VisibilityMonitor extends EventEmitter {\n  private visible_: boolean;\n\n  static getInstance() {\n    return new VisibilityMonitor();\n  }\n\n  constructor() {\n    super(['visible']);\n    let hidden: string;\n    let visibilityChange: string;\n    if (\n      typeof document !== 'undefined' &&\n      typeof document.addEventListener !== 'undefined'\n    ) {\n      if (typeof document['hidden'] !== 'undefined') {\n        // Opera 12.10 and Firefox 18 and later support\n        visibilityChange = 'visibilitychange';\n        hidden = 'hidden';\n      } else if (typeof document['mozHidden'] !== 'undefined') {\n        visibilityChange = 'mozvisibilitychange';\n        hidden = 'mozHidden';\n      } else if (typeof document['msHidden'] !== 'undefined') {\n        visibilityChange = 'msvisibilitychange';\n        hidden = 'msHidden';\n      } else if (typeof document['webkitHidden'] !== 'undefined') {\n        visibilityChange = 'webkitvisibilitychange';\n        hidden = 'webkitHidden';\n      }\n    }\n\n    // Initially, we always assume we are visible. This ensures that in browsers\n    // without page visibility support or in cases where we are never visible\n    // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\n    // reconnects\n    this.visible_ = true;\n\n    if (visibilityChange) {\n      document.addEventListener(\n        visibilityChange,\n        () => {\n          const visible = !document[hidden];\n          if (visible !== this.visible_) {\n            this.visible_ = visible;\n            this.trigger('visible', visible);\n          }\n        },\n        false\n      );\n    }\n  }\n\n  getInitialEvent(eventType: string): boolean[] {\n    assert(eventType === 'visible', 'Unknown event type: ' + eventType);\n    return [this.visible_];\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  contains,\n  Deferred,\n  isEmpty,\n  isMobileCordova,\n  isNodeSdk,\n  isReactNative,\n  isValidFormat,\n  safeGet,\n  stringify,\n  isAdmin\n} from '@firebase/util';\n\nimport { Connection } from '../realtime/Connection';\n\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { RepoInfo } from './RepoInfo';\nimport { ServerActions } from './ServerActions';\nimport { OnlineMonitor } from './util/OnlineMonitor';\nimport { Path } from './util/Path';\nimport { error, log, logWrapper, warn, ObjectToUniqueKey } from './util/util';\nimport { VisibilityMonitor } from './util/VisibilityMonitor';\nimport { SDK_VERSION } from './version';\nimport { QueryContext } from './view/EventRegistration';\n\nconst RECONNECT_MIN_DELAY = 1000;\nconst RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\nconst GET_CONNECT_TIMEOUT = 3 * 1000;\nconst RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\nconst RECONNECT_DELAY_MULTIPLIER = 1.3;\nconst RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\nconst SERVER_KILL_INTERRUPT_REASON = 'server_kill';\n\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\nconst INVALID_TOKEN_THRESHOLD = 3;\n\ninterface ListenSpec {\n  onComplete(s: string, p?: unknown): void;\n\n  hashFn(): string;\n\n  query: QueryContext;\n  tag: number | null;\n}\n\ninterface OnDisconnectRequest {\n  pathString: string;\n  action: string;\n  data: unknown;\n  onComplete?: (a: string, b: string) => void;\n}\n\ninterface OutstandingPut {\n  action: string;\n  request: object;\n  queued?: boolean;\n  onComplete: (a: string, b?: string) => void;\n}\n\ninterface OutstandingGet {\n  request: object;\n  onComplete: (response: { [k: string]: unknown }) => void;\n}\n\n/**\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\n *\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\n * in quotes to make sure the closure compiler does not minify them.\n */\nexport class PersistentConnection extends ServerActions {\n  // Used for diagnostic logging.\n  id = PersistentConnection.nextPersistentConnectionId_++;\n  private log_ = logWrapper('p:' + this.id + ':');\n\n  private interruptReasons_: { [reason: string]: boolean } = {};\n  private readonly listens: Map<\n    /* path */ string,\n    Map</* queryId */ string, ListenSpec>\n  > = new Map();\n  private outstandingPuts_: OutstandingPut[] = [];\n  private outstandingGets_: OutstandingGet[] = [];\n  private outstandingPutCount_ = 0;\n  private outstandingGetCount_ = 0;\n  private onDisconnectRequestQueue_: OnDisconnectRequest[] = [];\n  private connected_ = false;\n  private reconnectDelay_ = RECONNECT_MIN_DELAY;\n  private maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\n  private securityDebugCallback_: ((a: object) => void) | null = null;\n  lastSessionId: string | null = null;\n\n  private establishConnectionTimer_: number | null = null;\n\n  private visible_: boolean = false;\n\n  // Before we get connected, we keep a queue of pending messages to send.\n  private requestCBHash_: { [k: number]: (a: unknown) => void } = {};\n  private requestNumber_ = 0;\n\n  private realtime_: {\n    sendRequest(a: object): void;\n    close(): void;\n  } | null = null;\n\n  private authToken_: string | null = null;\n  private appCheckToken_: string | null = null;\n  private forceTokenRefresh_ = false;\n  private invalidAuthTokenCount_ = 0;\n  private invalidAppCheckTokenCount_ = 0;\n\n  private firstConnection_ = true;\n  private lastConnectionAttemptTime_: number | null = null;\n  private lastConnectionEstablishedTime_: number | null = null;\n\n  private static nextPersistentConnectionId_ = 0;\n\n  /**\n   * Counter for number of connections created. Mainly used for tagging in the logs\n   */\n  private static nextConnectionId_ = 0;\n\n  /**\n   * @param repoInfo_ - Data about the namespace we are connecting to\n   * @param applicationId_ - The Firebase App ID for this project\n   * @param onDataUpdate_ - A callback for new data from the server\n   */\n  constructor(\n    private repoInfo_: RepoInfo,\n    private applicationId_: string,\n    private onDataUpdate_: (\n      a: string,\n      b: unknown,\n      c: boolean,\n      d: number | null\n    ) => void,\n    private onConnectStatus_: (a: boolean) => void,\n    private onServerInfoUpdate_: (a: unknown) => void,\n    private authTokenProvider_: AuthTokenProvider,\n    private appCheckTokenProvider_: AppCheckTokenProvider,\n    private authOverride_?: object | null\n  ) {\n    super();\n\n    if (authOverride_ && !isNodeSdk()) {\n      throw new Error(\n        'Auth override specified in options, but not supported on non Node.js platforms'\n      );\n    }\n\n    VisibilityMonitor.getInstance().on('visible', this.onVisible_, this);\n\n    if (repoInfo_.host.indexOf('fblocal') === -1) {\n      OnlineMonitor.getInstance().on('online', this.onOnline_, this);\n    }\n  }\n\n  protected sendRequest(\n    action: string,\n    body: unknown,\n    onResponse?: (a: unknown) => void\n  ) {\n    const curReqNum = ++this.requestNumber_;\n\n    const msg = { r: curReqNum, a: action, b: body };\n    this.log_(stringify(msg));\n    assert(\n      this.connected_,\n      \"sendRequest call when we're not connected not allowed.\"\n    );\n    this.realtime_.sendRequest(msg);\n    if (onResponse) {\n      this.requestCBHash_[curReqNum] = onResponse;\n    }\n  }\n\n  get(query: QueryContext): Promise<string> {\n    this.initConnection_();\n\n    const deferred = new Deferred<string>();\n    const request = {\n      p: query._path.toString(),\n      q: query._queryObject\n    };\n    const outstandingGet = {\n      action: 'g',\n      request,\n      onComplete: (message: { [k: string]: unknown }) => {\n        const payload = message['d'] as string;\n        if (message['s'] === 'ok') {\n          this.onDataUpdate_(\n            request['p'],\n            payload,\n            /*isMerge*/ false,\n            /*tag*/ null\n          );\n          deferred.resolve(payload);\n        } else {\n          deferred.reject(payload);\n        }\n      }\n    };\n    this.outstandingGets_.push(outstandingGet);\n    this.outstandingGetCount_++;\n    const index = this.outstandingGets_.length - 1;\n\n    if (!this.connected_) {\n      setTimeout(() => {\n        const get = this.outstandingGets_[index];\n        if (get === undefined || outstandingGet !== get) {\n          return;\n        }\n        delete this.outstandingGets_[index];\n        this.outstandingGetCount_--;\n        if (this.outstandingGetCount_ === 0) {\n          this.outstandingGets_ = [];\n        }\n        this.log_('get ' + index + ' timed out on connection');\n        deferred.reject(new Error('Client is offline.'));\n      }, GET_CONNECT_TIMEOUT);\n    }\n\n    if (this.connected_) {\n      this.sendGet_(index);\n    }\n\n    return deferred.promise;\n  }\n\n  listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ) {\n    this.initConnection_();\n\n    const queryId = query._queryIdentifier;\n    const pathString = query._path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + queryId);\n    if (!this.listens.has(pathString)) {\n      this.listens.set(pathString, new Map());\n    }\n    assert(\n      query._queryParams.isDefault() || !query._queryParams.loadsAllData(),\n      'listen() called for non-default but complete query'\n    );\n    assert(\n      !this.listens.get(pathString)!.has(queryId),\n      'listen() called twice for same path/queryId.'\n    );\n    const listenSpec: ListenSpec = {\n      onComplete,\n      hashFn: currentHashFn,\n      query,\n      tag\n    };\n    this.listens.get(pathString)!.set(queryId, listenSpec);\n\n    if (this.connected_) {\n      this.sendListen_(listenSpec);\n    }\n  }\n\n  private sendGet_(index: number) {\n    const get = this.outstandingGets_[index];\n    this.sendRequest('g', get.request, (message: { [k: string]: unknown }) => {\n      delete this.outstandingGets_[index];\n      this.outstandingGetCount_--;\n      if (this.outstandingGetCount_ === 0) {\n        this.outstandingGets_ = [];\n      }\n      if (get.onComplete) {\n        get.onComplete(message);\n      }\n    });\n  }\n\n  private sendListen_(listenSpec: ListenSpec) {\n    const query = listenSpec.query;\n    const pathString = query._path.toString();\n    const queryId = query._queryIdentifier;\n    this.log_('Listen on ' + pathString + ' for ' + queryId);\n    const req: { [k: string]: unknown } = { /*path*/ p: pathString };\n\n    const action = 'q';\n\n    // Only bother to send query if it's non-default.\n    if (listenSpec.tag) {\n      req['q'] = query._queryObject;\n      req['t'] = listenSpec.tag;\n    }\n\n    req[/*hash*/ 'h'] = listenSpec.hashFn();\n\n    this.sendRequest(action, req, (message: { [k: string]: unknown }) => {\n      const payload: unknown = message[/*data*/ 'd'];\n      const status = message[/*status*/ 's'] as string;\n\n      // print warnings in any case...\n      PersistentConnection.warnOnListenWarnings_(payload, query);\n\n      const currentListenSpec =\n        this.listens.get(pathString) &&\n        this.listens.get(pathString)!.get(queryId);\n      // only trigger actions if the listen hasn't been removed and readded\n      if (currentListenSpec === listenSpec) {\n        this.log_('listen response', message);\n\n        if (status !== 'ok') {\n          this.removeListen_(pathString, queryId);\n        }\n\n        if (listenSpec.onComplete) {\n          listenSpec.onComplete(status, payload);\n        }\n      }\n    });\n  }\n\n  private static warnOnListenWarnings_(payload: unknown, query: QueryContext) {\n    if (payload && typeof payload === 'object' && contains(payload, 'w')) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const warnings = safeGet(payload as any, 'w');\n      if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\n        const indexSpec =\n          '\".indexOn\": \"' + query._queryParams.getIndex().toString() + '\"';\n        const indexPath = query._path.toString();\n        warn(\n          `Using an unspecified index. Your data will be downloaded and ` +\n            `filtered on the client. Consider adding ${indexSpec} at ` +\n            `${indexPath} to your security rules for better performance.`\n        );\n      }\n    }\n  }\n\n  refreshAuthToken(token: string) {\n    this.authToken_ = token;\n    this.log_('Auth token refreshed');\n    if (this.authToken_) {\n      this.tryAuth();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\n      //the credential so we dont become authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unauth', {}, () => {});\n      }\n    }\n\n    this.reduceReconnectDelayIfAdminCredential_(token);\n  }\n\n  private reduceReconnectDelayIfAdminCredential_(credential: string) {\n    // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\n    // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\n    const isFirebaseSecret = credential && credential.length === 40;\n    if (isFirebaseSecret || isAdmin(credential)) {\n      this.log_(\n        'Admin auth credential detected.  Reducing max reconnect time.'\n      );\n      this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n    }\n  }\n\n  refreshAppCheckToken(token: string | null) {\n    this.appCheckToken_ = token;\n    this.log_('App check token refreshed');\n    if (this.appCheckToken_) {\n      this.tryAppCheck();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us.\n      //If we're not connected, simply delete the credential so we dont become\n      // authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unappeck', {}, () => {});\n      }\n    }\n  }\n\n  /**\n   * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\n   * a auth revoked (the connection is closed).\n   */\n  tryAuth() {\n    if (this.connected_ && this.authToken_) {\n      const token = this.authToken_;\n      const authMethod = isValidFormat(token) ? 'auth' : 'gauth';\n      const requestData: { [k: string]: unknown } = { cred: token };\n      if (this.authOverride_ === null) {\n        requestData['noauth'] = true;\n      } else if (typeof this.authOverride_ === 'object') {\n        requestData['authvar'] = this.authOverride_;\n      }\n      this.sendRequest(\n        authMethod,\n        requestData,\n        (res: { [k: string]: unknown }) => {\n          const status = res[/*status*/ 's'] as string;\n          const data = (res[/*data*/ 'd'] as string) || 'error';\n\n          if (this.authToken_ === token) {\n            if (status === 'ok') {\n              this.invalidAuthTokenCount_ = 0;\n            } else {\n              // Triggers reconnect and force refresh for auth token\n              this.onAuthRevoked_(status, data);\n            }\n          }\n        }\n      );\n    }\n  }\n\n  /**\n   * Attempts to authenticate with the given token. If the authentication\n   * attempt fails, it's triggered like the token was revoked (the connection is\n   * closed).\n   */\n  tryAppCheck() {\n    if (this.connected_ && this.appCheckToken_) {\n      this.sendRequest(\n        'appcheck',\n        { 'token': this.appCheckToken_ },\n        (res: { [k: string]: unknown }) => {\n          const status = res[/*status*/ 's'] as string;\n          const data = (res[/*data*/ 'd'] as string) || 'error';\n          if (status === 'ok') {\n            this.invalidAppCheckTokenCount_ = 0;\n          } else {\n            this.onAppCheckRevoked_(status, data);\n          }\n        }\n      );\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  unlisten(query: QueryContext, tag: number | null) {\n    const pathString = query._path.toString();\n    const queryId = query._queryIdentifier;\n\n    this.log_('Unlisten called for ' + pathString + ' ' + queryId);\n\n    assert(\n      query._queryParams.isDefault() || !query._queryParams.loadsAllData(),\n      'unlisten() called for non-default but complete query'\n    );\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && this.connected_) {\n      this.sendUnlisten_(pathString, queryId, query._queryObject, tag);\n    }\n  }\n\n  private sendUnlisten_(\n    pathString: string,\n    queryId: string,\n    queryObj: object,\n    tag: number | null\n  ) {\n    this.log_('Unlisten on ' + pathString + ' for ' + queryId);\n\n    const req: { [k: string]: unknown } = { /*path*/ p: pathString };\n    const action = 'n';\n    // Only bother sending queryId if it's non-default.\n    if (tag) {\n      req['q'] = queryObj;\n      req['t'] = tag;\n    }\n\n    this.sendRequest(action, req);\n  }\n\n  onDisconnectPut(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('o', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'o',\n        data,\n        onComplete\n      });\n    }\n  }\n\n  onDisconnectMerge(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('om', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'om',\n        data,\n        onComplete\n      });\n    }\n  }\n\n  onDisconnectCancel(\n    pathString: string,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('oc', pathString, null, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'oc',\n        data: null,\n        onComplete\n      });\n    }\n  }\n\n  private sendOnDisconnect_(\n    action: string,\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string) => void\n  ) {\n    const request = { /*path*/ p: pathString, /*data*/ d: data };\n    this.log_('onDisconnect ' + action, request);\n    this.sendRequest(action, request, (response: { [k: string]: unknown }) => {\n      if (onComplete) {\n        setTimeout(() => {\n          onComplete(\n            response[/*status*/ 's'] as string,\n            response[/* data */ 'd'] as string\n          );\n        }, Math.floor(0));\n      }\n    });\n  }\n\n  put(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void,\n    hash?: string\n  ) {\n    this.putInternal('p', pathString, data, onComplete, hash);\n  }\n\n  merge(\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {\n    this.putInternal('m', pathString, data, onComplete, hash);\n  }\n\n  putInternal(\n    action: string,\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {\n    this.initConnection_();\n\n    const request: { [k: string]: unknown } = {\n      /*path*/ p: pathString,\n      /*data*/ d: data\n    };\n\n    if (hash !== undefined) {\n      request[/*hash*/ 'h'] = hash;\n    }\n\n    // TODO: Only keep track of the most recent put for a given path?\n    this.outstandingPuts_.push({\n      action,\n      request,\n      onComplete\n    });\n\n    this.outstandingPutCount_++;\n    const index = this.outstandingPuts_.length - 1;\n\n    if (this.connected_) {\n      this.sendPut_(index);\n    } else {\n      this.log_('Buffering put: ' + pathString);\n    }\n  }\n\n  private sendPut_(index: number) {\n    const action = this.outstandingPuts_[index].action;\n    const request = this.outstandingPuts_[index].request;\n    const onComplete = this.outstandingPuts_[index].onComplete;\n    this.outstandingPuts_[index].queued = this.connected_;\n\n    this.sendRequest(action, request, (message: { [k: string]: unknown }) => {\n      this.log_(action + ' response', message);\n\n      delete this.outstandingPuts_[index];\n      this.outstandingPutCount_--;\n\n      // Clean up array occasionally.\n      if (this.outstandingPutCount_ === 0) {\n        this.outstandingPuts_ = [];\n      }\n\n      if (onComplete) {\n        onComplete(\n          message[/*status*/ 's'] as string,\n          message[/* data */ 'd'] as string\n        );\n      }\n    });\n  }\n\n  reportStats(stats: { [k: string]: unknown }) {\n    // If we're not connected, we just drop the stats.\n    if (this.connected_) {\n      const request = { /*counters*/ c: stats };\n      this.log_('reportStats', request);\n\n      this.sendRequest(/*stats*/ 's', request, result => {\n        const status = result[/*status*/ 's'];\n        if (status !== 'ok') {\n          const errorReason = result[/* data */ 'd'];\n          this.log_('reportStats', 'Error sending stats: ' + errorReason);\n        }\n      });\n    }\n  }\n\n  private onDataMessage_(message: { [k: string]: unknown }) {\n    if ('r' in message) {\n      // this is a response\n      this.log_('from server: ' + stringify(message));\n      const reqNum = message['r'] as string;\n      const onResponse = this.requestCBHash_[reqNum];\n      if (onResponse) {\n        delete this.requestCBHash_[reqNum];\n        onResponse(message[/*body*/ 'b']);\n      }\n    } else if ('error' in message) {\n      throw 'A server-side error has occurred: ' + message['error'];\n    } else if ('a' in message) {\n      // a and b are action and body, respectively\n      this.onDataPush_(message['a'] as string, message['b'] as {});\n    }\n  }\n\n  private onDataPush_(action: string, body: { [k: string]: unknown }) {\n    this.log_('handleServerMessage', action, body);\n    if (action === 'd') {\n      this.onDataUpdate_(\n        body[/*path*/ 'p'] as string,\n        body[/*data*/ 'd'],\n        /*isMerge*/ false,\n        body['t'] as number\n      );\n    } else if (action === 'm') {\n      this.onDataUpdate_(\n        body[/*path*/ 'p'] as string,\n        body[/*data*/ 'd'],\n        /*isMerge=*/ true,\n        body['t'] as number\n      );\n    } else if (action === 'c') {\n      this.onListenRevoked_(\n        body[/*path*/ 'p'] as string,\n        body[/*query*/ 'q'] as unknown[]\n      );\n    } else if (action === 'ac') {\n      this.onAuthRevoked_(\n        body[/*status code*/ 's'] as string,\n        body[/* explanation */ 'd'] as string\n      );\n    } else if (action === 'apc') {\n      this.onAppCheckRevoked_(\n        body[/*status code*/ 's'] as string,\n        body[/* explanation */ 'd'] as string\n      );\n    } else if (action === 'sd') {\n      this.onSecurityDebugPacket_(body);\n    } else {\n      error(\n        'Unrecognized action received from server: ' +\n          stringify(action) +\n          '\\nAre you using the latest client?'\n      );\n    }\n  }\n\n  private onReady_(timestamp: number, sessionId: string) {\n    this.log_('connection ready');\n    this.connected_ = true;\n    this.lastConnectionEstablishedTime_ = new Date().getTime();\n    this.handleTimestamp_(timestamp);\n    this.lastSessionId = sessionId;\n    if (this.firstConnection_) {\n      this.sendConnectStats_();\n    }\n    this.restoreState_();\n    this.firstConnection_ = false;\n    this.onConnectStatus_(true);\n  }\n\n  private scheduleConnect_(timeout: number) {\n    assert(\n      !this.realtime_,\n      \"Scheduling a connect when we're already connected/ing?\"\n    );\n\n    if (this.establishConnectionTimer_) {\n      clearTimeout(this.establishConnectionTimer_);\n    }\n\n    // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\n    // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\n\n    this.establishConnectionTimer_ = setTimeout(() => {\n      this.establishConnectionTimer_ = null;\n      this.establishConnection_();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(timeout)) as any;\n  }\n\n  private initConnection_() {\n    if (!this.realtime_ && this.firstConnection_) {\n      this.scheduleConnect_(0);\n    }\n  }\n\n  private onVisible_(visible: boolean) {\n    // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\n    if (\n      visible &&\n      !this.visible_ &&\n      this.reconnectDelay_ === this.maxReconnectDelay_\n    ) {\n      this.log_('Window became visible.  Reducing delay.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n    this.visible_ = visible;\n  }\n\n  private onOnline_(online: boolean) {\n    if (online) {\n      this.log_('Browser went online.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    } else {\n      this.log_('Browser went offline.  Killing connection.');\n      if (this.realtime_) {\n        this.realtime_.close();\n      }\n    }\n  }\n\n  private onRealtimeDisconnect_() {\n    this.log_('data client disconnected');\n    this.connected_ = false;\n    this.realtime_ = null;\n\n    // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\n    this.cancelSentTransactions_();\n\n    // Clear out the pending requests.\n    this.requestCBHash_ = {};\n\n    if (this.shouldReconnect_()) {\n      if (!this.visible_) {\n        this.log_(\"Window isn't visible.  Delaying reconnect.\");\n        this.reconnectDelay_ = this.maxReconnectDelay_;\n        this.lastConnectionAttemptTime_ = new Date().getTime();\n      } else if (this.lastConnectionEstablishedTime_) {\n        // If we've been connected long enough, reset reconnect delay to minimum.\n        const timeSinceLastConnectSucceeded =\n          new Date().getTime() - this.lastConnectionEstablishedTime_;\n        if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {\n          this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n        }\n        this.lastConnectionEstablishedTime_ = null;\n      }\n\n      const timeSinceLastConnectAttempt =\n        new Date().getTime() - this.lastConnectionAttemptTime_;\n      let reconnectDelay = Math.max(\n        0,\n        this.reconnectDelay_ - timeSinceLastConnectAttempt\n      );\n      reconnectDelay = Math.random() * reconnectDelay;\n\n      this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\n      this.scheduleConnect_(reconnectDelay);\n\n      // Adjust reconnect delay for next time.\n      this.reconnectDelay_ = Math.min(\n        this.maxReconnectDelay_,\n        this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER\n      );\n    }\n    this.onConnectStatus_(false);\n  }\n\n  private async establishConnection_() {\n    if (this.shouldReconnect_()) {\n      this.log_('Making a connection attempt');\n      this.lastConnectionAttemptTime_ = new Date().getTime();\n      this.lastConnectionEstablishedTime_ = null;\n      const onDataMessage = this.onDataMessage_.bind(this);\n      const onReady = this.onReady_.bind(this);\n      const onDisconnect = this.onRealtimeDisconnect_.bind(this);\n      const connId = this.id + ':' + PersistentConnection.nextConnectionId_++;\n      const lastSessionId = this.lastSessionId;\n      let canceled = false;\n      let connection: Connection | null = null;\n      const closeFn = function () {\n        if (connection) {\n          connection.close();\n        } else {\n          canceled = true;\n          onDisconnect();\n        }\n      };\n      const sendRequestFn = function (msg: object) {\n        assert(\n          connection,\n          \"sendRequest call when we're not connected not allowed.\"\n        );\n        connection.sendRequest(msg);\n      };\n\n      this.realtime_ = {\n        close: closeFn,\n        sendRequest: sendRequestFn\n      };\n\n      const forceRefresh = this.forceTokenRefresh_;\n      this.forceTokenRefresh_ = false;\n\n      try {\n        // First fetch auth and app check token, and establish connection after\n        // fetching the token was successful\n        const [authToken, appCheckToken] = await Promise.all([\n          this.authTokenProvider_.getToken(forceRefresh),\n          this.appCheckTokenProvider_.getToken(forceRefresh)\n        ]);\n\n        if (!canceled) {\n          log('getToken() completed. Creating connection.');\n          this.authToken_ = authToken && authToken.accessToken;\n          this.appCheckToken_ = appCheckToken && appCheckToken.token;\n          connection = new Connection(\n            connId,\n            this.repoInfo_,\n            this.applicationId_,\n            this.appCheckToken_,\n            this.authToken_,\n            onDataMessage,\n            onReady,\n            onDisconnect,\n            /* onKill= */ reason => {\n              warn(reason + ' (' + this.repoInfo_.toString() + ')');\n              this.interrupt(SERVER_KILL_INTERRUPT_REASON);\n            },\n            lastSessionId\n          );\n        } else {\n          log('getToken() completed but was canceled');\n        }\n      } catch (error) {\n        this.log_('Failed to get token: ' + error);\n        if (!canceled) {\n          if (this.repoInfo_.nodeAdmin) {\n            // This may be a critical error for the Admin Node.js SDK, so log a warning.\n            // But getToken() may also just have temporarily failed, so we still want to\n            // continue retrying.\n            warn(error);\n          }\n          closeFn();\n        }\n      }\n    }\n  }\n\n  interrupt(reason: string) {\n    log('Interrupting connection for reason: ' + reason);\n    this.interruptReasons_[reason] = true;\n    if (this.realtime_) {\n      this.realtime_.close();\n    } else {\n      if (this.establishConnectionTimer_) {\n        clearTimeout(this.establishConnectionTimer_);\n        this.establishConnectionTimer_ = null;\n      }\n      if (this.connected_) {\n        this.onRealtimeDisconnect_();\n      }\n    }\n  }\n\n  resume(reason: string) {\n    log('Resuming connection for reason: ' + reason);\n    delete this.interruptReasons_[reason];\n    if (isEmpty(this.interruptReasons_)) {\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n  }\n\n  private handleTimestamp_(timestamp: number) {\n    const delta = timestamp - new Date().getTime();\n    this.onServerInfoUpdate_({ serverTimeOffset: delta });\n  }\n\n  private cancelSentTransactions_() {\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      const put = this.outstandingPuts_[i];\n      if (put && /*hash*/ 'h' in put.request && put.queued) {\n        if (put.onComplete) {\n          put.onComplete('disconnect');\n        }\n\n        delete this.outstandingPuts_[i];\n        this.outstandingPutCount_--;\n      }\n    }\n\n    // Clean up array occasionally.\n    if (this.outstandingPutCount_ === 0) {\n      this.outstandingPuts_ = [];\n    }\n  }\n\n  private onListenRevoked_(pathString: string, query?: unknown[]) {\n    // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\n    let queryId;\n    if (!query) {\n      queryId = 'default';\n    } else {\n      queryId = query.map(q => ObjectToUniqueKey(q)).join('$');\n    }\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && listen.onComplete) {\n      listen.onComplete('permission_denied');\n    }\n  }\n\n  private removeListen_(pathString: string, queryId: string): ListenSpec {\n    const normalizedPathString = new Path(pathString).toString(); // normalize path.\n    let listen;\n    if (this.listens.has(normalizedPathString)) {\n      const map = this.listens.get(normalizedPathString)!;\n      listen = map.get(queryId);\n      map.delete(queryId);\n      if (map.size === 0) {\n        this.listens.delete(normalizedPathString);\n      }\n    } else {\n      // all listens for this path has already been removed\n      listen = undefined;\n    }\n    return listen;\n  }\n\n  private onAuthRevoked_(statusCode: string, explanation: string) {\n    log('Auth token revoked: ' + statusCode + '/' + explanation);\n    this.authToken_ = null;\n    this.forceTokenRefresh_ = true;\n    this.realtime_.close();\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAuthTokenCount_++;\n      if (this.invalidAuthTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n        // Set a long reconnect delay because recovery is unlikely\n        this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n\n        // Notify the auth token provider that the token is invalid, which will log\n        // a warning\n        this.authTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  }\n\n  private onAppCheckRevoked_(statusCode: string, explanation: string) {\n    log('App check token revoked: ' + statusCode + '/' + explanation);\n    this.appCheckToken_ = null;\n    this.forceTokenRefresh_ = true;\n    // Note: We don't close the connection as the developer may not have\n    // enforcement enabled. The backend closes connections with enforcements.\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAppCheckTokenCount_++;\n      if (this.invalidAppCheckTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n        this.appCheckTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  }\n\n  private onSecurityDebugPacket_(body: { [k: string]: unknown }) {\n    if (this.securityDebugCallback_) {\n      this.securityDebugCallback_(body);\n    } else {\n      if ('msg' in body) {\n        console.log(\n          'FIREBASE: ' + (body['msg'] as string).replace('\\n', '\\nFIREBASE: ')\n        );\n      }\n    }\n  }\n\n  private restoreState_() {\n    //Re-authenticate ourselves if we have a credential stored.\n    this.tryAuth();\n    this.tryAppCheck();\n\n    // Puts depend on having received the corresponding data update from the server before they complete, so we must\n    // make sure to send listens before puts.\n    for (const queries of this.listens.values()) {\n      for (const listenSpec of queries.values()) {\n        this.sendListen_(listenSpec);\n      }\n    }\n\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      if (this.outstandingPuts_[i]) {\n        this.sendPut_(i);\n      }\n    }\n\n    while (this.onDisconnectRequestQueue_.length) {\n      const request = this.onDisconnectRequestQueue_.shift();\n      this.sendOnDisconnect_(\n        request.action,\n        request.pathString,\n        request.data,\n        request.onComplete\n      );\n    }\n\n    for (let i = 0; i < this.outstandingGets_.length; i++) {\n      if (this.outstandingGets_[i]) {\n        this.sendGet_(i);\n      }\n    }\n  }\n\n  /**\n   * Sends client stats for first connection\n   */\n  private sendConnectStats_() {\n    const stats: { [k: string]: number } = {};\n\n    let clientName = 'js';\n    if (isNodeSdk()) {\n      if (this.repoInfo_.nodeAdmin) {\n        clientName = 'admin_node';\n      } else {\n        clientName = 'node';\n      }\n    }\n\n    stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\\./g, '-')] = 1;\n\n    if (isMobileCordova()) {\n      stats['framework.cordova'] = 1;\n    } else if (isReactNative()) {\n      stats['framework.reactnative'] = 1;\n    }\n    this.reportStats(stats);\n  }\n\n  private shouldReconnect_(): boolean {\n    const online = OnlineMonitor.getInstance().currentlyOnline();\n    return isEmpty(this.interruptReasons_) && online;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError } from '@firebase/util';\n\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { ChildrenNode } from '../ChildrenNode';\nimport { Node, NamedNode } from '../Node';\n\nimport { Index } from './Index';\n\nlet __EMPTY_NODE: ChildrenNode;\n\nexport class KeyIndex extends Index {\n  static get __EMPTY_NODE() {\n    return __EMPTY_NODE;\n  }\n\n  static set __EMPTY_NODE(val) {\n    __EMPTY_NODE = val;\n  }\n  compare(a: NamedNode, b: NamedNode): number {\n    return nameCompare(a.name, b.name);\n  }\n  isDefinedOn(node: Node): boolean {\n    // We could probably return true here (since every node has a key), but it's never called\n    // so just leaving unimplemented for now.\n    throw assertionError('KeyIndex.isDefinedOn not expected to be called.');\n  }\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return false; // The key for a node never changes.\n  }\n  minPost() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n  maxPost(): NamedNode {\n    // TODO: This should really be created once and cached in a static property, but\n    // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\n    return new NamedNode(MAX_NAME, __EMPTY_NODE);\n  }\n\n  makePost(indexValue: string, name: string): NamedNode {\n    assert(\n      typeof indexValue === 'string',\n      'KeyIndex indexValue must always be a string.'\n    );\n    // We just use empty node, but it'll never be compared, since our comparator only looks at name.\n    return new NamedNode(indexValue, __EMPTY_NODE);\n  }\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.key';\n  }\n}\n\nexport const KEY_INDEX = new KeyIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\n\nimport { Index } from './indexes/Index';\n\n/**\n * Node is an interface defining the common functionality for nodes in\n * a DataSnapshot.\n *\n * @interface\n */\nexport interface Node {\n  /**\n   * Whether this node is a leaf node.\n   * @returns Whether this is a leaf node.\n   */\n  isLeafNode(): boolean;\n\n  /**\n   * Gets the priority of the node.\n   * @returns The priority of the node.\n   */\n  getPriority(): Node;\n\n  /**\n   * Returns a duplicate node with the new priority.\n   * @param newPriorityNode - New priority to set for the node.\n   * @returns Node with new priority.\n   */\n  updatePriority(newPriorityNode: Node): Node;\n\n  /**\n   * Returns the specified immediate child, or null if it doesn't exist.\n   * @param childName - The name of the child to retrieve.\n   * @returns The retrieved child, or an empty node.\n   */\n  getImmediateChild(childName: string): Node;\n\n  /**\n   * Returns a child by path, or null if it doesn't exist.\n   * @param path - The path of the child to retrieve.\n   * @returns The retrieved child or an empty node.\n   */\n  getChild(path: Path): Node;\n\n  /**\n   * Returns the name of the child immediately prior to the specified childNode, or null.\n   * @param childName - The name of the child to find the predecessor of.\n   * @param childNode - The node to find the predecessor of.\n   * @param index - The index to use to determine the predecessor\n   * @returns The name of the predecessor child, or null if childNode is the first child.\n   */\n  getPredecessorChildName(\n    childName: string,\n    childNode: Node,\n    index: Index\n  ): string | null;\n\n  /**\n   * Returns a duplicate node, with the specified immediate child updated.\n   * Any value in the node will be removed.\n   * @param childName - The name of the child to update.\n   * @param newChildNode - The new child node\n   * @returns The updated node.\n   */\n  updateImmediateChild(childName: string, newChildNode: Node): Node;\n\n  /**\n   * Returns a duplicate node, with the specified child updated.  Any value will\n   * be removed.\n   * @param path - The path of the child to update.\n   * @param newChildNode - The new child node, which may be an empty node\n   * @returns The updated node.\n   */\n  updateChild(path: Path, newChildNode: Node): Node;\n\n  /**\n   * True if the immediate child specified exists\n   */\n  hasChild(childName: string): boolean;\n\n  /**\n   * @returns True if this node has no value or children.\n   */\n  isEmpty(): boolean;\n\n  /**\n   * @returns The number of children of this node.\n   */\n  numChildren(): number;\n\n  /**\n   * Calls action for each child.\n   * @param action - Action to be called for\n   * each child.  It's passed the child name and the child node.\n   * @returns The first truthy value return by action, or the last falsey one\n   */\n  forEachChild(index: Index, action: (a: string, b: Node) => void): unknown;\n\n  /**\n   * @param exportFormat - True for export format (also wire protocol format).\n   * @returns Value of this node as JSON.\n   */\n  val(exportFormat?: boolean): unknown;\n\n  /**\n   * @returns hash representing the node contents.\n   */\n  hash(): string;\n\n  /**\n   * @param other - Another node\n   * @returns -1 for less than, 0 for equal, 1 for greater than other\n   */\n  compareTo(other: Node): number;\n\n  /**\n   * @returns Whether or not this snapshot equals other\n   */\n  equals(other: Node): boolean;\n\n  /**\n   * @returns This node, with the specified index now available\n   */\n  withIndex(indexDefinition: Index): Node;\n\n  isIndexed(indexDefinition: Index): boolean;\n}\n\nexport class NamedNode {\n  constructor(public name: string, public node: Node) {}\n\n  static Wrap(name: string, node: Node) {\n    return new NamedNode(name, node);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Comparator } from '../../util/SortedMap';\nimport { MIN_NAME } from '../../util/util';\nimport { Node, NamedNode } from '../Node';\n\nexport abstract class Index {\n  abstract compare(a: NamedNode, b: NamedNode): number;\n\n  abstract isDefinedOn(node: Node): boolean;\n\n  /**\n   * @returns A standalone comparison function for\n   * this index\n   */\n  getCompare(): Comparator<NamedNode> {\n    return this.compare.bind(this);\n  }\n\n  /**\n   * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\n   * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\n   *\n   *\n   * @returns True if the portion of the snapshot being indexed changed between oldNode and newNode\n   */\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    const oldWrapped = new NamedNode(MIN_NAME, oldNode);\n    const newWrapped = new NamedNode(MIN_NAME, newNode);\n    return this.compare(oldWrapped, newWrapped) !== 0;\n  }\n\n  /**\n   * @returns a node wrapper that will sort equal to or less than\n   * any other node wrapper, using this index\n   */\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n\n  /**\n   * @returns a node wrapper that will sort greater than or equal to\n   * any other node wrapper, using this index\n   */\n  abstract maxPost(): NamedNode;\n\n  abstract makePost(indexValue: unknown, name: string): NamedNode;\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  abstract toString(): string;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Implementation of an immutable SortedMap using a Left-leaning\n * Red-Black Tree, adapted from the implementation in Mugs\n * (http://mads379.github.com/mugs/) by Mads Hartmann Jensen\n * (mads379\\@gmail.com).\n *\n * Original paper on Left-leaning Red-Black Trees:\n *   http://www.cs.princeton.edu/~rs/talks/LLRB/LLRB.pdf\n *\n * Invariant 1: No red node has a red child\n * Invariant 2: Every leaf path has the same number of black nodes\n * Invariant 3: Only the left child can be red (left leaning)\n */\n\n// TODO: There are some improvements I'd like to make to improve memory / perf:\n//  * Create two prototypes, LLRedNode and LLBlackNode, instead of storing a\n//    color property in every node.\n// TODO: It would also be good (and possibly necessary) to create a base\n// interface for LLRBNode and LLRBEmptyNode.\n\nexport type Comparator<K> = (key1: K, key2: K) => number;\n\n/**\n * An iterator over an LLRBNode.\n */\nexport class SortedMapIterator<K, V, T> {\n  private nodeStack_: Array<LLRBNode<K, V> | LLRBEmptyNode<K, V>> = [];\n\n  /**\n   * @param node - Node to iterate.\n   * @param isReverse_ - Whether or not to iterate in reverse\n   */\n  constructor(\n    node: LLRBNode<K, V> | LLRBEmptyNode<K, V>,\n    startKey: K | null,\n    comparator: Comparator<K>,\n    private isReverse_: boolean,\n    private resultGenerator_: ((k: K, v: V) => T) | null = null\n  ) {\n    let cmp = 1;\n    while (!node.isEmpty()) {\n      node = node as LLRBNode<K, V>;\n      cmp = startKey ? comparator(node.key, startKey) : 1;\n      // flip the comparison if we're going in reverse\n      if (isReverse_) {\n        cmp *= -1;\n      }\n\n      if (cmp < 0) {\n        // This node is less than our start key. ignore it\n        if (this.isReverse_) {\n          node = node.left;\n        } else {\n          node = node.right;\n        }\n      } else if (cmp === 0) {\n        // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\n        this.nodeStack_.push(node);\n        break;\n      } else {\n        // This node is greater than our start key, add it to the stack and move to the next one\n        this.nodeStack_.push(node);\n        if (this.isReverse_) {\n          node = node.right;\n        } else {\n          node = node.left;\n        }\n      }\n    }\n  }\n\n  getNext(): T {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n\n    let node = this.nodeStack_.pop();\n    let result: T;\n    if (this.resultGenerator_) {\n      result = this.resultGenerator_(node.key, node.value);\n    } else {\n      result = { key: node.key, value: node.value } as unknown as T;\n    }\n\n    if (this.isReverse_) {\n      node = node.left;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.right;\n      }\n    } else {\n      node = node.right;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.left;\n      }\n    }\n\n    return result;\n  }\n\n  hasNext(): boolean {\n    return this.nodeStack_.length > 0;\n  }\n\n  peek(): T {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n\n    const node = this.nodeStack_[this.nodeStack_.length - 1];\n    if (this.resultGenerator_) {\n      return this.resultGenerator_(node.key, node.value);\n    } else {\n      return { key: node.key, value: node.value } as unknown as T;\n    }\n  }\n}\n\n/**\n * Represents a node in a Left-leaning Red-Black tree.\n */\nexport class LLRBNode<K, V> {\n  color: boolean;\n  left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n\n  /**\n   * @param key - Key associated with this node.\n   * @param value - Value associated with this node.\n   * @param color - Whether this node is red.\n   * @param left - Left child.\n   * @param right - Right child.\n   */\n  constructor(\n    public key: K,\n    public value: V,\n    color: boolean | null,\n    left?: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right?: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ) {\n    this.color = color != null ? color : LLRBNode.RED;\n    this.left =\n      left != null ? left : (SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>);\n    this.right =\n      right != null ? right : (SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>);\n  }\n\n  static RED = true;\n  static BLACK = false;\n\n  /**\n   * Returns a copy of the current node, optionally replacing pieces of it.\n   *\n   * @param key - New key for the node, or null.\n   * @param value - New value for the node, or null.\n   * @param color - New color for the node, or null.\n   * @param left - New left child for the node, or null.\n   * @param right - New right child for the node, or null.\n   * @returns The node copy.\n   */\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBNode<K, V> {\n    return new LLRBNode(\n      key != null ? key : this.key,\n      value != null ? value : this.value,\n      color != null ? color : this.color,\n      left != null ? left : this.left,\n      right != null ? right : this.right\n    );\n  }\n\n  /**\n   * @returns The total number of nodes in the tree.\n   */\n  count(): number {\n    return this.left.count() + 1 + this.right.count();\n  }\n\n  /**\n   * @returns True if the tree is empty.\n   */\n  isEmpty(): boolean {\n    return false;\n  }\n\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   *   node.  If it returns true, traversal is aborted.\n   * @returns The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return (\n      this.left.inorderTraversal(action) ||\n      !!action(this.key, this.value) ||\n      this.right.inorderTraversal(action)\n    );\n  }\n\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return (\n      this.right.reverseTraversal(action) ||\n      action(this.key, this.value) ||\n      this.left.reverseTraversal(action)\n    );\n  }\n\n  /**\n   * @returns The minimum node in the tree.\n   */\n  private min_(): LLRBNode<K, V> {\n    if (this.left.isEmpty()) {\n      return this;\n    } else {\n      return (this.left as LLRBNode<K, V>).min_();\n    }\n  }\n\n  /**\n   * @returns The maximum key in the tree.\n   */\n  minKey(): K {\n    return this.min_().key;\n  }\n\n  /**\n   * @returns The maximum key in the tree.\n   */\n  maxKey(): K {\n    if (this.right.isEmpty()) {\n      return this.key;\n    } else {\n      return this.right.maxKey();\n    }\n  }\n\n  /**\n   * @param key - Key to insert.\n   * @param value - Value to insert.\n   * @param comparator - Comparator.\n   * @returns New tree, with the key/value added.\n   */\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    let n: LLRBNode<K, V> = this;\n    const cmp = comparator(key, n.key);\n    if (cmp < 0) {\n      n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\n    } else if (cmp === 0) {\n      n = n.copy(null, value, null, null, null);\n    } else {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        n.right.insert(key, value, comparator)\n      );\n    }\n    return n.fixUp_();\n  }\n\n  /**\n   * @returns New tree, with the minimum key removed.\n   */\n  private removeMin_(): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    if (this.left.isEmpty()) {\n      return SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>;\n    }\n    let n: LLRBNode<K, V> = this;\n    if (!n.left.isRed_() && !n.left.left.isRed_()) {\n      n = n.moveRedLeft_();\n    }\n    n = n.copy(null, null, null, (n.left as LLRBNode<K, V>).removeMin_(), null);\n    return n.fixUp_();\n  }\n\n  /**\n   * @param key - The key of the item to remove.\n   * @param comparator - Comparator.\n   * @returns New tree, with the specified item removed.\n   */\n  remove(\n    key: K,\n    comparator: Comparator<K>\n  ): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    let n, smallest;\n    n = this;\n    if (comparator(key, n.key) < 0) {\n      if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\n        n = n.moveRedLeft_();\n      }\n      n = n.copy(null, null, null, n.left.remove(key, comparator), null);\n    } else {\n      if (n.left.isRed_()) {\n        n = n.rotateRight_();\n      }\n      if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\n        n = n.moveRedRight_();\n      }\n      if (comparator(key, n.key) === 0) {\n        if (n.right.isEmpty()) {\n          return SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>;\n        } else {\n          smallest = (n.right as LLRBNode<K, V>).min_();\n          n = n.copy(\n            smallest.key,\n            smallest.value,\n            null,\n            null,\n            (n.right as LLRBNode<K, V>).removeMin_()\n          );\n        }\n      }\n      n = n.copy(null, null, null, null, n.right.remove(key, comparator));\n    }\n    return n.fixUp_();\n  }\n\n  /**\n   * @returns Whether this is a RED node.\n   */\n  isRed_(): boolean {\n    return this.color;\n  }\n\n  /**\n   * @returns New tree after performing any needed rotations.\n   */\n  private fixUp_(): LLRBNode<K, V> {\n    let n: LLRBNode<K, V> = this;\n    if (n.right.isRed_() && !n.left.isRed_()) {\n      n = n.rotateLeft_();\n    }\n    if (n.left.isRed_() && n.left.left.isRed_()) {\n      n = n.rotateRight_();\n    }\n    if (n.left.isRed_() && n.right.isRed_()) {\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @returns New tree, after moveRedLeft.\n   */\n  private moveRedLeft_(): LLRBNode<K, V> {\n    let n = this.colorFlip_();\n    if (n.right.left.isRed_()) {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        (n.right as LLRBNode<K, V>).rotateRight_()\n      );\n      n = n.rotateLeft_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @returns New tree, after moveRedRight.\n   */\n  private moveRedRight_(): LLRBNode<K, V> {\n    let n = this.colorFlip_();\n    if (n.left.left.isRed_()) {\n      n = n.rotateRight_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @returns New tree, after rotateLeft.\n   */\n  private rotateLeft_(): LLRBNode<K, V> {\n    const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n    return this.right.copy(null, null, this.color, nl, null) as LLRBNode<K, V>;\n  }\n\n  /**\n   * @returns New tree, after rotateRight.\n   */\n  private rotateRight_(): LLRBNode<K, V> {\n    const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n    return this.left.copy(null, null, this.color, null, nr) as LLRBNode<K, V>;\n  }\n\n  /**\n   * @returns Newt ree, after colorFlip.\n   */\n  private colorFlip_(): LLRBNode<K, V> {\n    const left = this.left.copy(null, null, !this.left.color, null, null);\n    const right = this.right.copy(null, null, !this.right.color, null, null);\n    return this.copy(null, null, !this.color, left, right);\n  }\n\n  /**\n   * For testing.\n   *\n   * @returns True if all is well.\n   */\n  private checkMaxDepth_(): boolean {\n    const blackDepth = this.check_();\n    return Math.pow(2.0, blackDepth) <= this.count() + 1;\n  }\n\n  check_(): number {\n    if (this.isRed_() && this.left.isRed_()) {\n      throw new Error(\n        'Red node has red child(' + this.key + ',' + this.value + ')'\n      );\n    }\n    if (this.right.isRed_()) {\n      throw new Error(\n        'Right child of (' + this.key + ',' + this.value + ') is red'\n      );\n    }\n    const blackDepth = this.left.check_();\n    if (blackDepth !== this.right.check_()) {\n      throw new Error('Black depths differ');\n    } else {\n      return blackDepth + (this.isRed_() ? 0 : 1);\n    }\n  }\n}\n\n/**\n * Represents an empty node (a leaf node in the Red-Black Tree).\n */\nexport class LLRBEmptyNode<K, V> {\n  key: K;\n  value: V;\n  left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  color: boolean;\n\n  /**\n   * Returns a copy of the current node.\n   *\n   * @returns The node copy.\n   */\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  /**\n   * Returns a copy of the tree, with the specified key/value added.\n   *\n   * @param key - Key to be added.\n   * @param value - Value to be added.\n   * @param comparator - Comparator.\n   * @returns New tree, with item added.\n   */\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    return new LLRBNode(key, value, null);\n  }\n\n  /**\n   * Returns a copy of the tree, with the specified key removed.\n   *\n   * @param key - The key to remove.\n   * @param comparator - Comparator.\n   * @returns New tree, with item removed.\n   */\n  remove(key: K, comparator: Comparator<K>): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  /**\n   * @returns The total number of nodes in the tree.\n   */\n  count(): number {\n    return 0;\n  }\n\n  /**\n   * @returns True if the tree is empty.\n   */\n  isEmpty(): boolean {\n    return true;\n  }\n\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return false;\n  }\n\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return false;\n  }\n\n  minKey(): null {\n    return null;\n  }\n\n  maxKey(): null {\n    return null;\n  }\n\n  check_(): number {\n    return 0;\n  }\n\n  /**\n   * @returns Whether this node is red.\n   */\n  isRed_() {\n    return false;\n  }\n}\n\n/**\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\n * tree.\n */\nexport class SortedMap<K, V> {\n  /**\n   * Always use the same empty node, to reduce memory.\n   */\n  static EMPTY_NODE = new LLRBEmptyNode();\n\n  /**\n   * @param comparator_ - Key comparator.\n   * @param root_ - Optional root node for the map.\n   */\n  constructor(\n    private comparator_: Comparator<K>,\n    private root_:\n      | LLRBNode<K, V>\n      | LLRBEmptyNode<K, V> = SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>\n  ) {}\n\n  /**\n   * Returns a copy of the map, with the specified key/value added or replaced.\n   * (TODO: We should perhaps rename this method to 'put')\n   *\n   * @param key - Key to be added.\n   * @param value - Value to be added.\n   * @returns New map, with item added.\n   */\n  insert(key: K, value: V): SortedMap<K, V> {\n    return new SortedMap(\n      this.comparator_,\n      this.root_\n        .insert(key, value, this.comparator_)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  /**\n   * Returns a copy of the map, with the specified key removed.\n   *\n   * @param key - The key to remove.\n   * @returns New map, with item removed.\n   */\n  remove(key: K): SortedMap<K, V> {\n    return new SortedMap(\n      this.comparator_,\n      this.root_\n        .remove(key, this.comparator_)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  /**\n   * Returns the value of the node with the given key, or null.\n   *\n   * @param key - The key to look up.\n   * @returns The value of the node with the given key, or null if the\n   * key doesn't exist.\n   */\n  get(key: K): V | null {\n    let cmp;\n    let node = this.root_;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        return node.value;\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        node = node.right;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Returns the key of the item *before* the specified key, or null if key is the first item.\n   * @param key - The key to find the predecessor of\n   * @returns The predecessor key.\n   */\n  getPredecessorKey(key: K): K | null {\n    let cmp,\n      node = this.root_,\n      rightParent = null;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        if (!node.left.isEmpty()) {\n          node = node.left;\n          while (!node.right.isEmpty()) {\n            node = node.right;\n          }\n          return node.key;\n        } else if (rightParent) {\n          return rightParent.key;\n        } else {\n          return null; // first item.\n        }\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        rightParent = node;\n        node = node.right;\n      }\n    }\n\n    throw new Error(\n      'Attempted to find predecessor key for a nonexistent key.  What gives?'\n    );\n  }\n\n  /**\n   * @returns True if the map is empty.\n   */\n  isEmpty(): boolean {\n    return this.root_.isEmpty();\n  }\n\n  /**\n   * @returns The total number of nodes in the map.\n   */\n  count(): number {\n    return this.root_.count();\n  }\n\n  /**\n   * @returns The minimum key in the map.\n   */\n  minKey(): K | null {\n    return this.root_.minKey();\n  }\n\n  /**\n   * @returns The maximum key in the map.\n   */\n  maxKey(): K | null {\n    return this.root_.maxKey();\n  }\n\n  /**\n   * Traverses the map in key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param action - Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @returns The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return this.root_.inorderTraversal(action);\n  }\n\n  /**\n   * Traverses the map in reverse key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param action - Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @returns True if the traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return this.root_.reverseTraversal(action);\n  }\n\n  /**\n   * Returns an iterator over the SortedMap.\n   * @returns The iterator.\n   */\n  getIterator<T>(\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      null,\n      this.comparator_,\n      false,\n      resultGenerator\n    );\n  }\n\n  getIteratorFrom<T>(\n    key: K,\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      key,\n      this.comparator_,\n      false,\n      resultGenerator\n    );\n  }\n\n  getReverseIteratorFrom<T>(\n    key: K,\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      key,\n      this.comparator_,\n      true,\n      resultGenerator\n    );\n  }\n\n  getReverseIterator<T>(\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      null,\n      this.comparator_,\n      true,\n      resultGenerator\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains } from '@firebase/util';\n\nimport { Indexable } from '../util/misc';\nimport { doubleToIEEE754String } from '../util/util';\n\nimport { Node } from './Node';\n\nlet MAX_NODE: Node;\n\nexport function setMaxNode(val: Node) {\n  MAX_NODE = val;\n}\n\nexport const priorityHashText = function (priority: string | number): string {\n  if (typeof priority === 'number') {\n    return 'number:' + doubleToIEEE754String(priority);\n  } else {\n    return 'string:' + priority;\n  }\n};\n\n/**\n * Validates that a priority snapshot Node is valid.\n */\nexport const validatePriorityNode = function (priorityNode: Node) {\n  if (priorityNode.isLeafNode()) {\n    const val = priorityNode.val();\n    assert(\n      typeof val === 'string' ||\n        typeof val === 'number' ||\n        (typeof val === 'object' && contains(val as Indexable, '.sv')),\n      'Priority must be a string or number.'\n    );\n  } else {\n    assert(\n      priorityNode === MAX_NODE || priorityNode.isEmpty(),\n      'priority of unexpected type.'\n    );\n  }\n  // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\n  assert(\n    priorityNode === MAX_NODE || priorityNode.getPriority().isEmpty(),\n    \"Priority nodes can't have a priority of their own.\"\n  );\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare } from '../util/util';\n\nimport { NamedNode } from './Node';\n\nexport function NAME_ONLY_COMPARATOR(left: NamedNode, right: NamedNode) {\n  return nameCompare(left.name, right.name);\n}\n\nexport function NAME_COMPARATOR(left: string, right: string) {\n  return nameCompare(left, right);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Indexable } from '../util/misc';\nimport {\n  Path,\n  pathGetFront,\n  pathGetLength,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\nimport { doubleToIEEE754String, sha1 } from '../util/util';\n\nimport { ChildrenNodeConstructor } from './ChildrenNode';\nimport { Index } from './indexes/Index';\nimport { Node } from './Node';\nimport { priorityHashText, validatePriorityNode } from './snap';\n\nlet __childrenNodeConstructor: ChildrenNodeConstructor;\n\n/**\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\n * implements Node and stores the value of the node (a string,\n * number, or boolean) accessible via getValue().\n */\nexport class LeafNode implements Node {\n  static set __childrenNodeConstructor(val: ChildrenNodeConstructor) {\n    __childrenNodeConstructor = val;\n  }\n\n  static get __childrenNodeConstructor() {\n    return __childrenNodeConstructor;\n  }\n\n  /**\n   * The sort order for comparing leaf nodes of different types. If two leaf nodes have\n   * the same type, the comparison falls back to their value\n   */\n  static VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n\n  private lazyHash_: string | null = null;\n\n  /**\n   * @param value_ - The value to store in this leaf node. The object type is\n   * possible in the event of a deferred value\n   * @param priorityNode_ - The priority of this node.\n   */\n  constructor(\n    private readonly value_: string | number | boolean | Indexable,\n    private priorityNode_: Node = LeafNode.__childrenNodeConstructor.EMPTY_NODE\n  ) {\n    assert(\n      this.value_ !== undefined && this.value_ !== null,\n      \"LeafNode shouldn't be created with null/undefined value.\"\n    );\n\n    validatePriorityNode(this.priorityNode_);\n  }\n\n  /** @inheritDoc */\n  isLeafNode(): boolean {\n    return true;\n  }\n\n  /** @inheritDoc */\n  getPriority(): Node {\n    return this.priorityNode_;\n  }\n\n  /** @inheritDoc */\n  updatePriority(newPriorityNode: Node): Node {\n    return new LeafNode(this.value_, newPriorityNode);\n  }\n\n  /** @inheritDoc */\n  getImmediateChild(childName: string): Node {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n\n  /** @inheritDoc */\n  getChild(path: Path): Node {\n    if (pathIsEmpty(path)) {\n      return this;\n    } else if (pathGetFront(path) === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n  hasChild(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  getPredecessorChildName(childName: string, childNode: Node): null {\n    return null;\n  }\n\n  /** @inheritDoc */\n  updateImmediateChild(childName: string, newChildNode: Node): Node {\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else if (newChildNode.isEmpty() && childName !== '.priority') {\n      return this;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(\n        childName,\n        newChildNode\n      ).updatePriority(this.priorityNode_);\n    }\n  }\n\n  /** @inheritDoc */\n  updateChild(path: Path, newChildNode: Node): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return newChildNode;\n    } else if (newChildNode.isEmpty() && front !== '.priority') {\n      return this;\n    } else {\n      assert(\n        front !== '.priority' || pathGetLength(path) === 1,\n        '.priority must be the last token in a path'\n      );\n\n      return this.updateImmediateChild(\n        front,\n        LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(\n          pathPopFront(path),\n          newChildNode\n        )\n      );\n    }\n  }\n\n  /** @inheritDoc */\n  isEmpty(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  numChildren(): number {\n    return 0;\n  }\n\n  /** @inheritDoc */\n  forEachChild(index: Index, action: (s: string, n: Node) => void): boolean {\n    return false;\n  }\n  val(exportFormat?: boolean): {} {\n    if (exportFormat && !this.getPriority().isEmpty()) {\n      return {\n        '.value': this.getValue(),\n        '.priority': this.getPriority().val()\n      };\n    } else {\n      return this.getValue();\n    }\n  }\n\n  /** @inheritDoc */\n  hash(): string {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.priorityNode_.isEmpty()) {\n        toHash +=\n          'priority:' +\n          priorityHashText(this.priorityNode_.val() as number | string) +\n          ':';\n      }\n\n      const type = typeof this.value_;\n      toHash += type + ':';\n      if (type === 'number') {\n        toHash += doubleToIEEE754String(this.value_ as number);\n      } else {\n        toHash += this.value_;\n      }\n      this.lazyHash_ = sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n\n  /**\n   * Returns the value of the leaf node.\n   * @returns The value of the node.\n   */\n  getValue(): Indexable | string | number | boolean {\n    return this.value_;\n  }\n  compareTo(other: Node): number {\n    if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\n      return 1;\n    } else if (other instanceof LeafNode.__childrenNodeConstructor) {\n      return -1;\n    } else {\n      assert(other.isLeafNode(), 'Unknown node type');\n      return this.compareToLeafNode_(other as LeafNode);\n    }\n  }\n\n  /**\n   * Comparison specifically for two leaf nodes\n   */\n  private compareToLeafNode_(otherLeaf: LeafNode): number {\n    const otherLeafType = typeof otherLeaf.value_;\n    const thisLeafType = typeof this.value_;\n    const otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\n    const thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\n    assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\n    assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\n    if (otherIndex === thisIndex) {\n      // Same type, compare values\n      if (thisLeafType === 'object') {\n        // Deferred value nodes are all equal, but we should also never get to this point...\n        return 0;\n      } else {\n        // Note that this works because true > false, all others are number or string comparisons\n        if (this.value_ < otherLeaf.value_) {\n          return -1;\n        } else if (this.value_ === otherLeaf.value_) {\n          return 0;\n        } else {\n          return 1;\n        }\n      }\n    } else {\n      return thisIndex - otherIndex;\n    }\n  }\n  withIndex(): Node {\n    return this;\n  }\n  isIndexed(): boolean {\n    return true;\n  }\n  equals(other: Node): boolean {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      const otherLeaf = other as LeafNode;\n      return (\n        this.value_ === otherLeaf.value_ &&\n        this.priorityNode_.equals(otherLeaf.priorityNode_)\n      );\n    } else {\n      return false;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { LeafNode } from '../LeafNode';\nimport { NamedNode, Node } from '../Node';\n\nimport { Index } from './Index';\n\nlet nodeFromJSON: (a: unknown) => Node;\nlet MAX_NODE: Node;\n\nexport function setNodeFromJSON(val: (a: unknown) => Node) {\n  nodeFromJSON = val;\n}\n\nexport function setMaxNode(val: Node) {\n  MAX_NODE = val;\n}\n\nexport class PriorityIndex extends Index {\n  compare(a: NamedNode, b: NamedNode): number {\n    const aPriority = a.node.getPriority();\n    const bPriority = b.node.getPriority();\n    const indexCmp = aPriority.compareTo(bPriority);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  isDefinedOn(node: Node): boolean {\n    return !node.getPriority().isEmpty();\n  }\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return !oldNode.getPriority().equals(newNode.getPriority());\n  }\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n  maxPost(): NamedNode {\n    return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE));\n  }\n\n  makePost(indexValue: unknown, name: string): NamedNode {\n    const priorityNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\n  }\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.priority';\n  }\n}\n\nexport const PRIORITY_INDEX = new PriorityIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains, map, safeGet } from '@firebase/util';\n\nimport { SortedMap } from '../util/SortedMap';\n\nimport { buildChildSet } from './childSet';\nimport { Index } from './indexes/Index';\nimport { KEY_INDEX } from './indexes/KeyIndex';\nimport { PRIORITY_INDEX } from './indexes/PriorityIndex';\nimport { NamedNode, Node } from './Node';\n\nlet _defaultIndexMap: IndexMap;\n\nconst fallbackObject = {};\n\nexport class IndexMap {\n  /**\n   * The default IndexMap for nodes without a priority\n   */\n  static get Default(): IndexMap {\n    assert(\n      fallbackObject && PRIORITY_INDEX,\n      'ChildrenNode.ts has not been loaded'\n    );\n    _defaultIndexMap =\n      _defaultIndexMap ||\n      new IndexMap(\n        { '.priority': fallbackObject },\n        { '.priority': PRIORITY_INDEX }\n      );\n    return _defaultIndexMap;\n  }\n\n  constructor(\n    private indexes_: {\n      [k: string]: SortedMap<NamedNode, Node> | /*FallbackType*/ object;\n    },\n    private indexSet_: { [k: string]: Index }\n  ) {}\n\n  get(indexKey: string): SortedMap<NamedNode, Node> | null {\n    const sortedMap = safeGet(this.indexes_, indexKey);\n    if (!sortedMap) {\n      throw new Error('No index defined for ' + indexKey);\n    }\n\n    if (sortedMap instanceof SortedMap) {\n      return sortedMap;\n    } else {\n      // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\n      // regular child map\n      return null;\n    }\n  }\n\n  hasIndex(indexDefinition: Index): boolean {\n    return contains(this.indexSet_, indexDefinition.toString());\n  }\n\n  addIndex(\n    indexDefinition: Index,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    assert(\n      indexDefinition !== KEY_INDEX,\n      \"KeyIndex always exists and isn't meant to be added to the IndexMap.\"\n    );\n    const childList = [];\n    let sawIndexedValue = false;\n    const iter = existingChildren.getIterator(NamedNode.Wrap);\n    let next = iter.getNext();\n    while (next) {\n      sawIndexedValue =\n        sawIndexedValue || indexDefinition.isDefinedOn(next.node);\n      childList.push(next);\n      next = iter.getNext();\n    }\n    let newIndex;\n    if (sawIndexedValue) {\n      newIndex = buildChildSet(childList, indexDefinition.getCompare());\n    } else {\n      newIndex = fallbackObject;\n    }\n    const indexName = indexDefinition.toString();\n    const newIndexSet = { ...this.indexSet_ };\n    newIndexSet[indexName] = indexDefinition;\n    const newIndexes = { ...this.indexes_ };\n    newIndexes[indexName] = newIndex;\n    return new IndexMap(newIndexes, newIndexSet);\n  }\n\n  /**\n   * Ensure that this node is properly tracked in any indexes that we're maintaining\n   */\n  addToIndexes(\n    namedNode: NamedNode,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    const newIndexes = map(\n      this.indexes_,\n      (indexedChildren: SortedMap<NamedNode, Node>, indexName: string) => {\n        const index = safeGet(this.indexSet_, indexName);\n        assert(index, 'Missing index implementation for ' + indexName);\n        if (indexedChildren === fallbackObject) {\n          // Check to see if we need to index everything\n          if (index.isDefinedOn(namedNode.node)) {\n            // We need to build this index\n            const childList = [];\n            const iter = existingChildren.getIterator(NamedNode.Wrap);\n            let next = iter.getNext();\n            while (next) {\n              if (next.name !== namedNode.name) {\n                childList.push(next);\n              }\n              next = iter.getNext();\n            }\n            childList.push(namedNode);\n            return buildChildSet(childList, index.getCompare());\n          } else {\n            // No change, this remains a fallback\n            return fallbackObject;\n          }\n        } else {\n          const existingSnap = existingChildren.get(namedNode.name);\n          let newChildren = indexedChildren;\n          if (existingSnap) {\n            newChildren = newChildren.remove(\n              new NamedNode(namedNode.name, existingSnap)\n            );\n          }\n          return newChildren.insert(namedNode, namedNode.node);\n        }\n      }\n    );\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n\n  /**\n   * Create a new IndexMap instance with the given value removed\n   */\n  removeFromIndexes(\n    namedNode: NamedNode,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    const newIndexes = map(\n      this.indexes_,\n      (indexedChildren: SortedMap<NamedNode, Node>) => {\n        if (indexedChildren === fallbackObject) {\n          // This is the fallback. Just return it, nothing to do in this case\n          return indexedChildren;\n        } else {\n          const existingSnap = existingChildren.get(namedNode.name);\n          if (existingSnap) {\n            return indexedChildren.remove(\n              new NamedNode(namedNode.name, existingSnap)\n            );\n          } else {\n            // No record of this child\n            return indexedChildren;\n          }\n        }\n      }\n    );\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Path, pathGetFront, pathGetLength, pathPopFront } from '../util/Path';\nimport { SortedMap, SortedMapIterator } from '../util/SortedMap';\nimport { MAX_NAME, MIN_NAME, sha1 } from '../util/util';\n\nimport { NAME_COMPARATOR } from './comparators';\nimport { Index } from './indexes/Index';\nimport { KEY_INDEX, KeyIndex } from './indexes/KeyIndex';\nimport {\n  PRIORITY_INDEX,\n  setMaxNode as setPriorityMaxNode\n} from './indexes/PriorityIndex';\nimport { IndexMap } from './IndexMap';\nimport { LeafNode } from './LeafNode';\nimport { NamedNode, Node } from './Node';\nimport { priorityHashText, setMaxNode, validatePriorityNode } from './snap';\n\nexport interface ChildrenNodeConstructor {\n  new (\n    children_: SortedMap<string, Node>,\n    priorityNode_: Node | null,\n    indexMap_: IndexMap\n  ): ChildrenNode;\n  EMPTY_NODE: ChildrenNode;\n}\n\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\n\nlet EMPTY_NODE: ChildrenNode;\n\n/**\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\n * (i.e. nodes with children).  It implements Node and stores the\n * list of children in the children property, sorted by child name.\n */\nexport class ChildrenNode implements Node {\n  private lazyHash_: string | null = null;\n\n  static get EMPTY_NODE(): ChildrenNode {\n    return (\n      EMPTY_NODE ||\n      (EMPTY_NODE = new ChildrenNode(\n        new SortedMap<string, Node>(NAME_COMPARATOR),\n        null,\n        IndexMap.Default\n      ))\n    );\n  }\n\n  /**\n   * @param children_ - List of children of this node..\n   * @param priorityNode_ - The priority of this node (as a snapshot node).\n   */\n  constructor(\n    private readonly children_: SortedMap<string, Node>,\n    private readonly priorityNode_: Node | null,\n    private indexMap_: IndexMap\n  ) {\n    /**\n     * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\n     * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\n     * class instead of an empty ChildrenNode.\n     */\n    if (this.priorityNode_) {\n      validatePriorityNode(this.priorityNode_);\n    }\n\n    if (this.children_.isEmpty()) {\n      assert(\n        !this.priorityNode_ || this.priorityNode_.isEmpty(),\n        'An empty node cannot have a priority'\n      );\n    }\n  }\n\n  /** @inheritDoc */\n  isLeafNode(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  getPriority(): Node {\n    return this.priorityNode_ || EMPTY_NODE;\n  }\n\n  /** @inheritDoc */\n  updatePriority(newPriorityNode: Node): Node {\n    if (this.children_.isEmpty()) {\n      // Don't allow priorities on empty nodes\n      return this;\n    } else {\n      return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\n    }\n  }\n\n  /** @inheritDoc */\n  getImmediateChild(childName: string): Node {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.getPriority();\n    } else {\n      const child = this.children_.get(childName);\n      return child === null ? EMPTY_NODE : child;\n    }\n  }\n\n  /** @inheritDoc */\n  getChild(path: Path): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return this;\n    }\n\n    return this.getImmediateChild(front).getChild(pathPopFront(path));\n  }\n\n  /** @inheritDoc */\n  hasChild(childName: string): boolean {\n    return this.children_.get(childName) !== null;\n  }\n\n  /** @inheritDoc */\n  updateImmediateChild(childName: string, newChildNode: Node): Node {\n    assert(newChildNode, 'We should always be passing snapshot nodes');\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else {\n      const namedNode = new NamedNode(childName, newChildNode);\n      let newChildren, newIndexMap;\n      if (newChildNode.isEmpty()) {\n        newChildren = this.children_.remove(childName);\n        newIndexMap = this.indexMap_.removeFromIndexes(\n          namedNode,\n          this.children_\n        );\n      } else {\n        newChildren = this.children_.insert(childName, newChildNode);\n        newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\n      }\n\n      const newPriority = newChildren.isEmpty()\n        ? EMPTY_NODE\n        : this.priorityNode_;\n      return new ChildrenNode(newChildren, newPriority, newIndexMap);\n    }\n  }\n\n  /** @inheritDoc */\n  updateChild(path: Path, newChildNode: Node): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return newChildNode;\n    } else {\n      assert(\n        pathGetFront(path) !== '.priority' || pathGetLength(path) === 1,\n        '.priority must be the last token in a path'\n      );\n      const newImmediateChild = this.getImmediateChild(front).updateChild(\n        pathPopFront(path),\n        newChildNode\n      );\n      return this.updateImmediateChild(front, newImmediateChild);\n    }\n  }\n\n  /** @inheritDoc */\n  isEmpty(): boolean {\n    return this.children_.isEmpty();\n  }\n\n  /** @inheritDoc */\n  numChildren(): number {\n    return this.children_.count();\n  }\n\n  private static INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\n\n  /** @inheritDoc */\n  val(exportFormat?: boolean): object {\n    if (this.isEmpty()) {\n      return null;\n    }\n\n    const obj: { [k: string]: unknown } = {};\n    let numKeys = 0,\n      maxKey = 0,\n      allIntegerKeys = true;\n    this.forEachChild(PRIORITY_INDEX, (key: string, childNode: Node) => {\n      obj[key] = childNode.val(exportFormat);\n\n      numKeys++;\n      if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\n        maxKey = Math.max(maxKey, Number(key));\n      } else {\n        allIntegerKeys = false;\n      }\n    });\n\n    if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\n      // convert to array.\n      const array: unknown[] = [];\n      // eslint-disable-next-line guard-for-in\n      for (const key in obj) {\n        array[key as unknown as number] = obj[key];\n      }\n\n      return array;\n    } else {\n      if (exportFormat && !this.getPriority().isEmpty()) {\n        obj['.priority'] = this.getPriority().val();\n      }\n      return obj;\n    }\n  }\n\n  /** @inheritDoc */\n  hash(): string {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.getPriority().isEmpty()) {\n        toHash +=\n          'priority:' +\n          priorityHashText(this.getPriority().val() as string | number) +\n          ':';\n      }\n\n      this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n        const childHash = childNode.hash();\n        if (childHash !== '') {\n          toHash += ':' + key + ':' + childHash;\n        }\n      });\n\n      this.lazyHash_ = toHash === '' ? '' : sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n\n  /** @inheritDoc */\n  getPredecessorChildName(\n    childName: string,\n    childNode: Node,\n    index: Index\n  ): string {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      const predecessor = idx.getPredecessorKey(\n        new NamedNode(childName, childNode)\n      );\n      return predecessor ? predecessor.name : null;\n    } else {\n      return this.children_.getPredecessorKey(childName);\n    }\n  }\n\n  getFirstChildName(indexDefinition: Index): string | null {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const minKey = idx.minKey();\n      return minKey && minKey.name;\n    } else {\n      return this.children_.minKey();\n    }\n  }\n\n  getFirstChild(indexDefinition: Index): NamedNode | null {\n    const minKey = this.getFirstChildName(indexDefinition);\n    if (minKey) {\n      return new NamedNode(minKey, this.children_.get(minKey));\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Given an index, return the key name of the largest value we have, according to that index\n   */\n  getLastChildName(indexDefinition: Index): string | null {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const maxKey = idx.maxKey();\n      return maxKey && maxKey.name;\n    } else {\n      return this.children_.maxKey();\n    }\n  }\n\n  getLastChild(indexDefinition: Index): NamedNode | null {\n    const maxKey = this.getLastChildName(indexDefinition);\n    if (maxKey) {\n      return new NamedNode(maxKey, this.children_.get(maxKey));\n    } else {\n      return null;\n    }\n  }\n  forEachChild(\n    index: Index,\n    action: (key: string, node: Node) => boolean | void\n  ): boolean {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      return idx.inorderTraversal(wrappedNode => {\n        return action(wrappedNode.name, wrappedNode.node);\n      });\n    } else {\n      return this.children_.inorderTraversal(action);\n    }\n  }\n\n  getIterator(\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\n  }\n\n  getIteratorFrom(\n    startPost: NamedNode,\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getIteratorFrom(startPost, key => key);\n    } else {\n      const iterator = this.children_.getIteratorFrom(\n        startPost.name,\n        NamedNode.Wrap\n      );\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, startPost) < 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n\n  getReverseIterator(\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    return this.getReverseIteratorFrom(\n      indexDefinition.maxPost(),\n      indexDefinition\n    );\n  }\n\n  getReverseIteratorFrom(\n    endPost: NamedNode,\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getReverseIteratorFrom(endPost, key => {\n        return key;\n      });\n    } else {\n      const iterator = this.children_.getReverseIteratorFrom(\n        endPost.name,\n        NamedNode.Wrap\n      );\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, endPost) > 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n  compareTo(other: ChildrenNode): number {\n    if (this.isEmpty()) {\n      if (other.isEmpty()) {\n        return 0;\n      } else {\n        return -1;\n      }\n    } else if (other.isLeafNode() || other.isEmpty()) {\n      return 1;\n    } else if (other === MAX_NODE) {\n      return -1;\n    } else {\n      // Must be another node with children.\n      return 0;\n    }\n  }\n  withIndex(indexDefinition: Index): Node {\n    if (\n      indexDefinition === KEY_INDEX ||\n      this.indexMap_.hasIndex(indexDefinition)\n    ) {\n      return this;\n    } else {\n      const newIndexMap = this.indexMap_.addIndex(\n        indexDefinition,\n        this.children_\n      );\n      return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\n    }\n  }\n  isIndexed(index: Index): boolean {\n    return index === KEY_INDEX || this.indexMap_.hasIndex(index);\n  }\n  equals(other: Node): boolean {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      return false;\n    } else {\n      const otherChildrenNode = other as ChildrenNode;\n      if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\n        return false;\n      } else if (\n        this.children_.count() === otherChildrenNode.children_.count()\n      ) {\n        const thisIter = this.getIterator(PRIORITY_INDEX);\n        const otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\n        let thisCurrent = thisIter.getNext();\n        let otherCurrent = otherIter.getNext();\n        while (thisCurrent && otherCurrent) {\n          if (\n            thisCurrent.name !== otherCurrent.name ||\n            !thisCurrent.node.equals(otherCurrent.node)\n          ) {\n            return false;\n          }\n          thisCurrent = thisIter.getNext();\n          otherCurrent = otherIter.getNext();\n        }\n        return thisCurrent === null && otherCurrent === null;\n      } else {\n        return false;\n      }\n    }\n  }\n\n  /**\n   * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\n   * instead.\n   *\n   */\n  private resolveIndex_(\n    indexDefinition: Index\n  ): SortedMap<NamedNode, Node> | null {\n    if (indexDefinition === KEY_INDEX) {\n      return null;\n    } else {\n      return this.indexMap_.get(indexDefinition.toString());\n    }\n  }\n}\n\nexport class MaxNode extends ChildrenNode {\n  constructor() {\n    super(\n      new SortedMap<string, Node>(NAME_COMPARATOR),\n      ChildrenNode.EMPTY_NODE,\n      IndexMap.Default\n    );\n  }\n\n  compareTo(other: Node): number {\n    if (other === this) {\n      return 0;\n    } else {\n      return 1;\n    }\n  }\n\n  equals(other: Node): boolean {\n    // Not that we every compare it, but MAX_NODE is only ever equal to itself\n    return other === this;\n  }\n\n  getPriority(): MaxNode {\n    return this;\n  }\n\n  getImmediateChild(childName: string): ChildrenNode {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  isEmpty(): boolean {\n    return false;\n  }\n}\n\n/**\n * Marker that will sort higher than any other snapshot.\n */\nexport const MAX_NODE = new MaxNode();\n\n/**\n * Document NamedNode extensions\n */\ndeclare module './Node' {\n  interface NamedNode {\n    MIN: NamedNode;\n    MAX: NamedNode;\n  }\n}\n\nObject.defineProperties(NamedNode, {\n  MIN: {\n    value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\n  },\n  MAX: {\n    value: new NamedNode(MAX_NAME, MAX_NODE)\n  }\n});\n\n/**\n * Reference Extensions\n */\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\nLeafNode.__childrenNodeConstructor = ChildrenNode;\nsetMaxNode(MAX_NODE);\nsetPriorityMaxNode(MAX_NODE);\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LLRBNode, SortedMap } from '../util/SortedMap';\n\nimport { NamedNode } from './Node';\n\nconst LOG_2 = Math.log(2);\n\nclass Base12Num {\n  count: number;\n  private current_: number;\n  private bits_: number;\n\n  constructor(length: number) {\n    const logBase2 = (num: number) =>\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      parseInt((Math.log(num) / LOG_2) as any, 10);\n    const bitMask = (bits: number) => parseInt(Array(bits + 1).join('1'), 2);\n    this.count = logBase2(length + 1);\n    this.current_ = this.count - 1;\n    const mask = bitMask(this.count);\n    this.bits_ = (length + 1) & mask;\n  }\n\n  nextBitIsOne(): boolean {\n    //noinspection JSBitwiseOperatorUsage\n    const result = !(this.bits_ & (0x1 << this.current_));\n    this.current_--;\n    return result;\n  }\n}\n\n/**\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\n * function\n *\n * Uses the algorithm described in the paper linked here:\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\n *\n * @param childList - Unsorted list of children\n * @param cmp - The comparison method to be used\n * @param keyFn - An optional function to extract K from a node wrapper, if K's\n * type is not NamedNode\n * @param mapSortFn - An optional override for comparator used by the generated sorted map\n */\nexport const buildChildSet = function <K, V>(\n  childList: NamedNode[],\n  cmp: (a: NamedNode, b: NamedNode) => number,\n  keyFn?: (a: NamedNode) => K,\n  mapSortFn?: (a: K, b: K) => number\n): SortedMap<K, V> {\n  childList.sort(cmp);\n\n  const buildBalancedTree = function (\n    low: number,\n    high: number\n  ): LLRBNode<K, V> | null {\n    const length = high - low;\n    let namedNode: NamedNode;\n    let key: K;\n    if (length === 0) {\n      return null;\n    } else if (length === 1) {\n      namedNode = childList[low];\n      key = keyFn ? keyFn(namedNode) : (namedNode as unknown as K);\n      return new LLRBNode(\n        key,\n        namedNode.node as unknown as V,\n        LLRBNode.BLACK,\n        null,\n        null\n      );\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const middle = parseInt((length / 2) as any, 10) + low;\n      const left = buildBalancedTree(low, middle);\n      const right = buildBalancedTree(middle + 1, high);\n      namedNode = childList[middle];\n      key = keyFn ? keyFn(namedNode) : (namedNode as unknown as K);\n      return new LLRBNode(\n        key,\n        namedNode.node as unknown as V,\n        LLRBNode.BLACK,\n        left,\n        right\n      );\n    }\n  };\n\n  const buildFrom12Array = function (base12: Base12Num): LLRBNode<K, V> {\n    let node: LLRBNode<K, V> = null;\n    let root = null;\n    let index = childList.length;\n\n    const buildPennant = function (chunkSize: number, color: boolean) {\n      const low = index - chunkSize;\n      const high = index;\n      index -= chunkSize;\n      const childTree = buildBalancedTree(low + 1, high);\n      const namedNode = childList[low];\n      const key: K = keyFn ? keyFn(namedNode) : (namedNode as unknown as K);\n      attachPennant(\n        new LLRBNode(\n          key,\n          namedNode.node as unknown as V,\n          color,\n          null,\n          childTree\n        )\n      );\n    };\n\n    const attachPennant = function (pennant: LLRBNode<K, V>) {\n      if (node) {\n        node.left = pennant;\n        node = pennant;\n      } else {\n        root = pennant;\n        node = pennant;\n      }\n    };\n\n    for (let i = 0; i < base12.count; ++i) {\n      const isOne = base12.nextBitIsOne();\n      // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\n      const chunkSize = Math.pow(2, base12.count - (i + 1));\n      if (isOne) {\n        buildPennant(chunkSize, LLRBNode.BLACK);\n      } else {\n        // current == 2\n        buildPennant(chunkSize, LLRBNode.BLACK);\n        buildPennant(chunkSize, LLRBNode.RED);\n      }\n    }\n    return root;\n  };\n\n  const base12 = new Base12Num(childList.length);\n  const root = buildFrom12Array(base12);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return new SortedMap<K, V>(mapSortFn || (cmp as any), root);\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains, assert } from '@firebase/util';\n\nimport { Indexable } from '../util/misc';\nimport { SortedMap } from '../util/SortedMap';\nimport { each } from '../util/util';\n\nimport { ChildrenNode } from './ChildrenNode';\nimport { buildChildSet } from './childSet';\nimport { NAME_COMPARATOR, NAME_ONLY_COMPARATOR } from './comparators';\nimport { PRIORITY_INDEX, setNodeFromJSON } from './indexes/PriorityIndex';\nimport { IndexMap } from './IndexMap';\nimport { LeafNode } from './LeafNode';\nimport { NamedNode, Node } from './Node';\n\nconst USE_HINZE = true;\n\n/**\n * Constructs a snapshot node representing the passed JSON and returns it.\n * @param json - JSON to create a node for.\n * @param priority - Optional priority to use.  This will be ignored if the\n * passed JSON contains a .priority property.\n */\nexport function nodeFromJSON(\n  json: unknown | null,\n  priority: unknown = null\n): Node {\n  if (json === null) {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  if (typeof json === 'object' && '.priority' in json) {\n    priority = json['.priority'];\n  }\n\n  assert(\n    priority === null ||\n      typeof priority === 'string' ||\n      typeof priority === 'number' ||\n      (typeof priority === 'object' && '.sv' in (priority as object)),\n    'Invalid priority type found: ' + typeof priority\n  );\n\n  if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\n    json = json['.value'];\n  }\n\n  // Valid leaf nodes include non-objects or server-value wrapper objects\n  if (typeof json !== 'object' || '.sv' in json) {\n    const jsonLeaf = json as string | number | boolean | Indexable;\n    return new LeafNode(jsonLeaf, nodeFromJSON(priority));\n  }\n\n  if (!(json instanceof Array) && USE_HINZE) {\n    const children: NamedNode[] = [];\n    let childrenHavePriority = false;\n    const hinzeJsonObj = json;\n    each(hinzeJsonObj, (key, child) => {\n      if (key.substring(0, 1) !== '.') {\n        // Ignore metadata nodes\n        const childNode = nodeFromJSON(child);\n        if (!childNode.isEmpty()) {\n          childrenHavePriority =\n            childrenHavePriority || !childNode.getPriority().isEmpty();\n          children.push(new NamedNode(key, childNode));\n        }\n      }\n    });\n\n    if (children.length === 0) {\n      return ChildrenNode.EMPTY_NODE;\n    }\n\n    const childSet = buildChildSet(\n      children,\n      NAME_ONLY_COMPARATOR,\n      namedNode => namedNode.name,\n      NAME_COMPARATOR\n    ) as SortedMap<string, Node>;\n    if (childrenHavePriority) {\n      const sortedChildSet = buildChildSet(\n        children,\n        PRIORITY_INDEX.getCompare()\n      );\n      return new ChildrenNode(\n        childSet,\n        nodeFromJSON(priority),\n        new IndexMap(\n          { '.priority': sortedChildSet },\n          { '.priority': PRIORITY_INDEX }\n        )\n      );\n    } else {\n      return new ChildrenNode(\n        childSet,\n        nodeFromJSON(priority),\n        IndexMap.Default\n      );\n    }\n  } else {\n    let node: Node = ChildrenNode.EMPTY_NODE;\n    each(json, (key: string, childData: unknown) => {\n      if (contains(json as object, key)) {\n        if (key.substring(0, 1) !== '.') {\n          // ignore metadata nodes.\n          const childNode = nodeFromJSON(childData);\n          if (childNode.isLeafNode() || !childNode.isEmpty()) {\n            node = node.updateImmediateChild(key, childNode);\n          }\n        }\n      }\n    });\n\n    return node.updatePriority(nodeFromJSON(priority));\n  }\n}\n\nsetNodeFromJSON(nodeFromJSON);\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Path, pathGetFront, pathIsEmpty, pathSlice } from '../../util/Path';\nimport { MAX_NAME, nameCompare } from '../../util/util';\nimport { ChildrenNode, MAX_NODE } from '../ChildrenNode';\nimport { NamedNode, Node } from '../Node';\nimport { nodeFromJSON } from '../nodeFromJSON';\n\nimport { Index } from './Index';\n\nexport class PathIndex extends Index {\n  constructor(private indexPath_: Path) {\n    super();\n\n    assert(\n      !pathIsEmpty(indexPath_) && pathGetFront(indexPath_) !== '.priority',\n      \"Can't create PathIndex with empty path or .priority key\"\n    );\n  }\n\n  protected extractChild(snap: Node): Node {\n    return snap.getChild(this.indexPath_);\n  }\n  isDefinedOn(node: Node): boolean {\n    return !node.getChild(this.indexPath_).isEmpty();\n  }\n  compare(a: NamedNode, b: NamedNode): number {\n    const aChild = this.extractChild(a.node);\n    const bChild = this.extractChild(b.node);\n    const indexCmp = aChild.compareTo(bChild);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  makePost(indexValue: object, name: string): NamedNode {\n    const valueNode = nodeFromJSON(indexValue);\n    const node = ChildrenNode.EMPTY_NODE.updateChild(\n      this.indexPath_,\n      valueNode\n    );\n    return new NamedNode(name, node);\n  }\n  maxPost(): NamedNode {\n    const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);\n    return new NamedNode(MAX_NAME, node);\n  }\n  toString(): string {\n    return pathSlice(this.indexPath_, 0).join('/');\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare } from '../../util/util';\nimport { NamedNode, Node } from '../Node';\nimport { nodeFromJSON } from '../nodeFromJSON';\n\nimport { Index } from './Index';\n\nexport class ValueIndex extends Index {\n  compare(a: NamedNode, b: NamedNode): number {\n    const indexCmp = a.node.compareTo(b.node);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  isDefinedOn(node: Node): boolean {\n    return true;\n  }\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return !oldNode.equals(newNode);\n  }\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n  maxPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MAX;\n  }\n\n  makePost(indexValue: object, name: string): NamedNode {\n    const valueNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, valueNode);\n  }\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.value';\n  }\n}\n\nexport const VALUE_INDEX = new ValueIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport {\n  tryParseInt,\n  MAX_NAME,\n  MIN_NAME,\n  INTEGER_32_MIN,\n  INTEGER_32_MAX\n} from '../util/util';\n\n// Modeled after base64 web-safe chars, but ordered by ASCII.\nconst PUSH_CHARS =\n  '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\n\nconst MIN_PUSH_CHAR = '-';\n\nconst MAX_PUSH_CHAR = 'z';\n\nconst MAX_KEY_LEN = 786;\n\n/**\n * Fancy ID generator that creates 20-character string identifiers with the\n * following properties:\n *\n * 1. They're based on timestamp so that they sort *after* any existing ids.\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\n *    collide with other clients' IDs.\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\n *    that will sort properly).\n * 4. They're monotonically increasing. Even if you generate more than one in\n *    the same timestamp, the latter ones will sort after the former ones. We do\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\n *    in the case of a timestamp collision).\n */\nexport const nextPushId = (function () {\n  // Timestamp of last push, used to prevent local collisions if you push twice\n  // in one ms.\n  let lastPushTime = 0;\n\n  // We generate 72-bits of randomness which get turned into 12 characters and\n  // appended to the timestamp to prevent collisions with other clients. We\n  // store the last characters we generated because in the event of a collision,\n  // we'll use those same characters except \"incremented\" by one.\n  const lastRandChars: number[] = [];\n\n  return function (now: number) {\n    const duplicateTime = now === lastPushTime;\n    lastPushTime = now;\n\n    let i;\n    const timeStampChars = new Array(8);\n    for (i = 7; i >= 0; i--) {\n      timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\n      // NOTE: Can't use << here because javascript will convert to int and lose\n      // the upper bits.\n      now = Math.floor(now / 64);\n    }\n    assert(now === 0, 'Cannot push at time == 0');\n\n    let id = timeStampChars.join('');\n\n    if (!duplicateTime) {\n      for (i = 0; i < 12; i++) {\n        lastRandChars[i] = Math.floor(Math.random() * 64);\n      }\n    } else {\n      // If the timestamp hasn't changed since last push, use the same random\n      // number, except incremented by 1.\n      for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\n        lastRandChars[i] = 0;\n      }\n      lastRandChars[i]++;\n    }\n    for (i = 0; i < 12; i++) {\n      id += PUSH_CHARS.charAt(lastRandChars[i]);\n    }\n    assert(id.length === 20, 'nextPushId: Length should be 20.');\n\n    return id;\n  };\n})();\n\nexport const successor = function (key: string) {\n  if (key === '' + INTEGER_32_MAX) {\n    // See https://firebase.google.com/docs/database/web/lists-of-data#data-order\n    return MIN_PUSH_CHAR;\n  }\n  const keyAsInt: number = tryParseInt(key);\n  if (keyAsInt != null) {\n    return '' + (keyAsInt + 1);\n  }\n  const next = new Array(key.length);\n\n  for (let i = 0; i < next.length; i++) {\n    next[i] = key.charAt(i);\n  }\n\n  if (next.length < MAX_KEY_LEN) {\n    next.push(MIN_PUSH_CHAR);\n    return next.join('');\n  }\n\n  let i = next.length - 1;\n\n  while (i >= 0 && next[i] === MAX_PUSH_CHAR) {\n    i--;\n  }\n\n  // `successor` was called on the largest possible key, so return the\n  // MAX_NAME, which sorts larger than all keys.\n  if (i === -1) {\n    return MAX_NAME;\n  }\n\n  const source = next[i];\n  const sourcePlusOne = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(source) + 1);\n  next[i] = sourcePlusOne;\n\n  return next.slice(0, i + 1).join('');\n};\n\n// `key` is assumed to be non-empty.\nexport const predecessor = function (key: string) {\n  if (key === '' + INTEGER_32_MIN) {\n    return MIN_NAME;\n  }\n  const keyAsInt: number = tryParseInt(key);\n  if (keyAsInt != null) {\n    return '' + (keyAsInt - 1);\n  }\n  const next = new Array(key.length);\n  for (let i = 0; i < next.length; i++) {\n    next[i] = key.charAt(i);\n  }\n  // If `key` ends in `MIN_PUSH_CHAR`, the largest key lexicographically\n  // smaller than `key`, is `key[0:key.length - 1]`. The next key smaller\n  // than that, `predecessor(predecessor(key))`, is\n  //\n  // `key[0:key.length - 2] + (key[key.length - 1] - 1) + \\\n  //   { MAX_PUSH_CHAR repeated MAX_KEY_LEN - (key.length - 1) times }\n  //\n  // analogous to increment/decrement for base-10 integers.\n  //\n  // This works because lexigographic comparison works character-by-character,\n  // using length as a tie-breaker if one key is a prefix of the other.\n  if (next[next.length - 1] === MIN_PUSH_CHAR) {\n    if (next.length === 1) {\n      // See https://firebase.google.com/docs/database/web/lists-of-data#orderbykey\n      return '' + INTEGER_32_MAX;\n    }\n    delete next[next.length - 1];\n    return next.join('');\n  }\n  // Replace the last character with it's immediate predecessor, and\n  // fill the suffix of the key with MAX_PUSH_CHAR. This is the\n  // lexicographically largest possible key smaller than `key`.\n  next[next.length - 1] = PUSH_CHARS.charAt(\n    PUSH_CHARS.indexOf(next[next.length - 1]) - 1\n  );\n  return next.join('') + MAX_PUSH_CHAR.repeat(MAX_KEY_LEN - next.length);\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\n\nexport const enum ChangeType {\n  /** Event type for a child added */\n  CHILD_ADDED = 'child_added',\n  /** Event type for a child removed */\n  CHILD_REMOVED = 'child_removed',\n  /** Event type for a child changed */\n  CHILD_CHANGED = 'child_changed',\n  /** Event type for a child moved */\n  CHILD_MOVED = 'child_moved',\n  /** Event type for a value change */\n  VALUE = 'value'\n}\n\nexport interface Change {\n  /** @param type - The event type */\n  type: ChangeType;\n  /** @param snapshotNode - The data */\n  snapshotNode: Node;\n  /** @param childName - The name for this child, if it's a child even */\n  childName?: string;\n  /** @param oldSnap - Used for intermediate processing of child changed events */\n  oldSnap?: Node;\n  /**  * @param prevName - The name for the previous child, if applicable */\n  prevName?: string | null;\n}\n\nexport function changeValue(snapshotNode: Node): Change {\n  return { type: ChangeType.VALUE, snapshotNode };\n}\n\nexport function changeChildAdded(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_ADDED, snapshotNode, childName };\n}\n\nexport function changeChildRemoved(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_REMOVED, snapshotNode, childName };\n}\n\nexport function changeChildChanged(\n  childName: string,\n  snapshotNode: Node,\n  oldSnap: Node\n): Change {\n  return {\n    type: ChangeType.CHILD_CHANGED,\n    snapshotNode,\n    childName,\n    oldSnap\n  };\n}\n\nexport function changeChildMoved(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_MOVED, snapshotNode, childName };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Index } from '../../snap/indexes/Index';\nimport { PRIORITY_INDEX } from '../../snap/indexes/PriorityIndex';\nimport { Node } from '../../snap/Node';\nimport { Path } from '../../util/Path';\nimport {\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from '../Change';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { CompleteChildSource } from '../CompleteChildSource';\n\nimport { NodeFilter } from './NodeFilter';\n\n/**\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\n */\nexport class IndexedFilter implements NodeFilter {\n  constructor(private readonly index_: Index) {}\n\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    assert(\n      snap.isIndexed(this.index_),\n      'A node must be indexed if only a child is updated'\n    );\n    const oldChild = snap.getImmediateChild(key);\n    // Check if anything actually changed.\n    if (\n      oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))\n    ) {\n      // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\n      // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\n      // to avoid treating these cases as \"nothing changed.\"\n      if (oldChild.isEmpty() === newChild.isEmpty()) {\n        // Nothing changed.\n\n        // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\n        //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\n        return snap;\n      }\n    }\n\n    if (optChangeAccumulator != null) {\n      if (newChild.isEmpty()) {\n        if (snap.hasChild(key)) {\n          optChangeAccumulator.trackChildChange(\n            changeChildRemoved(key, oldChild)\n          );\n        } else {\n          assert(\n            snap.isLeafNode(),\n            'A child remove without an old child only makes sense on a leaf node'\n          );\n        }\n      } else if (oldChild.isEmpty()) {\n        optChangeAccumulator.trackChildChange(changeChildAdded(key, newChild));\n      } else {\n        optChangeAccumulator.trackChildChange(\n          changeChildChanged(key, newChild, oldChild)\n        );\n      }\n    }\n    if (snap.isLeafNode() && newChild.isEmpty()) {\n      return snap;\n    } else {\n      // Make sure the node is indexed\n      return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\n    }\n  }\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (optChangeAccumulator != null) {\n      if (!oldSnap.isLeafNode()) {\n        oldSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (!newSnap.hasChild(key)) {\n            optChangeAccumulator.trackChildChange(\n              changeChildRemoved(key, childNode)\n            );\n          }\n        });\n      }\n      if (!newSnap.isLeafNode()) {\n        newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (oldSnap.hasChild(key)) {\n            const oldChild = oldSnap.getImmediateChild(key);\n            if (!oldChild.equals(childNode)) {\n              optChangeAccumulator.trackChildChange(\n                changeChildChanged(key, childNode, oldChild)\n              );\n            }\n          } else {\n            optChangeAccumulator.trackChildChange(\n              changeChildAdded(key, childNode)\n            );\n          }\n        });\n      }\n    }\n    return newSnap.withIndex(this.index_);\n  }\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    if (oldSnap.isEmpty()) {\n      return ChildrenNode.EMPTY_NODE;\n    } else {\n      return oldSnap.updatePriority(newPriority);\n    }\n  }\n  filtersNodes(): boolean {\n    return false;\n  }\n  getIndexedFilter(): IndexedFilter {\n    return this;\n  }\n  getIndex(): Index {\n    return this.index_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NamedNode, Node } from '../../../core/snap/Node';\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Index } from '../../snap/indexes/Index';\nimport { PRIORITY_INDEX } from '../../snap/indexes/PriorityIndex';\nimport { Path } from '../../util/Path';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { QueryParams } from '../QueryParams';\n\nimport { IndexedFilter } from './IndexedFilter';\nimport { NodeFilter } from './NodeFilter';\n\n/**\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\n */\nexport class RangedFilter implements NodeFilter {\n  private indexedFilter_: IndexedFilter;\n\n  private index_: Index;\n\n  private startPost_: NamedNode;\n\n  private endPost_: NamedNode;\n\n  constructor(params: QueryParams) {\n    this.indexedFilter_ = new IndexedFilter(params.getIndex());\n    this.index_ = params.getIndex();\n    this.startPost_ = RangedFilter.getStartPost_(params);\n    this.endPost_ = RangedFilter.getEndPost_(params);\n  }\n\n  getStartPost(): NamedNode {\n    return this.startPost_;\n  }\n\n  getEndPost(): NamedNode {\n    return this.endPost_;\n  }\n\n  matches(node: NamedNode): boolean {\n    return (\n      this.index_.compare(this.getStartPost(), node) <= 0 &&\n      this.index_.compare(node, this.getEndPost()) <= 0\n    );\n  }\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (!this.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    return this.indexedFilter_.updateChild(\n      snap,\n      key,\n      newChild,\n      affectedPath,\n      source,\n      optChangeAccumulator\n    );\n  }\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (newSnap.isLeafNode()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      newSnap = ChildrenNode.EMPTY_NODE;\n    }\n    let filtered = newSnap.withIndex(this.index_);\n    // Don't support priorities on queries\n    filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\n    const self = this;\n    newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      if (!self.matches(new NamedNode(key, childNode))) {\n        filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\n      }\n    });\n    return this.indexedFilter_.updateFullNode(\n      oldSnap,\n      filtered,\n      optChangeAccumulator\n    );\n  }\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n  filtersNodes(): boolean {\n    return true;\n  }\n  getIndexedFilter(): IndexedFilter {\n    return this.indexedFilter_;\n  }\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  private static getStartPost_(params: QueryParams): NamedNode {\n    if (params.hasStart()) {\n      const startName = params.getIndexStartName();\n      return params.getIndex().makePost(params.getIndexStartValue(), startName);\n    } else {\n      return params.getIndex().minPost();\n    }\n  }\n\n  private static getEndPost_(params: QueryParams): NamedNode {\n    if (params.hasEnd()) {\n      const endName = params.getIndexEndName();\n      return params.getIndex().makePost(params.getIndexEndValue(), endName);\n    } else {\n      return params.getIndex().maxPost();\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Index } from '../../snap/indexes/Index';\nimport { NamedNode, Node } from '../../snap/Node';\nimport { Path } from '../../util/Path';\nimport {\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from '../Change';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { QueryParams } from '../QueryParams';\n\nimport { IndexedFilter } from './IndexedFilter';\nimport { NodeFilter } from './NodeFilter';\nimport { RangedFilter } from './RangedFilter';\n\n/**\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\n */\nexport class LimitedFilter implements NodeFilter {\n  private readonly rangedFilter_: RangedFilter;\n\n  private readonly index_: Index;\n\n  private readonly limit_: number;\n\n  private readonly reverse_: boolean;\n\n  constructor(params: QueryParams) {\n    this.rangedFilter_ = new RangedFilter(params);\n    this.index_ = params.getIndex();\n    this.limit_ = params.getLimit();\n    this.reverse_ = !params.isViewFromLeft();\n  }\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    if (snap.getImmediateChild(key).equals(newChild)) {\n      // No change\n      return snap;\n    } else if (snap.numChildren() < this.limit_) {\n      return this.rangedFilter_\n        .getIndexedFilter()\n        .updateChild(\n          snap,\n          key,\n          newChild,\n          affectedPath,\n          source,\n          optChangeAccumulator\n        );\n    } else {\n      return this.fullLimitUpdateChild_(\n        snap,\n        key,\n        newChild,\n        source,\n        optChangeAccumulator\n      );\n    }\n  }\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    let filtered;\n    if (newSnap.isLeafNode() || newSnap.isEmpty()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n    } else {\n      if (\n        this.limit_ * 2 < newSnap.numChildren() &&\n        newSnap.isIndexed(this.index_)\n      ) {\n        // Easier to build up a snapshot, since what we're given has more than twice the elements we want\n        filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n        // anchor to the startPost, endPost, or last element as appropriate\n        let iterator;\n        if (this.reverse_) {\n          iterator = (newSnap as ChildrenNode).getReverseIteratorFrom(\n            this.rangedFilter_.getEndPost(),\n            this.index_\n          );\n        } else {\n          iterator = (newSnap as ChildrenNode).getIteratorFrom(\n            this.rangedFilter_.getStartPost(),\n            this.index_\n          );\n        }\n        let count = 0;\n        while (iterator.hasNext() && count < this.limit_) {\n          const next = iterator.getNext();\n          let inRange;\n          if (this.reverse_) {\n            inRange =\n              this.index_.compare(this.rangedFilter_.getStartPost(), next) <= 0;\n          } else {\n            inRange =\n              this.index_.compare(next, this.rangedFilter_.getEndPost()) <= 0;\n          }\n          if (inRange) {\n            filtered = filtered.updateImmediateChild(next.name, next.node);\n            count++;\n          } else {\n            // if we have reached the end post, we cannot keep adding elemments\n            break;\n          }\n        }\n      } else {\n        // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\n        filtered = newSnap.withIndex(this.index_);\n        // Don't support priorities on queries\n        filtered = filtered.updatePriority(\n          ChildrenNode.EMPTY_NODE\n        ) as ChildrenNode;\n        let startPost;\n        let endPost;\n        let cmp;\n        let iterator;\n        if (this.reverse_) {\n          iterator = filtered.getReverseIterator(this.index_);\n          startPost = this.rangedFilter_.getEndPost();\n          endPost = this.rangedFilter_.getStartPost();\n          const indexCompare = this.index_.getCompare();\n          cmp = (a: NamedNode, b: NamedNode) => indexCompare(b, a);\n        } else {\n          iterator = filtered.getIterator(this.index_);\n          startPost = this.rangedFilter_.getStartPost();\n          endPost = this.rangedFilter_.getEndPost();\n          cmp = this.index_.getCompare();\n        }\n\n        let count = 0;\n        let foundStartPost = false;\n        while (iterator.hasNext()) {\n          const next = iterator.getNext();\n          if (!foundStartPost && cmp(startPost, next) <= 0) {\n            // start adding\n            foundStartPost = true;\n          }\n          const inRange =\n            foundStartPost && count < this.limit_ && cmp(next, endPost) <= 0;\n          if (inRange) {\n            count++;\n          } else {\n            filtered = filtered.updateImmediateChild(\n              next.name,\n              ChildrenNode.EMPTY_NODE\n            );\n          }\n        }\n      }\n    }\n    return this.rangedFilter_\n      .getIndexedFilter()\n      .updateFullNode(oldSnap, filtered, optChangeAccumulator);\n  }\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n  filtersNodes(): boolean {\n    return true;\n  }\n  getIndexedFilter(): IndexedFilter {\n    return this.rangedFilter_.getIndexedFilter();\n  }\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  private fullLimitUpdateChild_(\n    snap: Node,\n    childKey: string,\n    childSnap: Node,\n    source: CompleteChildSource,\n    changeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    // TODO: rename all cache stuff etc to general snap terminology\n    let cmp;\n    if (this.reverse_) {\n      const indexCmp = this.index_.getCompare();\n      cmp = (a: NamedNode, b: NamedNode) => indexCmp(b, a);\n    } else {\n      cmp = this.index_.getCompare();\n    }\n    const oldEventCache = snap as ChildrenNode;\n    assert(oldEventCache.numChildren() === this.limit_, '');\n    const newChildNamedNode = new NamedNode(childKey, childSnap);\n    const windowBoundary = this.reverse_\n      ? oldEventCache.getFirstChild(this.index_)\n      : (oldEventCache.getLastChild(this.index_) as NamedNode);\n    const inRange = this.rangedFilter_.matches(newChildNamedNode);\n    if (oldEventCache.hasChild(childKey)) {\n      const oldChildSnap = oldEventCache.getImmediateChild(childKey);\n      let nextChild = source.getChildAfterChild(\n        this.index_,\n        windowBoundary,\n        this.reverse_\n      );\n      while (\n        nextChild != null &&\n        (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))\n      ) {\n        // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\n        // been applied to the limited filter yet. Ignore this next child which will be updated later in\n        // the limited filter...\n        nextChild = source.getChildAfterChild(\n          this.index_,\n          nextChild,\n          this.reverse_\n        );\n      }\n      const compareNext =\n        nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\n      const remainsInWindow =\n        inRange && !childSnap.isEmpty() && compareNext >= 0;\n      if (remainsInWindow) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            changeChildChanged(childKey, childSnap, oldChildSnap)\n          );\n        }\n        return oldEventCache.updateImmediateChild(childKey, childSnap);\n      } else {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            changeChildRemoved(childKey, oldChildSnap)\n          );\n        }\n        const newEventCache = oldEventCache.updateImmediateChild(\n          childKey,\n          ChildrenNode.EMPTY_NODE\n        );\n        const nextChildInRange =\n          nextChild != null && this.rangedFilter_.matches(nextChild);\n        if (nextChildInRange) {\n          if (changeAccumulator != null) {\n            changeAccumulator.trackChildChange(\n              changeChildAdded(nextChild.name, nextChild.node)\n            );\n          }\n          return newEventCache.updateImmediateChild(\n            nextChild.name,\n            nextChild.node\n          );\n        } else {\n          return newEventCache;\n        }\n      }\n    } else if (childSnap.isEmpty()) {\n      // we're deleting a node, but it was not in the window, so ignore it\n      return snap;\n    } else if (inRange) {\n      if (cmp(windowBoundary, newChildNamedNode) >= 0) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            changeChildRemoved(windowBoundary.name, windowBoundary.node)\n          );\n          changeAccumulator.trackChildChange(\n            changeChildAdded(childKey, childSnap)\n          );\n        }\n        return oldEventCache\n          .updateImmediateChild(childKey, childSnap)\n          .updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\n      } else {\n        return snap;\n      }\n    } else {\n      return snap;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, stringify } from '@firebase/util';\n\nimport { Index } from '../snap/indexes/Index';\nimport { KEY_INDEX } from '../snap/indexes/KeyIndex';\nimport { PathIndex } from '../snap/indexes/PathIndex';\nimport { PRIORITY_INDEX, PriorityIndex } from '../snap/indexes/PriorityIndex';\nimport { VALUE_INDEX } from '../snap/indexes/ValueIndex';\nimport { predecessor, successor } from '../util/NextPushId';\nimport { MAX_NAME, MIN_NAME } from '../util/util';\n\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport { LimitedFilter } from './filter/LimitedFilter';\nimport { NodeFilter } from './filter/NodeFilter';\nimport { RangedFilter } from './filter/RangedFilter';\n\n/**\n * Wire Protocol Constants\n */\nconst enum WIRE_PROTOCOL_CONSTANTS {\n  INDEX_START_VALUE = 'sp',\n  INDEX_START_NAME = 'sn',\n  INDEX_END_VALUE = 'ep',\n  INDEX_END_NAME = 'en',\n  LIMIT = 'l',\n  VIEW_FROM = 'vf',\n  VIEW_FROM_LEFT = 'l',\n  VIEW_FROM_RIGHT = 'r',\n  INDEX = 'i'\n}\n\n/**\n * REST Query Constants\n */\nconst enum REST_QUERY_CONSTANTS {\n  ORDER_BY = 'orderBy',\n  PRIORITY_INDEX = '$priority',\n  VALUE_INDEX = '$value',\n  KEY_INDEX = '$key',\n  START_AT = 'startAt',\n  END_AT = 'endAt',\n  LIMIT_TO_FIRST = 'limitToFirst',\n  LIMIT_TO_LAST = 'limitToLast'\n}\n\n/**\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\n * user-facing API level, so it is not done here.\n *\n * @internal\n */\nexport class QueryParams {\n  limitSet_ = false;\n  startSet_ = false;\n  startNameSet_ = false;\n  startAfterSet_ = false;\n  endSet_ = false;\n  endNameSet_ = false;\n  endBeforeSet_ = false;\n  limit_ = 0;\n  viewFrom_ = '';\n  indexStartValue_: unknown | null = null;\n  indexStartName_ = '';\n  indexEndValue_: unknown | null = null;\n  indexEndName_ = '';\n  index_: PriorityIndex = PRIORITY_INDEX;\n\n  hasStart(): boolean {\n    return this.startSet_;\n  }\n\n  hasStartAfter(): boolean {\n    return this.startAfterSet_;\n  }\n\n  hasEndBefore(): boolean {\n    return this.endBeforeSet_;\n  }\n\n  /**\n   * @returns True if it would return from left.\n   */\n  isViewFromLeft(): boolean {\n    if (this.viewFrom_ === '') {\n      // limit(), rather than limitToFirst or limitToLast was called.\n      // This means that only one of startSet_ and endSet_ is true. Use them\n      // to calculate which side of the view to anchor to. If neither is set,\n      // anchor to the end.\n      return this.startSet_;\n    } else {\n      return this.viewFrom_ === WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n    }\n  }\n\n  /**\n   * Only valid to call if hasStart() returns true\n   */\n  getIndexStartValue(): unknown {\n    assert(this.startSet_, 'Only valid if start has been set');\n    return this.indexStartValue_;\n  }\n\n  /**\n   * Only valid to call if hasStart() returns true.\n   * Returns the starting key name for the range defined by these query parameters\n   */\n  getIndexStartName(): string {\n    assert(this.startSet_, 'Only valid if start has been set');\n    if (this.startNameSet_) {\n      return this.indexStartName_;\n    } else {\n      return MIN_NAME;\n    }\n  }\n\n  hasEnd(): boolean {\n    return this.endSet_;\n  }\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   */\n  getIndexEndValue(): unknown {\n    assert(this.endSet_, 'Only valid if end has been set');\n    return this.indexEndValue_;\n  }\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   * Returns the end key name for the range defined by these query parameters\n   */\n  getIndexEndName(): string {\n    assert(this.endSet_, 'Only valid if end has been set');\n    if (this.endNameSet_) {\n      return this.indexEndName_;\n    } else {\n      return MAX_NAME;\n    }\n  }\n\n  hasLimit(): boolean {\n    return this.limitSet_;\n  }\n\n  /**\n   * @returns True if a limit has been set and it has been explicitly anchored\n   */\n  hasAnchoredLimit(): boolean {\n    return this.limitSet_ && this.viewFrom_ !== '';\n  }\n\n  /**\n   * Only valid to call if hasLimit() returns true\n   */\n  getLimit(): number {\n    assert(this.limitSet_, 'Only valid if limit has been set');\n    return this.limit_;\n  }\n\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  loadsAllData(): boolean {\n    return !(this.startSet_ || this.endSet_ || this.limitSet_);\n  }\n\n  isDefault(): boolean {\n    return this.loadsAllData() && this.index_ === PRIORITY_INDEX;\n  }\n\n  copy(): QueryParams {\n    const copy = new QueryParams();\n    copy.limitSet_ = this.limitSet_;\n    copy.limit_ = this.limit_;\n    copy.startSet_ = this.startSet_;\n    copy.indexStartValue_ = this.indexStartValue_;\n    copy.startNameSet_ = this.startNameSet_;\n    copy.indexStartName_ = this.indexStartName_;\n    copy.endSet_ = this.endSet_;\n    copy.indexEndValue_ = this.indexEndValue_;\n    copy.endNameSet_ = this.endNameSet_;\n    copy.indexEndName_ = this.indexEndName_;\n    copy.index_ = this.index_;\n    copy.viewFrom_ = this.viewFrom_;\n    return copy;\n  }\n}\n\nexport function queryParamsGetNodeFilter(queryParams: QueryParams): NodeFilter {\n  if (queryParams.loadsAllData()) {\n    return new IndexedFilter(queryParams.getIndex());\n  } else if (queryParams.hasLimit()) {\n    return new LimitedFilter(queryParams);\n  } else {\n    return new RangedFilter(queryParams);\n  }\n}\n\nexport function queryParamsLimit(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = '';\n  return newParams;\n}\n\nexport function queryParamsLimitToFirst(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n  return newParams;\n}\n\nexport function queryParamsLimitToLast(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\n  return newParams;\n}\n\nexport function queryParamsStartAt(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.startSet_ = true;\n  if (indexValue === undefined) {\n    indexValue = null;\n  }\n  newParams.indexStartValue_ = indexValue;\n  if (key != null) {\n    newParams.startNameSet_ = true;\n    newParams.indexStartName_ = key;\n  } else {\n    newParams.startNameSet_ = false;\n    newParams.indexStartName_ = '';\n  }\n  return newParams;\n}\n\nexport function queryParamsStartAfter(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  let params: QueryParams;\n  if (queryParams.index_ === KEY_INDEX) {\n    if (typeof indexValue === 'string') {\n      indexValue = successor(indexValue as string);\n    }\n    params = queryParamsStartAt(queryParams, indexValue, key);\n  } else {\n    let childKey: string;\n    if (key == null) {\n      childKey = MAX_NAME;\n    } else {\n      childKey = successor(key);\n    }\n    params = queryParamsStartAt(queryParams, indexValue, childKey);\n  }\n  params.startAfterSet_ = true;\n  return params;\n}\n\nexport function queryParamsEndAt(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.endSet_ = true;\n  if (indexValue === undefined) {\n    indexValue = null;\n  }\n  newParams.indexEndValue_ = indexValue;\n  if (key !== undefined) {\n    newParams.endNameSet_ = true;\n    newParams.indexEndName_ = key;\n  } else {\n    newParams.endNameSet_ = false;\n    newParams.indexEndName_ = '';\n  }\n  return newParams;\n}\n\nexport function queryParamsEndBefore(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  let childKey: string;\n  let params: QueryParams;\n  if (queryParams.index_ === KEY_INDEX) {\n    if (typeof indexValue === 'string') {\n      indexValue = predecessor(indexValue as string);\n    }\n    params = queryParamsEndAt(queryParams, indexValue, key);\n  } else {\n    if (key == null) {\n      childKey = MIN_NAME;\n    } else {\n      childKey = predecessor(key);\n    }\n    params = queryParamsEndAt(queryParams, indexValue, childKey);\n  }\n  params.endBeforeSet_ = true;\n  return params;\n}\n\nexport function queryParamsOrderBy(\n  queryParams: QueryParams,\n  index: Index\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.index_ = index;\n  return newParams;\n}\n\n/**\n * Returns a set of REST query string parameters representing this query.\n *\n * @returns query string parameters\n */\nexport function queryParamsToRestQueryStringParameters(\n  queryParams: QueryParams\n): Record<string, string | number> {\n  const qs: Record<string, string | number> = {};\n\n  if (queryParams.isDefault()) {\n    return qs;\n  }\n\n  let orderBy;\n  if (queryParams.index_ === PRIORITY_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.PRIORITY_INDEX;\n  } else if (queryParams.index_ === VALUE_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.VALUE_INDEX;\n  } else if (queryParams.index_ === KEY_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.KEY_INDEX;\n  } else {\n    assert(queryParams.index_ instanceof PathIndex, 'Unrecognized index type!');\n    orderBy = queryParams.index_.toString();\n  }\n  qs[REST_QUERY_CONSTANTS.ORDER_BY] = stringify(orderBy);\n\n  if (queryParams.startSet_) {\n    qs[REST_QUERY_CONSTANTS.START_AT] = stringify(queryParams.indexStartValue_);\n    if (queryParams.startNameSet_) {\n      qs[REST_QUERY_CONSTANTS.START_AT] +=\n        ',' + stringify(queryParams.indexStartName_);\n    }\n  }\n\n  if (queryParams.endSet_) {\n    qs[REST_QUERY_CONSTANTS.END_AT] = stringify(queryParams.indexEndValue_);\n    if (queryParams.endNameSet_) {\n      qs[REST_QUERY_CONSTANTS.END_AT] +=\n        ',' + stringify(queryParams.indexEndName_);\n    }\n  }\n\n  if (queryParams.limitSet_) {\n    if (queryParams.isViewFromLeft()) {\n      qs[REST_QUERY_CONSTANTS.LIMIT_TO_FIRST] = queryParams.limit_;\n    } else {\n      qs[REST_QUERY_CONSTANTS.LIMIT_TO_LAST] = queryParams.limit_;\n    }\n  }\n\n  return qs;\n}\n\nexport function queryParamsGetQueryObject(\n  queryParams: QueryParams\n): Record<string, unknown> {\n  const obj: Record<string, unknown> = {};\n  if (queryParams.startSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE] =\n      queryParams.indexStartValue_;\n    if (queryParams.startNameSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME] =\n        queryParams.indexStartName_;\n    }\n  }\n  if (queryParams.endSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE] = queryParams.indexEndValue_;\n    if (queryParams.endNameSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME] = queryParams.indexEndName_;\n    }\n  }\n  if (queryParams.limitSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.LIMIT] = queryParams.limit_;\n    let viewFrom = queryParams.viewFrom_;\n    if (viewFrom === '') {\n      if (queryParams.isViewFromLeft()) {\n        viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n      } else {\n        viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\n      }\n    }\n    obj[WIRE_PROTOCOL_CONSTANTS.VIEW_FROM] = viewFrom;\n  }\n  // For now, priority index is the default, so we only specify if it's some other index\n  if (queryParams.index_ !== PRIORITY_INDEX) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX] = queryParams.index_.toString();\n  }\n  return obj;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  jsonEval,\n  safeGet,\n  querystring,\n  Deferred\n} from '@firebase/util';\n\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { RepoInfo } from './RepoInfo';\nimport { ServerActions } from './ServerActions';\nimport { logWrapper, warn } from './util/util';\nimport { QueryContext } from './view/EventRegistration';\nimport { queryParamsToRestQueryStringParameters } from './view/QueryParams';\n\n/**\n * An implementation of ServerActions that communicates with the server via REST requests.\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\n * persistent connection (using WebSockets or long-polling)\n */\nexport class ReadonlyRestClient extends ServerActions {\n  reportStats(stats: { [k: string]: unknown }): void {\n    throw new Error('Method not implemented.');\n  }\n\n  /** @private {function(...[*])} */\n  private log_: (...args: unknown[]) => void = logWrapper('p:rest:');\n\n  /**\n   * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\n   * that's been removed. :-/\n   */\n  private listens_: { [k: string]: object } = {};\n\n  static getListenId_(query: QueryContext, tag?: number | null): string {\n    if (tag !== undefined) {\n      return 'tag$' + tag;\n    } else {\n      assert(\n        query._queryParams.isDefault(),\n        \"should have a tag if it's not a default query.\"\n      );\n      return query._path.toString();\n    }\n  }\n\n  /**\n   * @param repoInfo_ - Data about the namespace we are connecting to\n   * @param onDataUpdate_ - A callback for new data from the server\n   */\n  constructor(\n    private repoInfo_: RepoInfo,\n    private onDataUpdate_: (\n      a: string,\n      b: unknown,\n      c: boolean,\n      d: number | null\n    ) => void,\n    private authTokenProvider_: AuthTokenProvider,\n    private appCheckTokenProvider_: AppCheckTokenProvider\n  ) {\n    super();\n  }\n\n  /** @inheritDoc */\n  listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ) {\n    const pathString = query._path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + query._queryIdentifier);\n\n    // Mark this listener so we can tell if it's removed.\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    const thisListen = {};\n    this.listens_[listenId] = thisListen;\n\n    const queryStringParameters = queryParamsToRestQueryStringParameters(\n      query._queryParams\n    );\n\n    this.restRequest_(\n      pathString + '.json',\n      queryStringParameters,\n      (error, result) => {\n        let data = result;\n\n        if (error === 404) {\n          data = null;\n          error = null;\n        }\n\n        if (error === null) {\n          this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);\n        }\n\n        if (safeGet(this.listens_, listenId) === thisListen) {\n          let status;\n          if (!error) {\n            status = 'ok';\n          } else if (error === 401) {\n            status = 'permission_denied';\n          } else {\n            status = 'rest_error:' + error;\n          }\n\n          onComplete(status, null);\n        }\n      }\n    );\n  }\n\n  /** @inheritDoc */\n  unlisten(query: QueryContext, tag: number | null) {\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    delete this.listens_[listenId];\n  }\n\n  get(query: QueryContext): Promise<string> {\n    const queryStringParameters = queryParamsToRestQueryStringParameters(\n      query._queryParams\n    );\n\n    const pathString = query._path.toString();\n\n    const deferred = new Deferred<string>();\n\n    this.restRequest_(\n      pathString + '.json',\n      queryStringParameters,\n      (error, result) => {\n        let data = result;\n\n        if (error === 404) {\n          data = null;\n          error = null;\n        }\n\n        if (error === null) {\n          this.onDataUpdate_(\n            pathString,\n            data,\n            /*isMerge=*/ false,\n            /*tag=*/ null\n          );\n          deferred.resolve(data as string);\n        } else {\n          deferred.reject(new Error(data as string));\n        }\n      }\n    );\n    return deferred.promise;\n  }\n\n  /** @inheritDoc */\n  refreshAuthToken(token: string) {\n    // no-op since we just always call getToken.\n  }\n\n  /**\n   * Performs a REST request to the given path, with the provided query string parameters,\n   * and any auth credentials we have.\n   */\n  private restRequest_(\n    pathString: string,\n    queryStringParameters: { [k: string]: string | number } = {},\n    callback: ((a: number | null, b?: unknown) => void) | null\n  ) {\n    queryStringParameters['format'] = 'export';\n\n    return Promise.all([\n      this.authTokenProvider_.getToken(/*forceRefresh=*/ false),\n      this.appCheckTokenProvider_.getToken(/*forceRefresh=*/ false)\n    ]).then(([authToken, appCheckToken]) => {\n      if (authToken && authToken.accessToken) {\n        queryStringParameters['auth'] = authToken.accessToken;\n      }\n      if (appCheckToken && appCheckToken.token) {\n        queryStringParameters['ac'] = appCheckToken.token;\n      }\n\n      const url =\n        (this.repoInfo_.secure ? 'https://' : 'http://') +\n        this.repoInfo_.host +\n        pathString +\n        '?' +\n        'ns=' +\n        this.repoInfo_.namespace +\n        querystring(queryStringParameters);\n\n      this.log_('Sending REST request for ' + url);\n      const xhr = new XMLHttpRequest();\n      xhr.onreadystatechange = () => {\n        if (callback && xhr.readyState === 4) {\n          this.log_(\n            'REST Response for ' + url + ' received. status:',\n            xhr.status,\n            'response:',\n            xhr.responseText\n          );\n          let res = null;\n          if (xhr.status >= 200 && xhr.status < 300) {\n            try {\n              res = jsonEval(xhr.responseText);\n            } catch (e) {\n              warn(\n                'Failed to parse JSON response for ' +\n                  url +\n                  ': ' +\n                  xhr.responseText\n              );\n            }\n            callback(null, res);\n          } else {\n            // 401 and 404 are expected.\n            if (xhr.status !== 401 && xhr.status !== 404) {\n              warn(\n                'Got unsuccessful REST response for ' +\n                  url +\n                  ' Status: ' +\n                  xhr.status\n              );\n            }\n            callback(xhr.status);\n          }\n          callback = null;\n        }\n      };\n\n      xhr.open('GET', url, /*asynchronous=*/ true);\n      xhr.send();\n    });\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport { Path } from './util/Path';\n\n/**\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\n */\nexport class SnapshotHolder {\n  private rootNode_: Node = ChildrenNode.EMPTY_NODE;\n\n  getNode(path: Path): Node {\n    return this.rootNode_.getChild(path);\n  }\n\n  updateSnapshot(path: Path, newSnapshotNode: Node) {\n    this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { Node } from './snap/Node';\nimport { Path, pathGetFront, pathIsEmpty, pathPopFront } from './util/Path';\n\n/**\n * Helper class to store a sparse set of snapshots.\n */\nexport interface SparseSnapshotTree {\n  value: Node | null;\n  readonly children: Map<string, SparseSnapshotTree>;\n}\n\nexport function newSparseSnapshotTree(): SparseSnapshotTree {\n  return {\n    value: null,\n    children: new Map()\n  };\n}\n\n/**\n * Gets the node stored at the given path if one exists.\n * Only seems to be used in tests.\n *\n * @param path - Path to look up snapshot for.\n * @returns The retrieved node, or null.\n */\nexport function sparseSnapshotTreeFind(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path\n): Node | null {\n  if (sparseSnapshotTree.value != null) {\n    return sparseSnapshotTree.value.getChild(path);\n  } else if (!pathIsEmpty(path) && sparseSnapshotTree.children.size > 0) {\n    const childKey = pathGetFront(path);\n    path = pathPopFront(path);\n    if (sparseSnapshotTree.children.has(childKey)) {\n      const childTree = sparseSnapshotTree.children.get(childKey);\n      return sparseSnapshotTreeFind(childTree, path);\n    } else {\n      return null;\n    }\n  } else {\n    return null;\n  }\n}\n\n/**\n * Stores the given node at the specified path. If there is already a node\n * at a shallower path, it merges the new data into that snapshot node.\n *\n * @param path - Path to look up snapshot for.\n * @param data - The new data, or null.\n */\nexport function sparseSnapshotTreeRemember(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path,\n  data: Node\n): void {\n  if (pathIsEmpty(path)) {\n    sparseSnapshotTree.value = data;\n    sparseSnapshotTree.children.clear();\n  } else if (sparseSnapshotTree.value !== null) {\n    sparseSnapshotTree.value = sparseSnapshotTree.value.updateChild(path, data);\n  } else {\n    const childKey = pathGetFront(path);\n    if (!sparseSnapshotTree.children.has(childKey)) {\n      sparseSnapshotTree.children.set(childKey, newSparseSnapshotTree());\n    }\n\n    const child = sparseSnapshotTree.children.get(childKey);\n    path = pathPopFront(path);\n    sparseSnapshotTreeRemember(child, path, data);\n  }\n}\n\n/**\n * Purge the data at path from the cache.\n *\n * @param path - Path to look up snapshot for.\n * @returns True if this node should now be removed.\n */\nexport function sparseSnapshotTreeForget(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path\n): boolean {\n  if (pathIsEmpty(path)) {\n    sparseSnapshotTree.value = null;\n    sparseSnapshotTree.children.clear();\n    return true;\n  } else {\n    if (sparseSnapshotTree.value !== null) {\n      if (sparseSnapshotTree.value.isLeafNode()) {\n        // We're trying to forget a node that doesn't exist\n        return false;\n      } else {\n        const value = sparseSnapshotTree.value;\n        sparseSnapshotTree.value = null;\n\n        value.forEachChild(PRIORITY_INDEX, (key, tree) => {\n          sparseSnapshotTreeRemember(sparseSnapshotTree, new Path(key), tree);\n        });\n\n        return sparseSnapshotTreeForget(sparseSnapshotTree, path);\n      }\n    } else if (sparseSnapshotTree.children.size > 0) {\n      const childKey = pathGetFront(path);\n      path = pathPopFront(path);\n      if (sparseSnapshotTree.children.has(childKey)) {\n        const safeToRemove = sparseSnapshotTreeForget(\n          sparseSnapshotTree.children.get(childKey),\n          path\n        );\n        if (safeToRemove) {\n          sparseSnapshotTree.children.delete(childKey);\n        }\n      }\n\n      return sparseSnapshotTree.children.size === 0;\n    } else {\n      return true;\n    }\n  }\n}\n\n/**\n * Recursively iterates through all of the stored tree and calls the\n * callback on each one.\n *\n * @param prefixPath - Path to look up node for.\n * @param func - The function to invoke for each tree.\n */\nexport function sparseSnapshotTreeForEachTree(\n  sparseSnapshotTree: SparseSnapshotTree,\n  prefixPath: Path,\n  func: (a: Path, b: Node) => unknown\n): void {\n  if (sparseSnapshotTree.value !== null) {\n    func(prefixPath, sparseSnapshotTree.value);\n  } else {\n    sparseSnapshotTreeForEachChild(sparseSnapshotTree, (key, tree) => {\n      const path = new Path(prefixPath.toString() + '/' + key);\n      sparseSnapshotTreeForEachTree(tree, path, func);\n    });\n  }\n}\n\n/**\n * Iterates through each immediate child and triggers the callback.\n * Only seems to be used in tests.\n *\n * @param func - The function to invoke for each child.\n */\nexport function sparseSnapshotTreeForEachChild(\n  sparseSnapshotTree: SparseSnapshotTree,\n  func: (a: string, b: SparseSnapshotTree) => void\n): void {\n  sparseSnapshotTree.children.forEach((tree, key) => {\n    func(key, tree);\n  });\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\n\n/**\n *\n * @enum\n */\nexport enum OperationType {\n  OVERWRITE,\n  MERGE,\n  ACK_USER_WRITE,\n  LISTEN_COMPLETE\n}\n\n/**\n * @interface\n */\nexport interface Operation {\n  source: OperationSource;\n\n  type: OperationType;\n\n  path: Path;\n\n  operationForChild(childName: string): Operation | null;\n}\n\nexport interface OperationSource {\n  fromUser: boolean;\n  fromServer: boolean;\n  queryId: string | null;\n  tagged: boolean;\n}\n\nexport function newOperationSourceUser(): OperationSource {\n  return {\n    fromUser: true,\n    fromServer: false,\n    queryId: null,\n    tagged: false\n  };\n}\n\nexport function newOperationSourceServer(): OperationSource {\n  return {\n    fromUser: false,\n    fromServer: true,\n    queryId: null,\n    tagged: false\n  };\n}\n\nexport function newOperationSourceServerTaggedQuery(\n  queryId: string\n): OperationSource {\n  return {\n    fromUser: false,\n    fromServer: true,\n    queryId,\n    tagged: true\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { each } from '../util/util';\n\nimport { StatsCollection } from './StatsCollection';\n\n/**\n * Returns the delta from the previous call to get stats.\n *\n * @param collection_ - The collection to \"listen\" to.\n */\nexport class StatsListener {\n  private last_: { [k: string]: number } | null = null;\n\n  constructor(private collection_: StatsCollection) {}\n\n  get(): { [k: string]: number } {\n    const newStats = this.collection_.get();\n\n    const delta = { ...newStats };\n    if (this.last_) {\n      each(this.last_, (stat: string, value: number) => {\n        delta[stat] = delta[stat] - value;\n      });\n    }\n    this.last_ = newStats;\n\n    return delta;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains } from '@firebase/util';\n\nimport { ServerActions } from '../ServerActions';\nimport { setTimeoutNonBlocking, each } from '../util/util';\n\nimport { StatsCollection } from './StatsCollection';\nimport { StatsListener } from './StatsListener';\n\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\n// seconds to try to ensure the Firebase connection is established / settled.\nconst FIRST_STATS_MIN_TIME = 10 * 1000;\nconst FIRST_STATS_MAX_TIME = 30 * 1000;\n\n// We'll continue to report stats on average every 5 minutes.\nconst REPORT_STATS_INTERVAL = 5 * 60 * 1000;\n\nexport class StatsReporter {\n  private statsListener_: StatsListener;\n  statsToReport_: { [k: string]: boolean } = {};\n\n  constructor(collection: StatsCollection, private server_: ServerActions) {\n    this.statsListener_ = new StatsListener(collection);\n\n    const timeout =\n      FIRST_STATS_MIN_TIME +\n      (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\n    setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\n  }\n\n  private reportStats_() {\n    const stats = this.statsListener_.get();\n    const reportedStats: typeof stats = {};\n    let haveStatsToReport = false;\n\n    each(stats, (stat: string, value: number) => {\n      if (value > 0 && contains(this.statsToReport_, stat)) {\n        reportedStats[stat] = value;\n        haveStatsToReport = true;\n      }\n    });\n\n    if (haveStatsToReport) {\n      this.server_.reportStats(reportedStats);\n    }\n\n    // queue our next run.\n    setTimeoutNonBlocking(\n      this.reportStats_.bind(this),\n      Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL)\n    );\n  }\n}\n\nexport function statsReporterIncludeStat(\n  reporter: StatsReporter,\n  stat: string\n) {\n  reporter.statsToReport_[stat] = true;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  newEmptyPath,\n  Path,\n  pathChild,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from './Path';\nimport { SortedMap } from './SortedMap';\nimport { each, stringCompare } from './util';\n\nlet emptyChildrenSingleton: SortedMap<string, ImmutableTree<null>>;\n\n/**\n * Singleton empty children collection.\n *\n */\nconst EmptyChildren = (): SortedMap<string, ImmutableTree<null>> => {\n  if (!emptyChildrenSingleton) {\n    emptyChildrenSingleton = new SortedMap<string, ImmutableTree<null>>(\n      stringCompare\n    );\n  }\n  return emptyChildrenSingleton;\n};\n\n/**\n * A tree with immutable elements.\n */\nexport class ImmutableTree<T> {\n  static fromObject<T>(obj: { [k: string]: T }): ImmutableTree<T> {\n    let tree: ImmutableTree<T> = new ImmutableTree<T>(null);\n    each(obj, (childPath: string, childSnap: T) => {\n      tree = tree.set(new Path(childPath), childSnap);\n    });\n    return tree;\n  }\n\n  constructor(\n    public readonly value: T | null,\n    public readonly children: SortedMap<\n      string,\n      ImmutableTree<T>\n    > = EmptyChildren()\n  ) {}\n\n  /**\n   * True if the value is empty and there are no children\n   */\n  isEmpty(): boolean {\n    return this.value === null && this.children.isEmpty();\n  }\n\n  /**\n   * Given a path and predicate, return the first node and the path to that node\n   * where the predicate returns true.\n   *\n   * TODO Do a perf test -- If we're creating a bunch of `{path: value:}`\n   * objects on the way back out, it may be better to pass down a pathSoFar obj.\n   *\n   * @param relativePath - The remainder of the path\n   * @param predicate - The predicate to satisfy to return a node\n   */\n  findRootMostMatchingPathAndValue(\n    relativePath: Path,\n    predicate: (a: T) => boolean\n  ): { path: Path; value: T } | null {\n    if (this.value != null && predicate(this.value)) {\n      return { path: newEmptyPath(), value: this.value };\n    } else {\n      if (pathIsEmpty(relativePath)) {\n        return null;\n      } else {\n        const front = pathGetFront(relativePath);\n        const child = this.children.get(front);\n        if (child !== null) {\n          const childExistingPathAndValue =\n            child.findRootMostMatchingPathAndValue(\n              pathPopFront(relativePath),\n              predicate\n            );\n          if (childExistingPathAndValue != null) {\n            const fullPath = pathChild(\n              new Path(front),\n              childExistingPathAndValue.path\n            );\n            return { path: fullPath, value: childExistingPathAndValue.value };\n          } else {\n            return null;\n          }\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n\n  /**\n   * Find, if it exists, the shortest subpath of the given path that points a defined\n   * value in the tree\n   */\n  findRootMostValueAndPath(\n    relativePath: Path\n  ): { path: Path; value: T } | null {\n    return this.findRootMostMatchingPathAndValue(relativePath, () => true);\n  }\n\n  /**\n   * @returns The subtree at the given path\n   */\n  subtree(relativePath: Path): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return this;\n    } else {\n      const front = pathGetFront(relativePath);\n      const childTree = this.children.get(front);\n      if (childTree !== null) {\n        return childTree.subtree(pathPopFront(relativePath));\n      } else {\n        return new ImmutableTree<T>(null);\n      }\n    }\n  }\n\n  /**\n   * Sets a value at the specified path.\n   *\n   * @param relativePath - Path to set value at.\n   * @param toSet - Value to set.\n   * @returns Resulting tree.\n   */\n  set(relativePath: Path, toSet: T | null): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return new ImmutableTree(toSet, this.children);\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front) || new ImmutableTree<T>(null);\n      const newChild = child.set(pathPopFront(relativePath), toSet);\n      const newChildren = this.children.insert(front, newChild);\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n\n  /**\n   * Removes the value at the specified path.\n   *\n   * @param relativePath - Path to value to remove.\n   * @returns Resulting tree.\n   */\n  remove(relativePath: Path): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      if (this.children.isEmpty()) {\n        return new ImmutableTree<T>(null);\n      } else {\n        return new ImmutableTree(null, this.children);\n      }\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front);\n      if (child) {\n        const newChild = child.remove(pathPopFront(relativePath));\n        let newChildren;\n        if (newChild.isEmpty()) {\n          newChildren = this.children.remove(front);\n        } else {\n          newChildren = this.children.insert(front, newChild);\n        }\n        if (this.value === null && newChildren.isEmpty()) {\n          return new ImmutableTree<T>(null);\n        } else {\n          return new ImmutableTree(this.value, newChildren);\n        }\n      } else {\n        return this;\n      }\n    }\n  }\n\n  /**\n   * Gets a value from the tree.\n   *\n   * @param relativePath - Path to get value for.\n   * @returns Value at path, or null.\n   */\n  get(relativePath: Path): T | null {\n    if (pathIsEmpty(relativePath)) {\n      return this.value;\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front);\n      if (child) {\n        return child.get(pathPopFront(relativePath));\n      } else {\n        return null;\n      }\n    }\n  }\n\n  /**\n   * Replace the subtree at the specified path with the given new tree.\n   *\n   * @param relativePath - Path to replace subtree for.\n   * @param newTree - New tree.\n   * @returns Resulting tree.\n   */\n  setTree(relativePath: Path, newTree: ImmutableTree<T>): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return newTree;\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front) || new ImmutableTree<T>(null);\n      const newChild = child.setTree(pathPopFront(relativePath), newTree);\n      let newChildren;\n      if (newChild.isEmpty()) {\n        newChildren = this.children.remove(front);\n      } else {\n        newChildren = this.children.insert(front, newChild);\n      }\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n\n  /**\n   * Performs a depth first fold on this tree. Transforms a tree into a single\n   * value, given a function that operates on the path to a node, an optional\n   * current value, and a map of child names to folded subtrees\n   */\n  fold<V>(fn: (path: Path, value: T, children: { [k: string]: V }) => V): V {\n    return this.fold_(newEmptyPath(), fn);\n  }\n\n  /**\n   * Recursive helper for public-facing fold() method\n   */\n  private fold_<V>(\n    pathSoFar: Path,\n    fn: (path: Path, value: T | null, children: { [k: string]: V }) => V\n  ): V {\n    const accum: { [k: string]: V } = {};\n    this.children.inorderTraversal(\n      (childKey: string, childTree: ImmutableTree<T>) => {\n        accum[childKey] = childTree.fold_(pathChild(pathSoFar, childKey), fn);\n      }\n    );\n    return fn(pathSoFar, this.value, accum);\n  }\n\n  /**\n   * Find the first matching value on the given path. Return the result of applying f to it.\n   */\n  findOnPath<V>(path: Path, f: (path: Path, value: T) => V | null): V | null {\n    return this.findOnPath_(path, newEmptyPath(), f);\n  }\n\n  private findOnPath_<V>(\n    pathToFollow: Path,\n    pathSoFar: Path,\n    f: (path: Path, value: T) => V | null\n  ): V | null {\n    const result = this.value ? f(pathSoFar, this.value) : false;\n    if (result) {\n      return result;\n    } else {\n      if (pathIsEmpty(pathToFollow)) {\n        return null;\n      } else {\n        const front = pathGetFront(pathToFollow)!;\n        const nextChild = this.children.get(front);\n        if (nextChild) {\n          return nextChild.findOnPath_(\n            pathPopFront(pathToFollow),\n            pathChild(pathSoFar, front),\n            f\n          );\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n\n  foreachOnPath(\n    path: Path,\n    f: (path: Path, value: T) => void\n  ): ImmutableTree<T> {\n    return this.foreachOnPath_(path, newEmptyPath(), f);\n  }\n\n  private foreachOnPath_(\n    pathToFollow: Path,\n    currentRelativePath: Path,\n    f: (path: Path, value: T) => void\n  ): ImmutableTree<T> {\n    if (pathIsEmpty(pathToFollow)) {\n      return this;\n    } else {\n      if (this.value) {\n        f(currentRelativePath, this.value);\n      }\n      const front = pathGetFront(pathToFollow);\n      const nextChild = this.children.get(front);\n      if (nextChild) {\n        return nextChild.foreachOnPath_(\n          pathPopFront(pathToFollow),\n          pathChild(currentRelativePath, front),\n          f\n        );\n      } else {\n        return new ImmutableTree<T>(null);\n      }\n    }\n  }\n\n  /**\n   * Calls the given function for each node in the tree that has a value.\n   *\n   * @param f - A function to be called with the path from the root of the tree to\n   * a node, and the value at that node. Called in depth-first order.\n   */\n  foreach(f: (path: Path, value: T) => void) {\n    this.foreach_(newEmptyPath(), f);\n  }\n\n  private foreach_(\n    currentRelativePath: Path,\n    f: (path: Path, value: T) => void\n  ) {\n    this.children.inorderTraversal((childName, childTree) => {\n      childTree.foreach_(pathChild(currentRelativePath, childName), f);\n    });\n    if (this.value) {\n      f(currentRelativePath, this.value);\n    }\n  }\n\n  foreachChild(f: (name: string, value: T) => void) {\n    this.children.inorderTraversal(\n      (childName: string, childTree: ImmutableTree<T>) => {\n        if (childTree.value) {\n          f(childName, childTree.value);\n        }\n      }\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport {\n  newEmptyPath,\n  Path,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\n\nimport { newOperationSourceUser, Operation, OperationType } from './Operation';\n\nexport class AckUserWrite implements Operation {\n  /** @inheritDoc */\n  type = OperationType.ACK_USER_WRITE;\n\n  /** @inheritDoc */\n  source = newOperationSourceUser();\n\n  /**\n   * @param affectedTree - A tree containing true for each affected path. Affected paths can't overlap.\n   */\n  constructor(\n    /** @inheritDoc */ public path: Path,\n    /** @inheritDoc */ public affectedTree: ImmutableTree<boolean>,\n    /** @inheritDoc */ public revert: boolean\n  ) {}\n  operationForChild(childName: string): AckUserWrite {\n    if (!pathIsEmpty(this.path)) {\n      assert(\n        pathGetFront(this.path) === childName,\n        'operationForChild called for unrelated child.'\n      );\n      return new AckUserWrite(\n        pathPopFront(this.path),\n        this.affectedTree,\n        this.revert\n      );\n    } else if (this.affectedTree.value != null) {\n      assert(\n        this.affectedTree.children.isEmpty(),\n        'affectedTree should not have overlapping affected paths.'\n      );\n      // All child locations are affected as well; just return same operation.\n      return this;\n    } else {\n      const childTree = this.affectedTree.subtree(new Path(childName));\n      return new AckUserWrite(newEmptyPath(), childTree, this.revert);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\nimport { newEmptyPath, Path, pathIsEmpty, pathPopFront } from '../util/Path';\n\nimport { Operation, OperationSource, OperationType } from './Operation';\n\nexport class Overwrite implements Operation {\n  /** @inheritDoc */\n  type = OperationType.OVERWRITE;\n\n  constructor(\n    public source: OperationSource,\n    public path: Path,\n    public snap: Node\n  ) {}\n\n  operationForChild(childName: string): Overwrite {\n    if (pathIsEmpty(this.path)) {\n      return new Overwrite(\n        this.source,\n        newEmptyPath(),\n        this.snap.getImmediateChild(childName)\n      );\n    } else {\n      return new Overwrite(this.source, pathPopFront(this.path), this.snap);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Node } from '../snap/Node';\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport {\n  newEmptyPath,\n  Path,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\n\nimport { Operation, OperationSource, OperationType } from './Operation';\nimport { Overwrite } from './Overwrite';\n\nexport class Merge implements Operation {\n  /** @inheritDoc */\n  type = OperationType.MERGE;\n\n  constructor(\n    /** @inheritDoc */ public source: OperationSource,\n    /** @inheritDoc */ public path: Path,\n    /** @inheritDoc */ public children: ImmutableTree<Node>\n  ) {}\n  operationForChild(childName: string): Operation {\n    if (pathIsEmpty(this.path)) {\n      const childTree = this.children.subtree(new Path(childName));\n      if (childTree.isEmpty()) {\n        // This child is unaffected\n        return null;\n      } else if (childTree.value) {\n        // We have a snapshot for the child in question.  This becomes an overwrite of the child.\n        return new Overwrite(this.source, newEmptyPath(), childTree.value);\n      } else {\n        // This is a merge at a deeper level\n        return new Merge(this.source, newEmptyPath(), childTree);\n      }\n    } else {\n      assert(\n        pathGetFront(this.path) === childName,\n        \"Can't get a merge for a child not on the path of the operation\"\n      );\n      return new Merge(this.source, pathPopFront(this.path), this.children);\n    }\n  }\n  toString(): string {\n    return (\n      'Operation(' +\n      this.path +\n      ': ' +\n      this.source.toString() +\n      ' merge: ' +\n      this.children.toString() +\n      ')'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\nimport { Path, pathGetFront, pathIsEmpty } from '../util/Path';\n\n/**\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\n * whether a node potentially had children removed due to a filter.\n */\nexport class CacheNode {\n  constructor(\n    private node_: Node,\n    private fullyInitialized_: boolean,\n    private filtered_: boolean\n  ) {}\n\n  /**\n   * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\n   */\n  isFullyInitialized(): boolean {\n    return this.fullyInitialized_;\n  }\n\n  /**\n   * Returns whether this node is potentially missing children due to a filter applied to the node\n   */\n  isFiltered(): boolean {\n    return this.filtered_;\n  }\n\n  isCompleteForPath(path: Path): boolean {\n    if (pathIsEmpty(path)) {\n      return this.isFullyInitialized() && !this.filtered_;\n    }\n\n    const childKey = pathGetFront(path);\n    return this.isCompleteForChild(childKey);\n  }\n\n  isCompleteForChild(key: string): boolean {\n    return (\n      (this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key)\n    );\n  }\n\n  getNode(): Node {\n    return this.node_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assertionError } from '@firebase/util';\n\nimport { Index } from '../snap/indexes/Index';\nimport { NamedNode, Node } from '../snap/Node';\n\nimport { Change, ChangeType, changeChildMoved } from './Change';\nimport { Event } from './Event';\nimport { EventRegistration, QueryContext } from './EventRegistration';\n\n/**\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\n * for details.\n *\n */\nexport class EventGenerator {\n  index_: Index;\n\n  constructor(public query_: QueryContext) {\n    this.index_ = this.query_._queryParams.getIndex();\n  }\n}\n\n/**\n * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\n * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\n *\n * Notes:\n *  - child_moved events will be synthesized at this time for any child_changed events that affect\n *    our index.\n *  - prevName will be calculated based on the index ordering.\n */\nexport function eventGeneratorGenerateEventsForChanges(\n  eventGenerator: EventGenerator,\n  changes: Change[],\n  eventCache: Node,\n  eventRegistrations: EventRegistration[]\n): Event[] {\n  const events: Event[] = [];\n  const moves: Change[] = [];\n\n  changes.forEach(change => {\n    if (\n      change.type === ChangeType.CHILD_CHANGED &&\n      eventGenerator.index_.indexedValueChanged(\n        change.oldSnap as Node,\n        change.snapshotNode\n      )\n    ) {\n      moves.push(changeChildMoved(change.childName, change.snapshotNode));\n    }\n  });\n\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_REMOVED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_ADDED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_MOVED,\n    moves,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_CHANGED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.VALUE,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n\n  return events;\n}\n\n/**\n * Given changes of a single change type, generate the corresponding events.\n */\nfunction eventGeneratorGenerateEventsForType(\n  eventGenerator: EventGenerator,\n  events: Event[],\n  eventType: string,\n  changes: Change[],\n  registrations: EventRegistration[],\n  eventCache: Node\n) {\n  const filteredChanges = changes.filter(change => change.type === eventType);\n\n  filteredChanges.sort((a, b) =>\n    eventGeneratorCompareChanges(eventGenerator, a, b)\n  );\n  filteredChanges.forEach(change => {\n    const materializedChange = eventGeneratorMaterializeSingleChange(\n      eventGenerator,\n      change,\n      eventCache\n    );\n    registrations.forEach(registration => {\n      if (registration.respondsTo(change.type)) {\n        events.push(\n          registration.createEvent(materializedChange, eventGenerator.query_)\n        );\n      }\n    });\n  });\n}\n\nfunction eventGeneratorMaterializeSingleChange(\n  eventGenerator: EventGenerator,\n  change: Change,\n  eventCache: Node\n): Change {\n  if (change.type === 'value' || change.type === 'child_removed') {\n    return change;\n  } else {\n    change.prevName = eventCache.getPredecessorChildName(\n      change.childName,\n      change.snapshotNode,\n      eventGenerator.index_\n    );\n    return change;\n  }\n}\n\nfunction eventGeneratorCompareChanges(\n  eventGenerator: EventGenerator,\n  a: Change,\n  b: Change\n) {\n  if (a.childName == null || b.childName == null) {\n    throw assertionError('Should only compare child_ events.');\n  }\n  const aWrapped = new NamedNode(a.childName, a.snapshotNode);\n  const bWrapped = new NamedNode(b.childName, b.snapshotNode);\n  return eventGenerator.index_.compare(aWrapped, bWrapped);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\n\nimport { CacheNode } from './CacheNode';\n\n/**\n * Stores the data we have cached for a view.\n *\n * serverSnap is the cached server data, eventSnap is the cached event data (server data plus any local writes).\n */\nexport interface ViewCache {\n  readonly eventCache: CacheNode;\n  readonly serverCache: CacheNode;\n}\n\nexport function newViewCache(\n  eventCache: CacheNode,\n  serverCache: CacheNode\n): ViewCache {\n  return { eventCache, serverCache };\n}\n\nexport function viewCacheUpdateEventSnap(\n  viewCache: ViewCache,\n  eventSnap: Node,\n  complete: boolean,\n  filtered: boolean\n): ViewCache {\n  return newViewCache(\n    new CacheNode(eventSnap, complete, filtered),\n    viewCache.serverCache\n  );\n}\n\nexport function viewCacheUpdateServerSnap(\n  viewCache: ViewCache,\n  serverSnap: Node,\n  complete: boolean,\n  filtered: boolean\n): ViewCache {\n  return newViewCache(\n    viewCache.eventCache,\n    new CacheNode(serverSnap, complete, filtered)\n  );\n}\n\nexport function viewCacheGetCompleteEventSnap(\n  viewCache: ViewCache\n): Node | null {\n  return viewCache.eventCache.isFullyInitialized()\n    ? viewCache.eventCache.getNode()\n    : null;\n}\n\nexport function viewCacheGetCompleteServerSnap(\n  viewCache: ViewCache\n): Node | null {\n  return viewCache.serverCache.isFullyInitialized()\n    ? viewCache.serverCache.getNode()\n    : null;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { NamedNode, Node } from './snap/Node';\nimport { ImmutableTree } from './util/ImmutableTree';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathIsEmpty\n} from './util/Path';\nimport { each } from './util/util';\n\n/**\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\n * to reflect the write added.\n */\nexport class CompoundWrite {\n  constructor(public writeTree_: ImmutableTree<Node>) {}\n\n  static empty(): CompoundWrite {\n    return new CompoundWrite(new ImmutableTree(null));\n  }\n}\n\nexport function compoundWriteAddWrite(\n  compoundWrite: CompoundWrite,\n  path: Path,\n  node: Node\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return new CompoundWrite(new ImmutableTree(node));\n  } else {\n    const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n    if (rootmost != null) {\n      const rootMostPath = rootmost.path;\n      let value = rootmost.value;\n      const relativePath = newRelativePath(rootMostPath, path);\n      value = value.updateChild(relativePath, node);\n      return new CompoundWrite(\n        compoundWrite.writeTree_.set(rootMostPath, value)\n      );\n    } else {\n      const subtree = new ImmutableTree(node);\n      const newWriteTree = compoundWrite.writeTree_.setTree(path, subtree);\n      return new CompoundWrite(newWriteTree);\n    }\n  }\n}\n\nexport function compoundWriteAddWrites(\n  compoundWrite: CompoundWrite,\n  path: Path,\n  updates: { [name: string]: Node }\n): CompoundWrite {\n  let newWrite = compoundWrite;\n  each(updates, (childKey: string, node: Node) => {\n    newWrite = compoundWriteAddWrite(newWrite, pathChild(path, childKey), node);\n  });\n  return newWrite;\n}\n\n/**\n * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\n * location, which must be removed by calling this method with that path.\n *\n * @param compoundWrite - The CompoundWrite to remove.\n * @param path - The path at which a write and all deeper writes should be removed\n * @returns The new CompoundWrite with the removed path\n */\nexport function compoundWriteRemoveWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return CompoundWrite.empty();\n  } else {\n    const newWriteTree = compoundWrite.writeTree_.setTree(\n      path,\n      new ImmutableTree<Node>(null)\n    );\n    return new CompoundWrite(newWriteTree);\n  }\n}\n\n/**\n * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\n * considered \"complete\".\n *\n * @param compoundWrite - The CompoundWrite to check.\n * @param path - The path to check for\n * @returns Whether there is a complete write at that path\n */\nexport function compoundWriteHasCompleteWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): boolean {\n  return compoundWriteGetCompleteNode(compoundWrite, path) != null;\n}\n\n/**\n * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\n * writes from deeper paths, but will return child nodes from a more shallow path.\n *\n * @param compoundWrite - The CompoundWrite to get the node from.\n * @param path - The path to get a complete write\n * @returns The node if complete at that path, or null otherwise.\n */\nexport function compoundWriteGetCompleteNode(\n  compoundWrite: CompoundWrite,\n  path: Path\n): Node | null {\n  const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n  if (rootmost != null) {\n    return compoundWrite.writeTree_\n      .get(rootmost.path)\n      .getChild(newRelativePath(rootmost.path, path));\n  } else {\n    return null;\n  }\n}\n\n/**\n * Returns all children that are guaranteed to be a complete overwrite.\n *\n * @param compoundWrite - The CompoundWrite to get children from.\n * @returns A list of all complete children.\n */\nexport function compoundWriteGetCompleteChildren(\n  compoundWrite: CompoundWrite\n): NamedNode[] {\n  const children: NamedNode[] = [];\n  const node = compoundWrite.writeTree_.value;\n  if (node != null) {\n    // If it's a leaf node, it has no children; so nothing to do.\n    if (!node.isLeafNode()) {\n      (node as ChildrenNode).forEachChild(\n        PRIORITY_INDEX,\n        (childName, childNode) => {\n          children.push(new NamedNode(childName, childNode));\n        }\n      );\n    }\n  } else {\n    compoundWrite.writeTree_.children.inorderTraversal(\n      (childName, childTree) => {\n        if (childTree.value != null) {\n          children.push(new NamedNode(childName, childTree.value));\n        }\n      }\n    );\n  }\n  return children;\n}\n\nexport function compoundWriteChildCompoundWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return compoundWrite;\n  } else {\n    const shadowingNode = compoundWriteGetCompleteNode(compoundWrite, path);\n    if (shadowingNode != null) {\n      return new CompoundWrite(new ImmutableTree(shadowingNode));\n    } else {\n      return new CompoundWrite(compoundWrite.writeTree_.subtree(path));\n    }\n  }\n}\n\n/**\n * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\n * @returns Whether this CompoundWrite is empty\n */\nexport function compoundWriteIsEmpty(compoundWrite: CompoundWrite): boolean {\n  return compoundWrite.writeTree_.isEmpty();\n}\n\n/**\n * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\n * node\n * @param node - The node to apply this CompoundWrite to\n * @returns The node with all writes applied\n */\nexport function compoundWriteApply(\n  compoundWrite: CompoundWrite,\n  node: Node\n): Node {\n  return applySubtreeWrite(newEmptyPath(), compoundWrite.writeTree_, node);\n}\n\nfunction applySubtreeWrite(\n  relativePath: Path,\n  writeTree: ImmutableTree<Node>,\n  node: Node\n): Node {\n  if (writeTree.value != null) {\n    // Since there a write is always a leaf, we're done here\n    return node.updateChild(relativePath, writeTree.value);\n  } else {\n    let priorityWrite = null;\n    writeTree.children.inorderTraversal((childKey, childTree) => {\n      if (childKey === '.priority') {\n        // Apply priorities at the end so we don't update priorities for either empty nodes or forget\n        // to apply priorities to empty nodes that are later filled\n        assert(\n          childTree.value !== null,\n          'Priority writes must always be leaf nodes'\n        );\n        priorityWrite = childTree.value;\n      } else {\n        node = applySubtreeWrite(\n          pathChild(relativePath, childKey),\n          childTree,\n          node\n        );\n      }\n    });\n    // If there was a priority write, we only apply it if the node is not empty\n    if (!node.getChild(relativePath).isEmpty() && priorityWrite !== null) {\n      node = node.updateChild(\n        pathChild(relativePath, '.priority'),\n        priorityWrite\n      );\n    }\n    return node;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError, safeGet } from '@firebase/util';\n\nimport {\n  CompoundWrite,\n  compoundWriteAddWrite,\n  compoundWriteAddWrites,\n  compoundWriteApply,\n  compoundWriteChildCompoundWrite,\n  compoundWriteGetCompleteChildren,\n  compoundWriteGetCompleteNode,\n  compoundWriteHasCompleteWrite,\n  compoundWriteIsEmpty,\n  compoundWriteRemoveWrite\n} from './CompoundWrite';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Index } from './snap/indexes/Index';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { NamedNode, Node } from './snap/Node';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathContains,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from './util/Path';\nimport { each } from './util/util';\nimport { CacheNode } from './view/CacheNode';\n\n/**\n * Defines a single user-initiated write operation. May be the result of a set(), transaction(), or update() call. In\n * the case of a set() or transaction, snap wil be non-null.  In the case of an update(), children will be non-null.\n */\nexport interface WriteRecord {\n  writeId: number;\n  path: Path;\n  snap?: Node | null;\n  children?: { [k: string]: Node } | null;\n  visible: boolean;\n}\n\n/**\n * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\n *\n */\nexport function writeTreeChildWrites(\n  writeTree: WriteTree,\n  path: Path\n): WriteTreeRef {\n  return newWriteTreeRef(path, writeTree);\n}\n\n/**\n * Record a new overwrite from user code.\n *\n * @param visible - This is set to false by some transactions. It should be excluded from event caches\n */\nexport function writeTreeAddOverwrite(\n  writeTree: WriteTree,\n  path: Path,\n  snap: Node,\n  writeId: number,\n  visible?: boolean\n) {\n  assert(\n    writeId > writeTree.lastWriteId,\n    'Stacking an older write on top of newer ones'\n  );\n  if (visible === undefined) {\n    visible = true;\n  }\n  writeTree.allWrites.push({\n    path,\n    snap,\n    writeId,\n    visible\n  });\n\n  if (visible) {\n    writeTree.visibleWrites = compoundWriteAddWrite(\n      writeTree.visibleWrites,\n      path,\n      snap\n    );\n  }\n  writeTree.lastWriteId = writeId;\n}\n\n/**\n * Record a new merge from user code.\n */\nexport function writeTreeAddMerge(\n  writeTree: WriteTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  writeId: number\n) {\n  assert(\n    writeId > writeTree.lastWriteId,\n    'Stacking an older merge on top of newer ones'\n  );\n  writeTree.allWrites.push({\n    path,\n    children: changedChildren,\n    writeId,\n    visible: true\n  });\n\n  writeTree.visibleWrites = compoundWriteAddWrites(\n    writeTree.visibleWrites,\n    path,\n    changedChildren\n  );\n  writeTree.lastWriteId = writeId;\n}\n\nexport function writeTreeGetWrite(\n  writeTree: WriteTree,\n  writeId: number\n): WriteRecord | null {\n  for (let i = 0; i < writeTree.allWrites.length; i++) {\n    const record = writeTree.allWrites[i];\n    if (record.writeId === writeId) {\n      return record;\n    }\n  }\n  return null;\n}\n\n/**\n * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\n * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\n *\n * @returns true if the write may have been visible (meaning we'll need to reevaluate / raise\n * events as a result).\n */\nexport function writeTreeRemoveWrite(\n  writeTree: WriteTree,\n  writeId: number\n): boolean {\n  // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\n  // out of order.\n  //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\n  //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\n\n  const idx = writeTree.allWrites.findIndex(s => {\n    return s.writeId === writeId;\n  });\n  assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\n  const writeToRemove = writeTree.allWrites[idx];\n  writeTree.allWrites.splice(idx, 1);\n\n  let removedWriteWasVisible = writeToRemove.visible;\n  let removedWriteOverlapsWithOtherWrites = false;\n\n  let i = writeTree.allWrites.length - 1;\n\n  while (removedWriteWasVisible && i >= 0) {\n    const currentWrite = writeTree.allWrites[i];\n    if (currentWrite.visible) {\n      if (\n        i >= idx &&\n        writeTreeRecordContainsPath_(currentWrite, writeToRemove.path)\n      ) {\n        // The removed write was completely shadowed by a subsequent write.\n        removedWriteWasVisible = false;\n      } else if (pathContains(writeToRemove.path, currentWrite.path)) {\n        // Either we're covering some writes or they're covering part of us (depending on which came first).\n        removedWriteOverlapsWithOtherWrites = true;\n      }\n    }\n    i--;\n  }\n\n  if (!removedWriteWasVisible) {\n    return false;\n  } else if (removedWriteOverlapsWithOtherWrites) {\n    // There's some shadowing going on. Just rebuild the visible writes from scratch.\n    writeTreeResetTree_(writeTree);\n    return true;\n  } else {\n    // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\n    if (writeToRemove.snap) {\n      writeTree.visibleWrites = compoundWriteRemoveWrite(\n        writeTree.visibleWrites,\n        writeToRemove.path\n      );\n    } else {\n      const children = writeToRemove.children;\n      each(children, (childName: string) => {\n        writeTree.visibleWrites = compoundWriteRemoveWrite(\n          writeTree.visibleWrites,\n          pathChild(writeToRemove.path, childName)\n        );\n      });\n    }\n    return true;\n  }\n}\n\nfunction writeTreeRecordContainsPath_(\n  writeRecord: WriteRecord,\n  path: Path\n): boolean {\n  if (writeRecord.snap) {\n    return pathContains(writeRecord.path, path);\n  } else {\n    for (const childName in writeRecord.children) {\n      if (\n        writeRecord.children.hasOwnProperty(childName) &&\n        pathContains(pathChild(writeRecord.path, childName), path)\n      ) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n\n/**\n * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\n */\nfunction writeTreeResetTree_(writeTree: WriteTree) {\n  writeTree.visibleWrites = writeTreeLayerTree_(\n    writeTree.allWrites,\n    writeTreeDefaultFilter_,\n    newEmptyPath()\n  );\n  if (writeTree.allWrites.length > 0) {\n    writeTree.lastWriteId =\n      writeTree.allWrites[writeTree.allWrites.length - 1].writeId;\n  } else {\n    writeTree.lastWriteId = -1;\n  }\n}\n\n/**\n * The default filter used when constructing the tree. Keep everything that's visible.\n */\nfunction writeTreeDefaultFilter_(write: WriteRecord) {\n  return write.visible;\n}\n\n/**\n * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\n * event data at that path.\n */\nfunction writeTreeLayerTree_(\n  writes: WriteRecord[],\n  filter: (w: WriteRecord) => boolean,\n  treeRoot: Path\n): CompoundWrite {\n  let compoundWrite = CompoundWrite.empty();\n  for (let i = 0; i < writes.length; ++i) {\n    const write = writes[i];\n    // Theory, a later set will either:\n    // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\n    // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\n    if (filter(write)) {\n      const writePath = write.path;\n      let relativePath: Path;\n      if (write.snap) {\n        if (pathContains(treeRoot, writePath)) {\n          relativePath = newRelativePath(treeRoot, writePath);\n          compoundWrite = compoundWriteAddWrite(\n            compoundWrite,\n            relativePath,\n            write.snap\n          );\n        } else if (pathContains(writePath, treeRoot)) {\n          relativePath = newRelativePath(writePath, treeRoot);\n          compoundWrite = compoundWriteAddWrite(\n            compoundWrite,\n            newEmptyPath(),\n            write.snap.getChild(relativePath)\n          );\n        } else {\n          // There is no overlap between root path and write path, ignore write\n        }\n      } else if (write.children) {\n        if (pathContains(treeRoot, writePath)) {\n          relativePath = newRelativePath(treeRoot, writePath);\n          compoundWrite = compoundWriteAddWrites(\n            compoundWrite,\n            relativePath,\n            write.children\n          );\n        } else if (pathContains(writePath, treeRoot)) {\n          relativePath = newRelativePath(writePath, treeRoot);\n          if (pathIsEmpty(relativePath)) {\n            compoundWrite = compoundWriteAddWrites(\n              compoundWrite,\n              newEmptyPath(),\n              write.children\n            );\n          } else {\n            const child = safeGet(write.children, pathGetFront(relativePath));\n            if (child) {\n              // There exists a child in this node that matches the root path\n              const deepNode = child.getChild(pathPopFront(relativePath));\n              compoundWrite = compoundWriteAddWrite(\n                compoundWrite,\n                newEmptyPath(),\n                deepNode\n              );\n            }\n          }\n        } else {\n          // There is no overlap between root path and write path, ignore write\n        }\n      } else {\n        throw assertionError('WriteRecord should have .snap or .children');\n      }\n    }\n  }\n  return compoundWrite;\n}\n\n/**\n * Return a complete snapshot for the given path if there's visible write data at that path, else null.\n * No server data is considered.\n *\n */\nexport function writeTreeGetCompleteWriteData(\n  writeTree: WriteTree,\n  path: Path\n): Node | null {\n  return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n}\n\n/**\n * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\n * writes), attempt to calculate a complete snapshot for the given path\n *\n * @param writeIdsToExclude - An optional set to be excluded\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\n */\nexport function writeTreeCalcCompleteEventCache(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerCache: Node | null,\n  writeIdsToExclude?: number[],\n  includeHiddenWrites?: boolean\n): Node | null {\n  if (!writeIdsToExclude && !includeHiddenWrites) {\n    const shadowingNode = compoundWriteGetCompleteNode(\n      writeTree.visibleWrites,\n      treePath\n    );\n    if (shadowingNode != null) {\n      return shadowingNode;\n    } else {\n      const subMerge = compoundWriteChildCompoundWrite(\n        writeTree.visibleWrites,\n        treePath\n      );\n      if (compoundWriteIsEmpty(subMerge)) {\n        return completeServerCache;\n      } else if (\n        completeServerCache == null &&\n        !compoundWriteHasCompleteWrite(subMerge, newEmptyPath())\n      ) {\n        // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\n        return null;\n      } else {\n        const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n        return compoundWriteApply(subMerge, layeredCache);\n      }\n    }\n  } else {\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    if (!includeHiddenWrites && compoundWriteIsEmpty(merge)) {\n      return completeServerCache;\n    } else {\n      // If the server cache is null, and we don't have a complete cache, we need to return null\n      if (\n        !includeHiddenWrites &&\n        completeServerCache == null &&\n        !compoundWriteHasCompleteWrite(merge, newEmptyPath())\n      ) {\n        return null;\n      } else {\n        const filter = function (write: WriteRecord) {\n          return (\n            (write.visible || includeHiddenWrites) &&\n            (!writeIdsToExclude ||\n              !~writeIdsToExclude.indexOf(write.writeId)) &&\n            (pathContains(write.path, treePath) ||\n              pathContains(treePath, write.path))\n          );\n        };\n        const mergeAtPath = writeTreeLayerTree_(\n          writeTree.allWrites,\n          filter,\n          treePath\n        );\n        const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n        return compoundWriteApply(mergeAtPath, layeredCache);\n      }\n    }\n  }\n}\n\n/**\n * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\n * Used when creating new views, to pre-fill their complete event children snapshot.\n */\nexport function writeTreeCalcCompleteEventChildren(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerChildren: ChildrenNode | null\n) {\n  let completeChildren = ChildrenNode.EMPTY_NODE as Node;\n  const topLevelSet = compoundWriteGetCompleteNode(\n    writeTree.visibleWrites,\n    treePath\n  );\n  if (topLevelSet) {\n    if (!topLevelSet.isLeafNode()) {\n      // we're shadowing everything. Return the children.\n      topLevelSet.forEachChild(PRIORITY_INDEX, (childName, childSnap) => {\n        completeChildren = completeChildren.updateImmediateChild(\n          childName,\n          childSnap\n        );\n      });\n    }\n    return completeChildren;\n  } else if (completeServerChildren) {\n    // Layer any children we have on top of this\n    // We know we don't have a top-level set, so just enumerate existing children\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    completeServerChildren.forEachChild(\n      PRIORITY_INDEX,\n      (childName, childNode) => {\n        const node = compoundWriteApply(\n          compoundWriteChildCompoundWrite(merge, new Path(childName)),\n          childNode\n        );\n        completeChildren = completeChildren.updateImmediateChild(\n          childName,\n          node\n        );\n      }\n    );\n    // Add any complete children we have from the set\n    compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\n      completeChildren = completeChildren.updateImmediateChild(\n        namedNode.name,\n        namedNode.node\n      );\n    });\n    return completeChildren;\n  } else {\n    // We don't have anything to layer on top of. Layer on any children we have\n    // Note that we can return an empty snap if we have a defined delete\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\n      completeChildren = completeChildren.updateImmediateChild(\n        namedNode.name,\n        namedNode.node\n      );\n    });\n    return completeChildren;\n  }\n}\n\n/**\n * Given that the underlying server data has updated, determine what, if anything, needs to be\n * applied to the event cache.\n *\n * Possibilities:\n *\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n *\n * 2. Some write is completely shadowing. No events to be raised\n *\n * 3. Is partially shadowed. Events\n *\n * Either existingEventSnap or existingServerSnap must exist\n */\nexport function writeTreeCalcEventCacheAfterServerOverwrite(\n  writeTree: WriteTree,\n  treePath: Path,\n  childPath: Path,\n  existingEventSnap: Node | null,\n  existingServerSnap: Node | null\n): Node | null {\n  assert(\n    existingEventSnap || existingServerSnap,\n    'Either existingEventSnap or existingServerSnap must exist'\n  );\n  const path = pathChild(treePath, childPath);\n  if (compoundWriteHasCompleteWrite(writeTree.visibleWrites, path)) {\n    // At this point we can probably guarantee that we're in case 2, meaning no events\n    // May need to check visibility while doing the findRootMostValueAndPath call\n    return null;\n  } else {\n    // No complete shadowing. We're either partially shadowing or not shadowing at all.\n    const childMerge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      path\n    );\n    if (compoundWriteIsEmpty(childMerge)) {\n      // We're not shadowing at all. Case 1\n      return existingServerSnap.getChild(childPath);\n    } else {\n      // This could be more efficient if the serverNode + updates doesn't change the eventSnap\n      // However this is tricky to find out, since user updates don't necessary change the server\n      // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\n      // adds nodes, but doesn't change any existing writes. It is therefore not enough to\n      // only check if the updates change the serverNode.\n      // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\n      return compoundWriteApply(\n        childMerge,\n        existingServerSnap.getChild(childPath)\n      );\n    }\n  }\n}\n\n/**\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\n * complete child for this ChildKey.\n */\nexport function writeTreeCalcCompleteChild(\n  writeTree: WriteTree,\n  treePath: Path,\n  childKey: string,\n  existingServerSnap: CacheNode\n): Node | null {\n  const path = pathChild(treePath, childKey);\n  const shadowingNode = compoundWriteGetCompleteNode(\n    writeTree.visibleWrites,\n    path\n  );\n  if (shadowingNode != null) {\n    return shadowingNode;\n  } else {\n    if (existingServerSnap.isCompleteForChild(childKey)) {\n      const childMerge = compoundWriteChildCompoundWrite(\n        writeTree.visibleWrites,\n        path\n      );\n      return compoundWriteApply(\n        childMerge,\n        existingServerSnap.getNode().getImmediateChild(childKey)\n      );\n    } else {\n      return null;\n    }\n  }\n}\n\n/**\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n * a higher path, this will return the child of that write relative to the write and this path.\n * Returns null if there is no write at this path.\n */\nexport function writeTreeShadowingWrite(\n  writeTree: WriteTree,\n  path: Path\n): Node | null {\n  return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n}\n\n/**\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n * the window, but may now be in the window.\n */\nexport function writeTreeCalcIndexedSlice(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerData: Node | null,\n  startPost: NamedNode,\n  count: number,\n  reverse: boolean,\n  index: Index\n): NamedNode[] {\n  let toIterate: Node;\n  const merge = compoundWriteChildCompoundWrite(\n    writeTree.visibleWrites,\n    treePath\n  );\n  const shadowingNode = compoundWriteGetCompleteNode(merge, newEmptyPath());\n  if (shadowingNode != null) {\n    toIterate = shadowingNode;\n  } else if (completeServerData != null) {\n    toIterate = compoundWriteApply(merge, completeServerData);\n  } else {\n    // no children to iterate on\n    return [];\n  }\n  toIterate = toIterate.withIndex(index);\n  if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\n    const nodes = [];\n    const cmp = index.getCompare();\n    const iter = reverse\n      ? (toIterate as ChildrenNode).getReverseIteratorFrom(startPost, index)\n      : (toIterate as ChildrenNode).getIteratorFrom(startPost, index);\n    let next = iter.getNext();\n    while (next && nodes.length < count) {\n      if (cmp(next, startPost) !== 0) {\n        nodes.push(next);\n      }\n      next = iter.getNext();\n    }\n    return nodes;\n  } else {\n    return [];\n  }\n}\n\nexport function newWriteTree(): WriteTree {\n  return {\n    visibleWrites: CompoundWrite.empty(),\n    allWrites: [],\n    lastWriteId: -1\n  };\n}\n\n/**\n * WriteTree tracks all pending user-initiated writes and has methods to calculate the result of merging them\n * with underlying server data (to create \"event cache\" data).  Pending writes are added with addOverwrite()\n * and addMerge(), and removed with removeWrite().\n */\nexport interface WriteTree {\n  /**\n   * A tree tracking the result of applying all visible writes.  This does not include transactions with\n   * applyLocally=false or writes that are completely shadowed by other writes.\n   */\n  visibleWrites: CompoundWrite;\n\n  /**\n   * A list of all pending writes, regardless of visibility and shadowed-ness.  Used to calculate arbitrary\n   * sets of the changed data, such as hidden writes (from transactions) or changes with certain writes excluded (also\n   * used by transactions).\n   */\n  allWrites: WriteRecord[];\n\n  lastWriteId: number;\n}\n\n/**\n * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\n * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\n * can lead to a more expensive calculation.\n *\n * @param writeIdsToExclude - Optional writes to exclude.\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\n */\nexport function writeTreeRefCalcCompleteEventCache(\n  writeTreeRef: WriteTreeRef,\n  completeServerCache: Node | null,\n  writeIdsToExclude?: number[],\n  includeHiddenWrites?: boolean\n): Node | null {\n  return writeTreeCalcCompleteEventCache(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerCache,\n    writeIdsToExclude,\n    includeHiddenWrites\n  );\n}\n\n/**\n * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\n * mix of the given server data and write data.\n *\n */\nexport function writeTreeRefCalcCompleteEventChildren(\n  writeTreeRef: WriteTreeRef,\n  completeServerChildren: ChildrenNode | null\n): ChildrenNode {\n  return writeTreeCalcCompleteEventChildren(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerChildren\n  ) as ChildrenNode;\n}\n\n/**\n * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\n * if anything, needs to be applied to the event cache.\n *\n * Possibilities:\n *\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n *\n * 2. Some write is completely shadowing. No events to be raised\n *\n * 3. Is partially shadowed. Events should be raised\n *\n * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\n *\n *\n */\nexport function writeTreeRefCalcEventCacheAfterServerOverwrite(\n  writeTreeRef: WriteTreeRef,\n  path: Path,\n  existingEventSnap: Node | null,\n  existingServerSnap: Node | null\n): Node | null {\n  return writeTreeCalcEventCacheAfterServerOverwrite(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    path,\n    existingEventSnap,\n    existingServerSnap\n  );\n}\n\n/**\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n * a higher path, this will return the child of that write relative to the write and this path.\n * Returns null if there is no write at this path.\n *\n */\nexport function writeTreeRefShadowingWrite(\n  writeTreeRef: WriteTreeRef,\n  path: Path\n): Node | null {\n  return writeTreeShadowingWrite(\n    writeTreeRef.writeTree,\n    pathChild(writeTreeRef.treePath, path)\n  );\n}\n\n/**\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n * the window, but may now be in the window\n */\nexport function writeTreeRefCalcIndexedSlice(\n  writeTreeRef: WriteTreeRef,\n  completeServerData: Node | null,\n  startPost: NamedNode,\n  count: number,\n  reverse: boolean,\n  index: Index\n): NamedNode[] {\n  return writeTreeCalcIndexedSlice(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerData,\n    startPost,\n    count,\n    reverse,\n    index\n  );\n}\n\n/**\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\n * complete child for this ChildKey.\n */\nexport function writeTreeRefCalcCompleteChild(\n  writeTreeRef: WriteTreeRef,\n  childKey: string,\n  existingServerCache: CacheNode\n): Node | null {\n  return writeTreeCalcCompleteChild(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    childKey,\n    existingServerCache\n  );\n}\n\n/**\n * Return a WriteTreeRef for a child.\n */\nexport function writeTreeRefChild(\n  writeTreeRef: WriteTreeRef,\n  childName: string\n): WriteTreeRef {\n  return newWriteTreeRef(\n    pathChild(writeTreeRef.treePath, childName),\n    writeTreeRef.writeTree\n  );\n}\n\nexport function newWriteTreeRef(\n  path: Path,\n  writeTree: WriteTree\n): WriteTreeRef {\n  return {\n    treePath: path,\n    writeTree\n  };\n}\n\n/**\n * A WriteTreeRef wraps a WriteTree and a path, for convenient access to a particular subtree.  All of the methods\n * just proxy to the underlying WriteTree.\n *\n */\nexport interface WriteTreeRef {\n  /**\n   * The path to this particular write tree ref. Used for calling methods on writeTree_ while exposing a simpler\n   * interface to callers.\n   */\n  readonly treePath: Path;\n\n  /**\n   * * A reference to the actual tree of write data. All methods are pass-through to the tree, but with the appropriate\n   * path prefixed.\n   *\n   * This lets us make cheap references to points in the tree for sync points without having to copy and maintain all of\n   * the data.\n   */\n  readonly writeTree: WriteTree;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError } from '@firebase/util';\n\nimport {\n  Change,\n  ChangeType,\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from './Change';\n\nexport class ChildChangeAccumulator {\n  private readonly changeMap: Map<string, Change> = new Map();\n\n  trackChildChange(change: Change) {\n    const type = change.type;\n    const childKey = change.childName!;\n    assert(\n      type === ChangeType.CHILD_ADDED ||\n        type === ChangeType.CHILD_CHANGED ||\n        type === ChangeType.CHILD_REMOVED,\n      'Only child changes supported for tracking'\n    );\n    assert(\n      childKey !== '.priority',\n      'Only non-priority child changes can be tracked.'\n    );\n    const oldChange = this.changeMap.get(childKey);\n    if (oldChange) {\n      const oldType = oldChange.type;\n      if (\n        type === ChangeType.CHILD_ADDED &&\n        oldType === ChangeType.CHILD_REMOVED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildChanged(\n            childKey,\n            change.snapshotNode,\n            oldChange.snapshotNode\n          )\n        );\n      } else if (\n        type === ChangeType.CHILD_REMOVED &&\n        oldType === ChangeType.CHILD_ADDED\n      ) {\n        this.changeMap.delete(childKey);\n      } else if (\n        type === ChangeType.CHILD_REMOVED &&\n        oldType === ChangeType.CHILD_CHANGED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildRemoved(childKey, oldChange.oldSnap)\n        );\n      } else if (\n        type === ChangeType.CHILD_CHANGED &&\n        oldType === ChangeType.CHILD_ADDED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildAdded(childKey, change.snapshotNode)\n        );\n      } else if (\n        type === ChangeType.CHILD_CHANGED &&\n        oldType === ChangeType.CHILD_CHANGED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildChanged(childKey, change.snapshotNode, oldChange.oldSnap)\n        );\n      } else {\n        throw assertionError(\n          'Illegal combination of changes: ' +\n            change +\n            ' occurred after ' +\n            oldChange\n        );\n      }\n    } else {\n      this.changeMap.set(childKey, change);\n    }\n  }\n\n  getChanges(): Change[] {\n    return Array.from(this.changeMap.values());\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Index } from '../snap/indexes/Index';\nimport { NamedNode, Node } from '../snap/Node';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteChild,\n  writeTreeRefCalcIndexedSlice\n} from '../WriteTree';\n\nimport { CacheNode } from './CacheNode';\nimport { ViewCache, viewCacheGetCompleteServerSnap } from './ViewCache';\n\n/**\n * Since updates to filtered nodes might require nodes to be pulled in from \"outside\" the node, this interface\n * can help to get complete children that can be pulled in.\n * A class implementing this interface takes potentially multiple sources (e.g. user writes, server data from\n * other views etc.) to try it's best to get a complete child that might be useful in pulling into the view.\n *\n * @interface\n */\nexport interface CompleteChildSource {\n  getCompleteChild(childKey: string): Node | null;\n\n  getChildAfterChild(\n    index: Index,\n    child: NamedNode,\n    reverse: boolean\n  ): NamedNode | null;\n}\n\n/**\n * An implementation of CompleteChildSource that never returns any additional children\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class NoCompleteChildSource_ implements CompleteChildSource {\n  getCompleteChild(childKey?: string): Node | null {\n    return null;\n  }\n  getChildAfterChild(\n    index?: Index,\n    child?: NamedNode,\n    reverse?: boolean\n  ): NamedNode | null {\n    return null;\n  }\n}\n\n/**\n * Singleton instance.\n */\nexport const NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\n\n/**\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\n * old event caches available to calculate complete children.\n */\nexport class WriteTreeCompleteChildSource implements CompleteChildSource {\n  constructor(\n    private writes_: WriteTreeRef,\n    private viewCache_: ViewCache,\n    private optCompleteServerCache_: Node | null = null\n  ) {}\n  getCompleteChild(childKey: string): Node | null {\n    const node = this.viewCache_.eventCache;\n    if (node.isCompleteForChild(childKey)) {\n      return node.getNode().getImmediateChild(childKey);\n    } else {\n      const serverNode =\n        this.optCompleteServerCache_ != null\n          ? new CacheNode(this.optCompleteServerCache_, true, false)\n          : this.viewCache_.serverCache;\n      return writeTreeRefCalcCompleteChild(this.writes_, childKey, serverNode);\n    }\n  }\n  getChildAfterChild(\n    index: Index,\n    child: NamedNode,\n    reverse: boolean\n  ): NamedNode | null {\n    const completeServerData =\n      this.optCompleteServerCache_ != null\n        ? this.optCompleteServerCache_\n        : viewCacheGetCompleteServerSnap(this.viewCache_);\n    const nodes = writeTreeRefCalcIndexedSlice(\n      this.writes_,\n      completeServerData,\n      child,\n      1,\n      reverse,\n      index\n    );\n    if (nodes.length === 0) {\n      return null;\n    } else {\n      return nodes[0];\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError } from '@firebase/util';\n\nimport { AckUserWrite } from '../operation/AckUserWrite';\nimport { Merge } from '../operation/Merge';\nimport { Operation, OperationType } from '../operation/Operation';\nimport { Overwrite } from '../operation/Overwrite';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { KEY_INDEX } from '../snap/indexes/KeyIndex';\nimport { Node } from '../snap/Node';\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport {\n  newEmptyPath,\n  Path,\n  pathChild,\n  pathGetBack,\n  pathGetFront,\n  pathGetLength,\n  pathIsEmpty,\n  pathParent,\n  pathPopFront\n} from '../util/Path';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteChild,\n  writeTreeRefCalcCompleteEventCache,\n  writeTreeRefCalcCompleteEventChildren,\n  writeTreeRefCalcEventCacheAfterServerOverwrite,\n  writeTreeRefShadowingWrite\n} from '../WriteTree';\n\nimport { Change, changeValue } from './Change';\nimport { ChildChangeAccumulator } from './ChildChangeAccumulator';\nimport {\n  CompleteChildSource,\n  NO_COMPLETE_CHILD_SOURCE,\n  WriteTreeCompleteChildSource\n} from './CompleteChildSource';\nimport { NodeFilter } from './filter/NodeFilter';\nimport {\n  ViewCache,\n  viewCacheGetCompleteEventSnap,\n  viewCacheGetCompleteServerSnap,\n  viewCacheUpdateEventSnap,\n  viewCacheUpdateServerSnap\n} from './ViewCache';\n\nexport interface ProcessorResult {\n  readonly viewCache: ViewCache;\n  readonly changes: Change[];\n}\n\nexport interface ViewProcessor {\n  readonly filter: NodeFilter;\n}\n\nexport function newViewProcessor(filter: NodeFilter): ViewProcessor {\n  return { filter };\n}\n\nexport function viewProcessorAssertIndexed(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache\n): void {\n  assert(\n    viewCache.eventCache.getNode().isIndexed(viewProcessor.filter.getIndex()),\n    'Event snap not indexed'\n  );\n  assert(\n    viewCache.serverCache.getNode().isIndexed(viewProcessor.filter.getIndex()),\n    'Server snap not indexed'\n  );\n}\n\nexport function viewProcessorApplyOperation(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null\n): ProcessorResult {\n  const accumulator = new ChildChangeAccumulator();\n  let newViewCache, filterServerNode;\n  if (operation.type === OperationType.OVERWRITE) {\n    const overwrite = operation as Overwrite;\n    if (overwrite.source.fromUser) {\n      newViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        oldViewCache,\n        overwrite.path,\n        overwrite.snap,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      assert(overwrite.source.fromServer, 'Unknown source.');\n      // We filter the node if it's a tagged update or the node has been previously filtered  and the\n      // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\n      // again\n      filterServerNode =\n        overwrite.source.tagged ||\n        (oldViewCache.serverCache.isFiltered() && !pathIsEmpty(overwrite.path));\n      newViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        oldViewCache,\n        overwrite.path,\n        overwrite.snap,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.MERGE) {\n    const merge = operation as Merge;\n    if (merge.source.fromUser) {\n      newViewCache = viewProcessorApplyUserMerge(\n        viewProcessor,\n        oldViewCache,\n        merge.path,\n        merge.children,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      assert(merge.source.fromServer, 'Unknown source.');\n      // We filter the node if it's a tagged update or the node has been previously filtered\n      filterServerNode =\n        merge.source.tagged || oldViewCache.serverCache.isFiltered();\n      newViewCache = viewProcessorApplyServerMerge(\n        viewProcessor,\n        oldViewCache,\n        merge.path,\n        merge.children,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.ACK_USER_WRITE) {\n    const ackUserWrite = operation as AckUserWrite;\n    if (!ackUserWrite.revert) {\n      newViewCache = viewProcessorAckUserWrite(\n        viewProcessor,\n        oldViewCache,\n        ackUserWrite.path,\n        ackUserWrite.affectedTree,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      newViewCache = viewProcessorRevertUserWrite(\n        viewProcessor,\n        oldViewCache,\n        ackUserWrite.path,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.LISTEN_COMPLETE) {\n    newViewCache = viewProcessorListenComplete(\n      viewProcessor,\n      oldViewCache,\n      operation.path,\n      writesCache,\n      accumulator\n    );\n  } else {\n    throw assertionError('Unknown operation type: ' + operation.type);\n  }\n  const changes = accumulator.getChanges();\n  viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, changes);\n  return { viewCache: newViewCache, changes };\n}\n\nfunction viewProcessorMaybeAddValueEvent(\n  oldViewCache: ViewCache,\n  newViewCache: ViewCache,\n  accumulator: Change[]\n): void {\n  const eventSnap = newViewCache.eventCache;\n  if (eventSnap.isFullyInitialized()) {\n    const isLeafOrEmpty =\n      eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\n    const oldCompleteSnap = viewCacheGetCompleteEventSnap(oldViewCache);\n    if (\n      accumulator.length > 0 ||\n      !oldViewCache.eventCache.isFullyInitialized() ||\n      (isLeafOrEmpty && !eventSnap.getNode().equals(oldCompleteSnap)) ||\n      !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())\n    ) {\n      accumulator.push(\n        changeValue(viewCacheGetCompleteEventSnap(newViewCache))\n      );\n    }\n  }\n}\n\nfunction viewProcessorGenerateEventCacheAfterServerEvent(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  changePath: Path,\n  writesCache: WriteTreeRef,\n  source: CompleteChildSource,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldEventSnap = viewCache.eventCache;\n  if (writeTreeRefShadowingWrite(writesCache, changePath) != null) {\n    // we have a shadowing write, ignore changes\n    return viewCache;\n  } else {\n    let newEventCache, serverNode;\n    if (pathIsEmpty(changePath)) {\n      // TODO: figure out how this plays with \"sliding ack windows\"\n      assert(\n        viewCache.serverCache.isFullyInitialized(),\n        'If change path is empty, we must have complete server data'\n      );\n      if (viewCache.serverCache.isFiltered()) {\n        // We need to special case this, because we need to only apply writes to complete children, or\n        // we might end up raising events for incomplete children. If the server data is filtered deep\n        // writes cannot be guaranteed to be complete\n        const serverCache = viewCacheGetCompleteServerSnap(viewCache);\n        const completeChildren =\n          serverCache instanceof ChildrenNode\n            ? serverCache\n            : ChildrenNode.EMPTY_NODE;\n        const completeEventChildren = writeTreeRefCalcCompleteEventChildren(\n          writesCache,\n          completeChildren\n        );\n        newEventCache = viewProcessor.filter.updateFullNode(\n          viewCache.eventCache.getNode(),\n          completeEventChildren,\n          accumulator\n        );\n      } else {\n        const completeNode = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n        newEventCache = viewProcessor.filter.updateFullNode(\n          viewCache.eventCache.getNode(),\n          completeNode,\n          accumulator\n        );\n      }\n    } else {\n      const childKey = pathGetFront(changePath);\n      if (childKey === '.priority') {\n        assert(\n          pathGetLength(changePath) === 1,\n          \"Can't have a priority with additional path components\"\n        );\n        const oldEventNode = oldEventSnap.getNode();\n        serverNode = viewCache.serverCache.getNode();\n        // we might have overwrites for this priority\n        const updatedPriority = writeTreeRefCalcEventCacheAfterServerOverwrite(\n          writesCache,\n          changePath,\n          oldEventNode,\n          serverNode\n        );\n        if (updatedPriority != null) {\n          newEventCache = viewProcessor.filter.updatePriority(\n            oldEventNode,\n            updatedPriority\n          );\n        } else {\n          // priority didn't change, keep old node\n          newEventCache = oldEventSnap.getNode();\n        }\n      } else {\n        const childChangePath = pathPopFront(changePath);\n        // update child\n        let newEventChild;\n        if (oldEventSnap.isCompleteForChild(childKey)) {\n          serverNode = viewCache.serverCache.getNode();\n          const eventChildUpdate =\n            writeTreeRefCalcEventCacheAfterServerOverwrite(\n              writesCache,\n              changePath,\n              oldEventSnap.getNode(),\n              serverNode\n            );\n          if (eventChildUpdate != null) {\n            newEventChild = oldEventSnap\n              .getNode()\n              .getImmediateChild(childKey)\n              .updateChild(childChangePath, eventChildUpdate);\n          } else {\n            // Nothing changed, just keep the old child\n            newEventChild = oldEventSnap.getNode().getImmediateChild(childKey);\n          }\n        } else {\n          newEventChild = writeTreeRefCalcCompleteChild(\n            writesCache,\n            childKey,\n            viewCache.serverCache\n          );\n        }\n        if (newEventChild != null) {\n          newEventCache = viewProcessor.filter.updateChild(\n            oldEventSnap.getNode(),\n            childKey,\n            newEventChild,\n            childChangePath,\n            source,\n            accumulator\n          );\n        } else {\n          // no complete child available or no change\n          newEventCache = oldEventSnap.getNode();\n        }\n      }\n    }\n    return viewCacheUpdateEventSnap(\n      viewCache,\n      newEventCache,\n      oldEventSnap.isFullyInitialized() || pathIsEmpty(changePath),\n      viewProcessor.filter.filtersNodes()\n    );\n  }\n}\n\nfunction viewProcessorApplyServerOverwrite(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  changePath: Path,\n  changedSnap: Node,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  filterServerNode: boolean,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldServerSnap = oldViewCache.serverCache;\n  let newServerCache;\n  const serverFilter = filterServerNode\n    ? viewProcessor.filter\n    : viewProcessor.filter.getIndexedFilter();\n  if (pathIsEmpty(changePath)) {\n    newServerCache = serverFilter.updateFullNode(\n      oldServerSnap.getNode(),\n      changedSnap,\n      null\n    );\n  } else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\n    // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\n    const newServerNode = oldServerSnap\n      .getNode()\n      .updateChild(changePath, changedSnap);\n    newServerCache = serverFilter.updateFullNode(\n      oldServerSnap.getNode(),\n      newServerNode,\n      null\n    );\n  } else {\n    const childKey = pathGetFront(changePath);\n    if (\n      !oldServerSnap.isCompleteForPath(changePath) &&\n      pathGetLength(changePath) > 1\n    ) {\n      // We don't update incomplete nodes with updates intended for other listeners\n      return oldViewCache;\n    }\n    const childChangePath = pathPopFront(changePath);\n    const childNode = oldServerSnap.getNode().getImmediateChild(childKey);\n    const newChildNode = childNode.updateChild(childChangePath, changedSnap);\n    if (childKey === '.priority') {\n      newServerCache = serverFilter.updatePriority(\n        oldServerSnap.getNode(),\n        newChildNode\n      );\n    } else {\n      newServerCache = serverFilter.updateChild(\n        oldServerSnap.getNode(),\n        childKey,\n        newChildNode,\n        childChangePath,\n        NO_COMPLETE_CHILD_SOURCE,\n        null\n      );\n    }\n  }\n  const newViewCache = viewCacheUpdateServerSnap(\n    oldViewCache,\n    newServerCache,\n    oldServerSnap.isFullyInitialized() || pathIsEmpty(changePath),\n    serverFilter.filtersNodes()\n  );\n  const source = new WriteTreeCompleteChildSource(\n    writesCache,\n    newViewCache,\n    completeCache\n  );\n  return viewProcessorGenerateEventCacheAfterServerEvent(\n    viewProcessor,\n    newViewCache,\n    changePath,\n    writesCache,\n    source,\n    accumulator\n  );\n}\n\nfunction viewProcessorApplyUserOverwrite(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  changePath: Path,\n  changedSnap: Node,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldEventSnap = oldViewCache.eventCache;\n  let newViewCache, newEventCache;\n  const source = new WriteTreeCompleteChildSource(\n    writesCache,\n    oldViewCache,\n    completeCache\n  );\n  if (pathIsEmpty(changePath)) {\n    newEventCache = viewProcessor.filter.updateFullNode(\n      oldViewCache.eventCache.getNode(),\n      changedSnap,\n      accumulator\n    );\n    newViewCache = viewCacheUpdateEventSnap(\n      oldViewCache,\n      newEventCache,\n      true,\n      viewProcessor.filter.filtersNodes()\n    );\n  } else {\n    const childKey = pathGetFront(changePath);\n    if (childKey === '.priority') {\n      newEventCache = viewProcessor.filter.updatePriority(\n        oldViewCache.eventCache.getNode(),\n        changedSnap\n      );\n      newViewCache = viewCacheUpdateEventSnap(\n        oldViewCache,\n        newEventCache,\n        oldEventSnap.isFullyInitialized(),\n        oldEventSnap.isFiltered()\n      );\n    } else {\n      const childChangePath = pathPopFront(changePath);\n      const oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\n      let newChild;\n      if (pathIsEmpty(childChangePath)) {\n        // Child overwrite, we can replace the child\n        newChild = changedSnap;\n      } else {\n        const childNode = source.getCompleteChild(childKey);\n        if (childNode != null) {\n          if (\n            pathGetBack(childChangePath) === '.priority' &&\n            childNode.getChild(pathParent(childChangePath)).isEmpty()\n          ) {\n            // This is a priority update on an empty node. If this node exists on the server, the\n            // server will send down the priority in the update, so ignore for now\n            newChild = childNode;\n          } else {\n            newChild = childNode.updateChild(childChangePath, changedSnap);\n          }\n        } else {\n          // There is no complete child node available\n          newChild = ChildrenNode.EMPTY_NODE;\n        }\n      }\n      if (!oldChild.equals(newChild)) {\n        const newEventSnap = viewProcessor.filter.updateChild(\n          oldEventSnap.getNode(),\n          childKey,\n          newChild,\n          childChangePath,\n          source,\n          accumulator\n        );\n        newViewCache = viewCacheUpdateEventSnap(\n          oldViewCache,\n          newEventSnap,\n          oldEventSnap.isFullyInitialized(),\n          viewProcessor.filter.filtersNodes()\n        );\n      } else {\n        newViewCache = oldViewCache;\n      }\n    }\n  }\n  return newViewCache;\n}\n\nfunction viewProcessorCacheHasChild(\n  viewCache: ViewCache,\n  childKey: string\n): boolean {\n  return viewCache.eventCache.isCompleteForChild(childKey);\n}\n\nfunction viewProcessorApplyUserMerge(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  changedChildren: ImmutableTree<Node>,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  // HACK: In the case of a limit query, there may be some changes that bump things out of the\n  // window leaving room for new items.  It's important we process these changes first, so we\n  // iterate the changes twice, first processing any that affect items currently in view.\n  // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n  // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n  // not the other.\n  let curViewCache = viewCache;\n  changedChildren.foreach((relativePath, childNode) => {\n    const writePath = pathChild(path, relativePath);\n    if (viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n      curViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        curViewCache,\n        writePath,\n        childNode,\n        writesCache,\n        serverCache,\n        accumulator\n      );\n    }\n  });\n\n  changedChildren.foreach((relativePath, childNode) => {\n    const writePath = pathChild(path, relativePath);\n    if (!viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n      curViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        curViewCache,\n        writePath,\n        childNode,\n        writesCache,\n        serverCache,\n        accumulator\n      );\n    }\n  });\n\n  return curViewCache;\n}\n\nfunction viewProcessorApplyMerge(\n  viewProcessor: ViewProcessor,\n  node: Node,\n  merge: ImmutableTree<Node>\n): Node {\n  merge.foreach((relativePath, childNode) => {\n    node = node.updateChild(relativePath, childNode);\n  });\n  return node;\n}\n\nfunction viewProcessorApplyServerMerge(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  changedChildren: ImmutableTree<Node>,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  filterServerNode: boolean,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\n  // wait for the complete data update coming soon.\n  if (\n    viewCache.serverCache.getNode().isEmpty() &&\n    !viewCache.serverCache.isFullyInitialized()\n  ) {\n    return viewCache;\n  }\n\n  // HACK: In the case of a limit query, there may be some changes that bump things out of the\n  // window leaving room for new items.  It's important we process these changes first, so we\n  // iterate the changes twice, first processing any that affect items currently in view.\n  // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n  // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n  // not the other.\n  let curViewCache = viewCache;\n  let viewMergeTree;\n  if (pathIsEmpty(path)) {\n    viewMergeTree = changedChildren;\n  } else {\n    viewMergeTree = new ImmutableTree<Node>(null).setTree(\n      path,\n      changedChildren\n    );\n  }\n  const serverNode = viewCache.serverCache.getNode();\n  viewMergeTree.children.inorderTraversal((childKey, childTree) => {\n    if (serverNode.hasChild(childKey)) {\n      const serverChild = viewCache.serverCache\n        .getNode()\n        .getImmediateChild(childKey);\n      const newChild = viewProcessorApplyMerge(\n        viewProcessor,\n        serverChild,\n        childTree\n      );\n      curViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        curViewCache,\n        new Path(childKey),\n        newChild,\n        writesCache,\n        serverCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  });\n  viewMergeTree.children.inorderTraversal((childKey, childMergeTree) => {\n    const isUnknownDeepMerge =\n      !viewCache.serverCache.isCompleteForChild(childKey) &&\n      childMergeTree.value === undefined;\n    if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\n      const serverChild = viewCache.serverCache\n        .getNode()\n        .getImmediateChild(childKey);\n      const newChild = viewProcessorApplyMerge(\n        viewProcessor,\n        serverChild,\n        childMergeTree\n      );\n      curViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        curViewCache,\n        new Path(childKey),\n        newChild,\n        writesCache,\n        serverCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  });\n\n  return curViewCache;\n}\n\nfunction viewProcessorAckUserWrite(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  ackPath: Path,\n  affectedTree: ImmutableTree<boolean>,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  if (writeTreeRefShadowingWrite(writesCache, ackPath) != null) {\n    return viewCache;\n  }\n\n  // Only filter server node if it is currently filtered\n  const filterServerNode = viewCache.serverCache.isFiltered();\n\n  // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\n  // now that it won't be shadowed.\n  const serverCache = viewCache.serverCache;\n  if (affectedTree.value != null) {\n    // This is an overwrite.\n    if (\n      (pathIsEmpty(ackPath) && serverCache.isFullyInitialized()) ||\n      serverCache.isCompleteForPath(ackPath)\n    ) {\n      return viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        viewCache,\n        ackPath,\n        serverCache.getNode().getChild(ackPath),\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    } else if (pathIsEmpty(ackPath)) {\n      // This is a goofy edge case where we are acking data at this location but don't have full data.  We\n      // should just re-apply whatever we have in our cache as a merge.\n      let changedChildren = new ImmutableTree<Node>(null);\n      serverCache.getNode().forEachChild(KEY_INDEX, (name, node) => {\n        changedChildren = changedChildren.set(new Path(name), node);\n      });\n      return viewProcessorApplyServerMerge(\n        viewProcessor,\n        viewCache,\n        ackPath,\n        changedChildren,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    } else {\n      return viewCache;\n    }\n  } else {\n    // This is a merge.\n    let changedChildren = new ImmutableTree<Node>(null);\n    affectedTree.foreach((mergePath, value) => {\n      const serverCachePath = pathChild(ackPath, mergePath);\n      if (serverCache.isCompleteForPath(serverCachePath)) {\n        changedChildren = changedChildren.set(\n          mergePath,\n          serverCache.getNode().getChild(serverCachePath)\n        );\n      }\n    });\n    return viewProcessorApplyServerMerge(\n      viewProcessor,\n      viewCache,\n      ackPath,\n      changedChildren,\n      writesCache,\n      completeCache,\n      filterServerNode,\n      accumulator\n    );\n  }\n}\n\nfunction viewProcessorListenComplete(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  writesCache: WriteTreeRef,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldServerNode = viewCache.serverCache;\n  const newViewCache = viewCacheUpdateServerSnap(\n    viewCache,\n    oldServerNode.getNode(),\n    oldServerNode.isFullyInitialized() || pathIsEmpty(path),\n    oldServerNode.isFiltered()\n  );\n  return viewProcessorGenerateEventCacheAfterServerEvent(\n    viewProcessor,\n    newViewCache,\n    path,\n    writesCache,\n    NO_COMPLETE_CHILD_SOURCE,\n    accumulator\n  );\n}\n\nfunction viewProcessorRevertUserWrite(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  writesCache: WriteTreeRef,\n  completeServerCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  let complete;\n  if (writeTreeRefShadowingWrite(writesCache, path) != null) {\n    return viewCache;\n  } else {\n    const source = new WriteTreeCompleteChildSource(\n      writesCache,\n      viewCache,\n      completeServerCache\n    );\n    const oldEventCache = viewCache.eventCache.getNode();\n    let newEventCache;\n    if (pathIsEmpty(path) || pathGetFront(path) === '.priority') {\n      let newNode;\n      if (viewCache.serverCache.isFullyInitialized()) {\n        newNode = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n      } else {\n        const serverChildren = viewCache.serverCache.getNode();\n        assert(\n          serverChildren instanceof ChildrenNode,\n          'serverChildren would be complete if leaf node'\n        );\n        newNode = writeTreeRefCalcCompleteEventChildren(\n          writesCache,\n          serverChildren as ChildrenNode\n        );\n      }\n      newNode = newNode as Node;\n      newEventCache = viewProcessor.filter.updateFullNode(\n        oldEventCache,\n        newNode,\n        accumulator\n      );\n    } else {\n      const childKey = pathGetFront(path);\n      let newChild = writeTreeRefCalcCompleteChild(\n        writesCache,\n        childKey,\n        viewCache.serverCache\n      );\n      if (\n        newChild == null &&\n        viewCache.serverCache.isCompleteForChild(childKey)\n      ) {\n        newChild = oldEventCache.getImmediateChild(childKey);\n      }\n      if (newChild != null) {\n        newEventCache = viewProcessor.filter.updateChild(\n          oldEventCache,\n          childKey,\n          newChild,\n          pathPopFront(path),\n          source,\n          accumulator\n        );\n      } else if (viewCache.eventCache.getNode().hasChild(childKey)) {\n        // No complete child available, delete the existing one, if any\n        newEventCache = viewProcessor.filter.updateChild(\n          oldEventCache,\n          childKey,\n          ChildrenNode.EMPTY_NODE,\n          pathPopFront(path),\n          source,\n          accumulator\n        );\n      } else {\n        newEventCache = oldEventCache;\n      }\n      if (\n        newEventCache.isEmpty() &&\n        viewCache.serverCache.isFullyInitialized()\n      ) {\n        // We might have reverted all child writes. Maybe the old event was a leaf node\n        complete = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n        if (complete.isLeafNode()) {\n          newEventCache = viewProcessor.filter.updateFullNode(\n            newEventCache,\n            complete,\n            accumulator\n          );\n        }\n      }\n    }\n    complete =\n      viewCache.serverCache.isFullyInitialized() ||\n      writeTreeRefShadowingWrite(writesCache, newEmptyPath()) != null;\n    return viewCacheUpdateEventSnap(\n      viewCache,\n      newEventCache,\n      complete,\n      viewProcessor.filter.filtersNodes()\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ReferenceConstructor } from '../api/Reference';\n\nimport { Operation } from './operation/Operation';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport { Path } from './util/Path';\nimport { CacheNode } from './view/CacheNode';\nimport { Event } from './view/Event';\nimport { EventRegistration, QueryContext } from './view/EventRegistration';\nimport {\n  View,\n  viewAddEventRegistration,\n  viewApplyOperation,\n  viewGetCompleteServerCache,\n  viewGetInitialEvents,\n  viewIsEmpty,\n  viewRemoveEventRegistration\n} from './view/View';\nimport { newViewCache } from './view/ViewCache';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteEventCache,\n  writeTreeRefCalcCompleteEventChildren\n} from './WriteTree';\n\nlet referenceConstructor: ReferenceConstructor;\n\n/**\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\n * and user writes (set, transaction, update).\n *\n * It's responsible for:\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\n *    applyUserOverwrite, etc.)\n */\nexport class SyncPoint {\n  /**\n   * The Views being tracked at this location in the tree, stored as a map where the key is a\n   * queryId and the value is the View for that query.\n   *\n   * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\n   */\n  readonly views: Map<string, View> = new Map();\n}\n\nexport function syncPointSetReferenceConstructor(\n  val: ReferenceConstructor\n): void {\n  assert(\n    !referenceConstructor,\n    '__referenceConstructor has already been defined'\n  );\n  referenceConstructor = val;\n}\n\nfunction syncPointGetReferenceConstructor(): ReferenceConstructor {\n  assert(referenceConstructor, 'Reference.ts has not been loaded');\n  return referenceConstructor;\n}\n\nexport function syncPointIsEmpty(syncPoint: SyncPoint): boolean {\n  return syncPoint.views.size === 0;\n}\n\nexport function syncPointApplyOperation(\n  syncPoint: SyncPoint,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  optCompleteServerCache: Node | null\n): Event[] {\n  const queryId = operation.source.queryId;\n  if (queryId !== null) {\n    const view = syncPoint.views.get(queryId);\n    assert(view != null, 'SyncTree gave us an op for an invalid query.');\n    return viewApplyOperation(\n      view,\n      operation,\n      writesCache,\n      optCompleteServerCache\n    );\n  } else {\n    let events: Event[] = [];\n\n    for (const view of syncPoint.views.values()) {\n      events = events.concat(\n        viewApplyOperation(view, operation, writesCache, optCompleteServerCache)\n      );\n    }\n\n    return events;\n  }\n}\n\n/**\n * Get a view for the specified query.\n *\n * @param query - The query to return a view for\n * @param writesCache\n * @param serverCache\n * @param serverCacheComplete\n * @returns Events to raise.\n */\nexport function syncPointGetView(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  serverCacheComplete: boolean\n): View {\n  const queryId = query._queryIdentifier;\n  const view = syncPoint.views.get(queryId);\n  if (!view) {\n    // TODO: make writesCache take flag for complete server node\n    let eventCache = writeTreeRefCalcCompleteEventCache(\n      writesCache,\n      serverCacheComplete ? serverCache : null\n    );\n    let eventCacheComplete = false;\n    if (eventCache) {\n      eventCacheComplete = true;\n    } else if (serverCache instanceof ChildrenNode) {\n      eventCache = writeTreeRefCalcCompleteEventChildren(\n        writesCache,\n        serverCache\n      );\n      eventCacheComplete = false;\n    } else {\n      eventCache = ChildrenNode.EMPTY_NODE;\n      eventCacheComplete = false;\n    }\n    const viewCache = newViewCache(\n      new CacheNode(eventCache, eventCacheComplete, false),\n      new CacheNode(serverCache, serverCacheComplete, false)\n    );\n    return new View(query, viewCache);\n  }\n  return view;\n}\n\n/**\n * Add an event callback for the specified query.\n *\n * @param query\n * @param eventRegistration\n * @param writesCache\n * @param serverCache - Complete server cache, if we have it.\n * @param serverCacheComplete\n * @returns Events to raise.\n */\nexport function syncPointAddEventRegistration(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  eventRegistration: EventRegistration,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  serverCacheComplete: boolean\n): Event[] {\n  const view = syncPointGetView(\n    syncPoint,\n    query,\n    writesCache,\n    serverCache,\n    serverCacheComplete\n  );\n  if (!syncPoint.views.has(query._queryIdentifier)) {\n    syncPoint.views.set(query._queryIdentifier, view);\n  }\n  // This is guaranteed to exist now, we just created anything that was missing\n  viewAddEventRegistration(view, eventRegistration);\n  return viewGetInitialEvents(view, eventRegistration);\n}\n\n/**\n * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\n *\n * If query is the default query, we'll check all views for the specified eventRegistration.\n * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\n *\n * @param eventRegistration - If null, remove all callbacks.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @returns removed queries and any cancel events\n */\nexport function syncPointRemoveEventRegistration(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error\n): { removed: QueryContext[]; events: Event[] } {\n  const queryId = query._queryIdentifier;\n  const removed: QueryContext[] = [];\n  let cancelEvents: Event[] = [];\n  const hadCompleteView = syncPointHasCompleteView(syncPoint);\n  if (queryId === 'default') {\n    // When you do ref.off(...), we search all views for the registration to remove.\n    for (const [viewQueryId, view] of syncPoint.views.entries()) {\n      cancelEvents = cancelEvents.concat(\n        viewRemoveEventRegistration(view, eventRegistration, cancelError)\n      );\n      if (viewIsEmpty(view)) {\n        syncPoint.views.delete(viewQueryId);\n\n        // We'll deal with complete views later.\n        if (!view.query._queryParams.loadsAllData()) {\n          removed.push(view.query);\n        }\n      }\n    }\n  } else {\n    // remove the callback from the specific view.\n    const view = syncPoint.views.get(queryId);\n    if (view) {\n      cancelEvents = cancelEvents.concat(\n        viewRemoveEventRegistration(view, eventRegistration, cancelError)\n      );\n      if (viewIsEmpty(view)) {\n        syncPoint.views.delete(queryId);\n\n        // We'll deal with complete views later.\n        if (!view.query._queryParams.loadsAllData()) {\n          removed.push(view.query);\n        }\n      }\n    }\n  }\n\n  if (hadCompleteView && !syncPointHasCompleteView(syncPoint)) {\n    // We removed our last complete view.\n    removed.push(\n      new (syncPointGetReferenceConstructor())(query._repo, query._path)\n    );\n  }\n\n  return { removed, events: cancelEvents };\n}\n\nexport function syncPointGetQueryViews(syncPoint: SyncPoint): View[] {\n  const result = [];\n  for (const view of syncPoint.views.values()) {\n    if (!view.query._queryParams.loadsAllData()) {\n      result.push(view);\n    }\n  }\n  return result;\n}\n\n/**\n * @param path - The path to the desired complete snapshot\n * @returns A complete cache, if it exists\n */\nexport function syncPointGetCompleteServerCache(\n  syncPoint: SyncPoint,\n  path: Path\n): Node | null {\n  let serverCache: Node | null = null;\n  for (const view of syncPoint.views.values()) {\n    serverCache = serverCache || viewGetCompleteServerCache(view, path);\n  }\n  return serverCache;\n}\n\nexport function syncPointViewForQuery(\n  syncPoint: SyncPoint,\n  query: QueryContext\n): View | null {\n  const params = query._queryParams;\n  if (params.loadsAllData()) {\n    return syncPointGetCompleteView(syncPoint);\n  } else {\n    const queryId = query._queryIdentifier;\n    return syncPoint.views.get(queryId);\n  }\n}\n\nexport function syncPointViewExistsForQuery(\n  syncPoint: SyncPoint,\n  query: QueryContext\n): boolean {\n  return syncPointViewForQuery(syncPoint, query) != null;\n}\n\nexport function syncPointHasCompleteView(syncPoint: SyncPoint): boolean {\n  return syncPointGetCompleteView(syncPoint) != null;\n}\n\nexport function syncPointGetCompleteView(syncPoint: SyncPoint): View | null {\n  for (const view of syncPoint.views.values()) {\n    if (view.query._queryParams.loadsAllData()) {\n      return view;\n    }\n  }\n  return null;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Operation, OperationType } from '../operation/Operation';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { Node } from '../snap/Node';\nimport { Path, pathGetFront, pathIsEmpty } from '../util/Path';\nimport { WriteTreeRef } from '../WriteTree';\n\nimport { CacheNode } from './CacheNode';\nimport { Change, changeChildAdded, changeValue } from './Change';\nimport { CancelEvent, Event } from './Event';\nimport {\n  EventGenerator,\n  eventGeneratorGenerateEventsForChanges\n} from './EventGenerator';\nimport { EventRegistration, QueryContext } from './EventRegistration';\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport { queryParamsGetNodeFilter } from './QueryParams';\nimport {\n  newViewCache,\n  ViewCache,\n  viewCacheGetCompleteEventSnap,\n  viewCacheGetCompleteServerSnap\n} from './ViewCache';\nimport {\n  newViewProcessor,\n  ViewProcessor,\n  viewProcessorApplyOperation,\n  viewProcessorAssertIndexed\n} from './ViewProcessor';\n\n/**\n * A view represents a specific location and query that has 1 or more event registrations.\n *\n * It does several things:\n *  - Maintains the list of event registrations for this location/query.\n *  - Maintains a cache of the data visible for this location/query.\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\n *    registrations returns the set of events to be raised.\n */\nexport class View {\n  processor_: ViewProcessor;\n  viewCache_: ViewCache;\n  eventRegistrations_: EventRegistration[] = [];\n  eventGenerator_: EventGenerator;\n\n  constructor(private query_: QueryContext, initialViewCache: ViewCache) {\n    const params = this.query_._queryParams;\n\n    const indexFilter = new IndexedFilter(params.getIndex());\n    const filter = queryParamsGetNodeFilter(params);\n\n    this.processor_ = newViewProcessor(filter);\n\n    const initialServerCache = initialViewCache.serverCache;\n    const initialEventCache = initialViewCache.eventCache;\n\n    // Don't filter server node with other filter than index, wait for tagged listen\n    const serverSnap = indexFilter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialServerCache.getNode(),\n      null\n    );\n    const eventSnap = filter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialEventCache.getNode(),\n      null\n    );\n    const newServerCache = new CacheNode(\n      serverSnap,\n      initialServerCache.isFullyInitialized(),\n      indexFilter.filtersNodes()\n    );\n    const newEventCache = new CacheNode(\n      eventSnap,\n      initialEventCache.isFullyInitialized(),\n      filter.filtersNodes()\n    );\n\n    this.viewCache_ = newViewCache(newEventCache, newServerCache);\n    this.eventGenerator_ = new EventGenerator(this.query_);\n  }\n\n  get query(): QueryContext {\n    return this.query_;\n  }\n}\n\nexport function viewGetServerCache(view: View): Node | null {\n  return view.viewCache_.serverCache.getNode();\n}\n\nexport function viewGetCompleteNode(view: View): Node | null {\n  return viewCacheGetCompleteEventSnap(view.viewCache_);\n}\n\nexport function viewGetCompleteServerCache(\n  view: View,\n  path: Path\n): Node | null {\n  const cache = viewCacheGetCompleteServerSnap(view.viewCache_);\n  if (cache) {\n    // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\n    // we need to see if it contains the child we're interested in.\n    if (\n      view.query._queryParams.loadsAllData() ||\n      (!pathIsEmpty(path) &&\n        !cache.getImmediateChild(pathGetFront(path)).isEmpty())\n    ) {\n      return cache.getChild(path);\n    }\n  }\n  return null;\n}\n\nexport function viewIsEmpty(view: View): boolean {\n  return view.eventRegistrations_.length === 0;\n}\n\nexport function viewAddEventRegistration(\n  view: View,\n  eventRegistration: EventRegistration\n) {\n  view.eventRegistrations_.push(eventRegistration);\n}\n\n/**\n * @param eventRegistration - If null, remove all callbacks.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @returns Cancel events, if cancelError was provided.\n */\nexport function viewRemoveEventRegistration(\n  view: View,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error\n): Event[] {\n  const cancelEvents: CancelEvent[] = [];\n  if (cancelError) {\n    assert(\n      eventRegistration == null,\n      'A cancel should cancel all event registrations.'\n    );\n    const path = view.query._path;\n    view.eventRegistrations_.forEach(registration => {\n      const maybeEvent = registration.createCancelEvent(cancelError, path);\n      if (maybeEvent) {\n        cancelEvents.push(maybeEvent);\n      }\n    });\n  }\n\n  if (eventRegistration) {\n    let remaining = [];\n    for (let i = 0; i < view.eventRegistrations_.length; ++i) {\n      const existing = view.eventRegistrations_[i];\n      if (!existing.matches(eventRegistration)) {\n        remaining.push(existing);\n      } else if (eventRegistration.hasAnyCallback()) {\n        // We're removing just this one\n        remaining = remaining.concat(view.eventRegistrations_.slice(i + 1));\n        break;\n      }\n    }\n    view.eventRegistrations_ = remaining;\n  } else {\n    view.eventRegistrations_ = [];\n  }\n  return cancelEvents;\n}\n\n/**\n * Applies the given Operation, updates our cache, and returns the appropriate events.\n */\nexport function viewApplyOperation(\n  view: View,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  completeServerCache: Node | null\n): Event[] {\n  if (\n    operation.type === OperationType.MERGE &&\n    operation.source.queryId !== null\n  ) {\n    assert(\n      viewCacheGetCompleteServerSnap(view.viewCache_),\n      'We should always have a full cache before handling merges'\n    );\n    assert(\n      viewCacheGetCompleteEventSnap(view.viewCache_),\n      'Missing event cache, even though we have a server cache'\n    );\n  }\n\n  const oldViewCache = view.viewCache_;\n  const result = viewProcessorApplyOperation(\n    view.processor_,\n    oldViewCache,\n    operation,\n    writesCache,\n    completeServerCache\n  );\n  viewProcessorAssertIndexed(view.processor_, result.viewCache);\n\n  assert(\n    result.viewCache.serverCache.isFullyInitialized() ||\n      !oldViewCache.serverCache.isFullyInitialized(),\n    'Once a server snap is complete, it should never go back'\n  );\n\n  view.viewCache_ = result.viewCache;\n\n  return viewGenerateEventsForChanges_(\n    view,\n    result.changes,\n    result.viewCache.eventCache.getNode(),\n    null\n  );\n}\n\nexport function viewGetInitialEvents(\n  view: View,\n  registration: EventRegistration\n): Event[] {\n  const eventSnap = view.viewCache_.eventCache;\n  const initialChanges: Change[] = [];\n  if (!eventSnap.getNode().isLeafNode()) {\n    const eventNode = eventSnap.getNode() as ChildrenNode;\n    eventNode.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      initialChanges.push(changeChildAdded(key, childNode));\n    });\n  }\n  if (eventSnap.isFullyInitialized()) {\n    initialChanges.push(changeValue(eventSnap.getNode()));\n  }\n  return viewGenerateEventsForChanges_(\n    view,\n    initialChanges,\n    eventSnap.getNode(),\n    registration\n  );\n}\n\nfunction viewGenerateEventsForChanges_(\n  view: View,\n  changes: Change[],\n  eventCache: Node,\n  eventRegistration?: EventRegistration\n): Event[] {\n  const registrations = eventRegistration\n    ? [eventRegistration]\n    : view.eventRegistrations_;\n  return eventGeneratorGenerateEventsForChanges(\n    view.eventGenerator_,\n    changes,\n    eventCache,\n    registrations\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ReferenceConstructor } from '../api/Reference';\n\nimport { AckUserWrite } from './operation/AckUserWrite';\nimport { ListenComplete } from './operation/ListenComplete';\nimport { Merge } from './operation/Merge';\nimport {\n  newOperationSourceServer,\n  newOperationSourceServerTaggedQuery,\n  newOperationSourceUser,\n  Operation\n} from './operation/Operation';\nimport { Overwrite } from './operation/Overwrite';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport {\n  SyncPoint,\n  syncPointAddEventRegistration,\n  syncPointApplyOperation,\n  syncPointGetCompleteServerCache,\n  syncPointGetCompleteView,\n  syncPointGetQueryViews,\n  syncPointGetView,\n  syncPointHasCompleteView,\n  syncPointIsEmpty,\n  syncPointRemoveEventRegistration,\n  syncPointViewExistsForQuery,\n  syncPointViewForQuery\n} from './SyncPoint';\nimport { ImmutableTree } from './util/ImmutableTree';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathGetFront,\n  pathIsEmpty\n} from './util/Path';\nimport { each, errorForServerCode } from './util/util';\nimport { CacheNode } from './view/CacheNode';\nimport { Event } from './view/Event';\nimport { EventRegistration, QueryContext } from './view/EventRegistration';\nimport { View, viewGetCompleteNode, viewGetServerCache } from './view/View';\nimport {\n  newWriteTree,\n  WriteTree,\n  writeTreeAddMerge,\n  writeTreeAddOverwrite,\n  writeTreeCalcCompleteEventCache,\n  writeTreeChildWrites,\n  writeTreeGetWrite,\n  WriteTreeRef,\n  writeTreeRefChild,\n  writeTreeRemoveWrite\n} from './WriteTree';\n\nlet referenceConstructor: ReferenceConstructor;\n\nexport function syncTreeSetReferenceConstructor(\n  val: ReferenceConstructor\n): void {\n  assert(\n    !referenceConstructor,\n    '__referenceConstructor has already been defined'\n  );\n  referenceConstructor = val;\n}\n\nfunction syncTreeGetReferenceConstructor(): ReferenceConstructor {\n  assert(referenceConstructor, 'Reference.ts has not been loaded');\n  return referenceConstructor;\n}\n\nexport interface ListenProvider {\n  startListening(\n    query: QueryContext,\n    tag: number | null,\n    hashFn: () => string,\n    onComplete: (a: string, b?: unknown) => Event[]\n  ): Event[];\n\n  stopListening(a: QueryContext, b: number | null): void;\n}\n\n/**\n * Static tracker for next query tag.\n */\nlet syncTreeNextQueryTag_ = 1;\n\n/**\n * SyncTree is the central class for managing event callback registration, data caching, views\n * (query processing), and event generation.  There are typically two SyncTree instances for\n * each Repo, one for the normal Firebase data, and one for the .info data.\n *\n * It has a number of responsibilities, including:\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\n *    (applyUserOverwrite(), applyUserMerge()).\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\n *    applyServerMerge()).\n *  - Generating user-facing events for server and user changes (all of the apply* methods\n *    return the set of events that need to be raised as a result).\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\n *    to the correct set of paths and queries to satisfy the current set of user event\n *    callbacks (listens are started/stopped using the provided listenProvider).\n *\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\n * events are returned to the caller rather than raised synchronously.\n *\n */\nexport class SyncTree {\n  /**\n   * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\n   */\n  syncPointTree_: ImmutableTree<SyncPoint> = new ImmutableTree<SyncPoint>(null);\n\n  /**\n   * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\n   */\n  pendingWriteTree_: WriteTree = newWriteTree();\n\n  readonly tagToQueryMap: Map<number, string> = new Map();\n  readonly queryToTagMap: Map<string, number> = new Map();\n\n  /**\n   * @param listenProvider_ - Used by SyncTree to start / stop listening\n   *   to server data.\n   */\n  constructor(public listenProvider_: ListenProvider) {}\n}\n\n/**\n * Apply the data changes for a user-generated set() or transaction() call.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyUserOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  newData: Node,\n  writeId: number,\n  visible?: boolean\n): Event[] {\n  // Record pending write.\n  writeTreeAddOverwrite(\n    syncTree.pendingWriteTree_,\n    path,\n    newData,\n    writeId,\n    visible\n  );\n\n  if (!visible) {\n    return [];\n  } else {\n    return syncTreeApplyOperationToSyncPoints_(\n      syncTree,\n      new Overwrite(newOperationSourceUser(), path, newData)\n    );\n  }\n}\n\n/**\n * Apply the data from a user-generated update() call\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyUserMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  writeId: number\n): Event[] {\n  // Record pending merge.\n  writeTreeAddMerge(syncTree.pendingWriteTree_, path, changedChildren, writeId);\n\n  const changeTree = ImmutableTree.fromObject(changedChildren);\n\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Merge(newOperationSourceUser(), path, changeTree)\n  );\n}\n\n/**\n * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\n *\n * @param revert - True if the given write failed and needs to be reverted\n * @returns Events to raise.\n */\nexport function syncTreeAckUserWrite(\n  syncTree: SyncTree,\n  writeId: number,\n  revert: boolean = false\n) {\n  const write = writeTreeGetWrite(syncTree.pendingWriteTree_, writeId);\n  const needToReevaluate = writeTreeRemoveWrite(\n    syncTree.pendingWriteTree_,\n    writeId\n  );\n  if (!needToReevaluate) {\n    return [];\n  } else {\n    let affectedTree = new ImmutableTree<boolean>(null);\n    if (write.snap != null) {\n      // overwrite\n      affectedTree = affectedTree.set(newEmptyPath(), true);\n    } else {\n      each(write.children, (pathString: string) => {\n        affectedTree = affectedTree.set(new Path(pathString), true);\n      });\n    }\n    return syncTreeApplyOperationToSyncPoints_(\n      syncTree,\n      new AckUserWrite(write.path, affectedTree, revert)\n    );\n  }\n}\n\n/**\n * Apply new server data for the specified path..\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyServerOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  newData: Node\n): Event[] {\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Overwrite(newOperationSourceServer(), path, newData)\n  );\n}\n\n/**\n * Apply new server data to be merged in at the specified path.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyServerMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node }\n): Event[] {\n  const changeTree = ImmutableTree.fromObject(changedChildren);\n\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Merge(newOperationSourceServer(), path, changeTree)\n  );\n}\n\n/**\n * Apply a listen complete for a query\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyListenComplete(\n  syncTree: SyncTree,\n  path: Path\n): Event[] {\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new ListenComplete(newOperationSourceServer(), path)\n  );\n}\n\n/**\n * Apply a listen complete for a tagged query\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedListenComplete(\n  syncTree: SyncTree,\n  path: Path,\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const op = new ListenComplete(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // We've already removed the query. No big deal, ignore the update\n    return [];\n  }\n}\n\n/**\n * Remove event callback(s).\n *\n * If query is the default query, we'll check all queries for the specified eventRegistration.\n * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\n *\n * @param eventRegistration - If null, all callbacks are removed.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @returns Cancel events, if cancelError was provided.\n */\nexport function syncTreeRemoveEventRegistration(\n  syncTree: SyncTree,\n  query: QueryContext,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error\n): Event[] {\n  // Find the syncPoint first. Then deal with whether or not it has matching listeners\n  const path = query._path;\n  const maybeSyncPoint = syncTree.syncPointTree_.get(path);\n  let cancelEvents: Event[] = [];\n  // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\n  // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\n  // not loadsAllData().\n  if (\n    maybeSyncPoint &&\n    (query._queryIdentifier === 'default' ||\n      syncPointViewExistsForQuery(maybeSyncPoint, query))\n  ) {\n    const removedAndEvents = syncPointRemoveEventRegistration(\n      maybeSyncPoint,\n      query,\n      eventRegistration,\n      cancelError\n    );\n    if (syncPointIsEmpty(maybeSyncPoint)) {\n      syncTree.syncPointTree_ = syncTree.syncPointTree_.remove(path);\n    }\n    const removed = removedAndEvents.removed;\n    cancelEvents = removedAndEvents.events;\n    // We may have just removed one of many listeners and can short-circuit this whole process\n    // We may also not have removed a default listener, in which case all of the descendant listeners should already be\n    // properly set up.\n    //\n    // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\n    // queryId === 'default'\n    const removingDefault =\n      -1 !==\n      removed.findIndex(query => {\n        return query._queryParams.loadsAllData();\n      });\n    const covered = syncTree.syncPointTree_.findOnPath(\n      path,\n      (relativePath, parentSyncPoint) =>\n        syncPointHasCompleteView(parentSyncPoint)\n    );\n\n    if (removingDefault && !covered) {\n      const subtree = syncTree.syncPointTree_.subtree(path);\n      // There are potentially child listeners. Determine what if any listens we need to send before executing the\n      // removal\n      if (!subtree.isEmpty()) {\n        // We need to fold over our subtree and collect the listeners to send\n        const newViews = syncTreeCollectDistinctViewsForSubTree_(subtree);\n\n        // Ok, we've collected all the listens we need. Set them up.\n        for (let i = 0; i < newViews.length; ++i) {\n          const view = newViews[i],\n            newQuery = view.query;\n          const listener = syncTreeCreateListenerForView_(syncTree, view);\n          syncTree.listenProvider_.startListening(\n            syncTreeQueryForListening_(newQuery),\n            syncTreeTagForQuery_(syncTree, newQuery),\n            listener.hashFn,\n            listener.onComplete\n          );\n        }\n      } else {\n        // There's nothing below us, so nothing we need to start listening on\n      }\n    }\n    // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\n    // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\n    // Also, note that if we have a cancelError, it's already been removed at the provider level.\n    if (!covered && removed.length > 0 && !cancelError) {\n      // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\n      // default. Otherwise, we need to iterate through and cancel each individual query\n      if (removingDefault) {\n        // We don't tag default listeners\n        const defaultTag: number | null = null;\n        syncTree.listenProvider_.stopListening(\n          syncTreeQueryForListening_(query),\n          defaultTag\n        );\n      } else {\n        removed.forEach((queryToRemove: QueryContext) => {\n          const tagToRemove = syncTree.queryToTagMap.get(\n            syncTreeMakeQueryKey_(queryToRemove)\n          );\n          syncTree.listenProvider_.stopListening(\n            syncTreeQueryForListening_(queryToRemove),\n            tagToRemove\n          );\n        });\n      }\n    }\n    // Now, clear all of the tags we're tracking for the removed listens\n    syncTreeRemoveTags_(syncTree, removed);\n  } else {\n    // No-op, this listener must've been already removed\n  }\n  return cancelEvents;\n}\n\n/**\n * Apply new server data for the specified tagged query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedQueryOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  snap: Node,\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey != null) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const op = new Overwrite(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath,\n      snap\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // Query must have been removed already\n    return [];\n  }\n}\n\n/**\n * Apply server data to be merged in for the specified tagged query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedQueryMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const changeTree = ImmutableTree.fromObject(changedChildren);\n    const op = new Merge(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath,\n      changeTree\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // We've already removed the query. No big deal, ignore the update\n    return [];\n  }\n}\n\n/**\n * Add an event callback for the specified query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeAddEventRegistration(\n  syncTree: SyncTree,\n  query: QueryContext,\n  eventRegistration: EventRegistration\n): Event[] {\n  const path = query._path;\n\n  let serverCache: Node | null = null;\n  let foundAncestorDefaultView = false;\n  // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n  // Consider optimizing this once there's a better understanding of what actual behavior will be.\n  syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n    const relativePath = newRelativePath(pathToSyncPoint, path);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n    foundAncestorDefaultView =\n      foundAncestorDefaultView || syncPointHasCompleteView(sp);\n  });\n  let syncPoint = syncTree.syncPointTree_.get(path);\n  if (!syncPoint) {\n    syncPoint = new SyncPoint();\n    syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n  } else {\n    foundAncestorDefaultView =\n      foundAncestorDefaultView || syncPointHasCompleteView(syncPoint);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n\n  let serverCacheComplete;\n  if (serverCache != null) {\n    serverCacheComplete = true;\n  } else {\n    serverCacheComplete = false;\n    serverCache = ChildrenNode.EMPTY_NODE;\n    const subtree = syncTree.syncPointTree_.subtree(path);\n    subtree.foreachChild((childName, childSyncPoint) => {\n      const completeCache = syncPointGetCompleteServerCache(\n        childSyncPoint,\n        newEmptyPath()\n      );\n      if (completeCache) {\n        serverCache = serverCache.updateImmediateChild(\n          childName,\n          completeCache\n        );\n      }\n    });\n  }\n\n  const viewAlreadyExists = syncPointViewExistsForQuery(syncPoint, query);\n  if (!viewAlreadyExists && !query._queryParams.loadsAllData()) {\n    // We need to track a tag for this query\n    const queryKey = syncTreeMakeQueryKey_(query);\n    assert(\n      !syncTree.queryToTagMap.has(queryKey),\n      'View does not exist, but we have a tag'\n    );\n    const tag = syncTreeGetNextQueryTag_();\n    syncTree.queryToTagMap.set(queryKey, tag);\n    syncTree.tagToQueryMap.set(tag, queryKey);\n  }\n  const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, path);\n  let events = syncPointAddEventRegistration(\n    syncPoint,\n    query,\n    eventRegistration,\n    writesCache,\n    serverCache,\n    serverCacheComplete\n  );\n  if (!viewAlreadyExists && !foundAncestorDefaultView) {\n    const view = syncPointViewForQuery(syncPoint, query);\n    events = events.concat(syncTreeSetupListener_(syncTree, query, view));\n  }\n  return events;\n}\n\n/**\n * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a\n * listener above it, we will get a false \"null\". This shouldn't be a problem because transactions will always\n * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->\n *     <incremented total> as the write is applied locally and then acknowledged at the server.\n *\n * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\n *\n * @param path - The path to the data we want\n * @param writeIdsToExclude - A specific set to be excluded\n */\nexport function syncTreeCalcCompleteEventCache(\n  syncTree: SyncTree,\n  path: Path,\n  writeIdsToExclude?: number[]\n): Node {\n  const includeHiddenSets = true;\n  const writeTree = syncTree.pendingWriteTree_;\n  const serverCache = syncTree.syncPointTree_.findOnPath(\n    path,\n    (pathSoFar, syncPoint) => {\n      const relativePath = newRelativePath(pathSoFar, path);\n      const serverCache = syncPointGetCompleteServerCache(\n        syncPoint,\n        relativePath\n      );\n      if (serverCache) {\n        return serverCache;\n      }\n    }\n  );\n  return writeTreeCalcCompleteEventCache(\n    writeTree,\n    path,\n    serverCache,\n    writeIdsToExclude,\n    includeHiddenSets\n  );\n}\n\nexport function syncTreeGetServerValue(\n  syncTree: SyncTree,\n  query: QueryContext\n): Node | null {\n  const path = query._path;\n  let serverCache: Node | null = null;\n  // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n  // Consider optimizing this once there's a better understanding of what actual behavior will be.\n  syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n    const relativePath = newRelativePath(pathToSyncPoint, path);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n  });\n  let syncPoint = syncTree.syncPointTree_.get(path);\n  if (!syncPoint) {\n    syncPoint = new SyncPoint();\n    syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n  } else {\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n  const serverCacheComplete = serverCache != null;\n  const serverCacheNode: CacheNode | null = serverCacheComplete\n    ? new CacheNode(serverCache, true, false)\n    : null;\n  const writesCache: WriteTreeRef | null = writeTreeChildWrites(\n    syncTree.pendingWriteTree_,\n    query._path\n  );\n  const view: View = syncPointGetView(\n    syncPoint,\n    query,\n    writesCache,\n    serverCacheComplete ? serverCacheNode.getNode() : ChildrenNode.EMPTY_NODE,\n    serverCacheComplete\n  );\n  return viewGetCompleteNode(view);\n}\n\n/**\n * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\n *\n * NOTES:\n * - Descendant SyncPoints will be visited first (since we raise events depth-first).\n *\n * - We call applyOperation() on each SyncPoint passing three things:\n *   1. A version of the Operation that has been made relative to the SyncPoint location.\n *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\n *   3. A snapshot Node with cached server data, if we have it.\n *\n * - We concatenate all of the events returned by each SyncPoint and return the result.\n */\nfunction syncTreeApplyOperationToSyncPoints_(\n  syncTree: SyncTree,\n  operation: Operation\n): Event[] {\n  return syncTreeApplyOperationHelper_(\n    operation,\n    syncTree.syncPointTree_,\n    /*serverCache=*/ null,\n    writeTreeChildWrites(syncTree.pendingWriteTree_, newEmptyPath())\n  );\n}\n\n/**\n * Recursive helper for applyOperationToSyncPoints_\n */\nfunction syncTreeApplyOperationHelper_(\n  operation: Operation,\n  syncPointTree: ImmutableTree<SyncPoint>,\n  serverCache: Node | null,\n  writesCache: WriteTreeRef\n): Event[] {\n  if (pathIsEmpty(operation.path)) {\n    return syncTreeApplyOperationDescendantsHelper_(\n      operation,\n      syncPointTree,\n      serverCache,\n      writesCache\n    );\n  } else {\n    const syncPoint = syncPointTree.get(newEmptyPath());\n\n    // If we don't have cached server data, see if we can get it from this SyncPoint.\n    if (serverCache == null && syncPoint != null) {\n      serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n    }\n\n    let events: Event[] = [];\n    const childName = pathGetFront(operation.path);\n    const childOperation = operation.operationForChild(childName);\n    const childTree = syncPointTree.children.get(childName);\n    if (childTree && childOperation) {\n      const childServerCache = serverCache\n        ? serverCache.getImmediateChild(childName)\n        : null;\n      const childWritesCache = writeTreeRefChild(writesCache, childName);\n      events = events.concat(\n        syncTreeApplyOperationHelper_(\n          childOperation,\n          childTree,\n          childServerCache,\n          childWritesCache\n        )\n      );\n    }\n\n    if (syncPoint) {\n      events = events.concat(\n        syncPointApplyOperation(syncPoint, operation, writesCache, serverCache)\n      );\n    }\n\n    return events;\n  }\n}\n\n/**\n * Recursive helper for applyOperationToSyncPoints_\n */\nfunction syncTreeApplyOperationDescendantsHelper_(\n  operation: Operation,\n  syncPointTree: ImmutableTree<SyncPoint>,\n  serverCache: Node | null,\n  writesCache: WriteTreeRef\n): Event[] {\n  const syncPoint = syncPointTree.get(newEmptyPath());\n\n  // If we don't have cached server data, see if we can get it from this SyncPoint.\n  if (serverCache == null && syncPoint != null) {\n    serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n\n  let events: Event[] = [];\n  syncPointTree.children.inorderTraversal((childName, childTree) => {\n    const childServerCache = serverCache\n      ? serverCache.getImmediateChild(childName)\n      : null;\n    const childWritesCache = writeTreeRefChild(writesCache, childName);\n    const childOperation = operation.operationForChild(childName);\n    if (childOperation) {\n      events = events.concat(\n        syncTreeApplyOperationDescendantsHelper_(\n          childOperation,\n          childTree,\n          childServerCache,\n          childWritesCache\n        )\n      );\n    }\n  });\n\n  if (syncPoint) {\n    events = events.concat(\n      syncPointApplyOperation(syncPoint, operation, writesCache, serverCache)\n    );\n  }\n\n  return events;\n}\n\nfunction syncTreeCreateListenerForView_(\n  syncTree: SyncTree,\n  view: View\n): { hashFn(): string; onComplete(a: string, b?: unknown): Event[] } {\n  const query = view.query;\n  const tag = syncTreeTagForQuery_(syncTree, query);\n\n  return {\n    hashFn: () => {\n      const cache = viewGetServerCache(view) || ChildrenNode.EMPTY_NODE;\n      return cache.hash();\n    },\n    onComplete: (status: string): Event[] => {\n      if (status === 'ok') {\n        if (tag) {\n          return syncTreeApplyTaggedListenComplete(syncTree, query._path, tag);\n        } else {\n          return syncTreeApplyListenComplete(syncTree, query._path);\n        }\n      } else {\n        // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\n        // Note that this may need to be scoped to just this listener if we change permissions on filtered children\n        const error = errorForServerCode(status, query);\n        return syncTreeRemoveEventRegistration(\n          syncTree,\n          query,\n          /*eventRegistration*/ null,\n          error\n        );\n      }\n    }\n  };\n}\n\n/**\n * Return the tag associated with the given query.\n */\nfunction syncTreeTagForQuery_(\n  syncTree: SyncTree,\n  query: QueryContext\n): number | null {\n  const queryKey = syncTreeMakeQueryKey_(query);\n  return syncTree.queryToTagMap.get(queryKey);\n}\n\n/**\n * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\n */\nfunction syncTreeMakeQueryKey_(query: QueryContext): string {\n  return query._path.toString() + '$' + query._queryIdentifier;\n}\n\n/**\n * Return the query associated with the given tag, if we have one\n */\nfunction syncTreeQueryKeyForTag_(\n  syncTree: SyncTree,\n  tag: number\n): string | null {\n  return syncTree.tagToQueryMap.get(tag);\n}\n\n/**\n * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\n */\nfunction syncTreeParseQueryKey_(queryKey: string): {\n  queryId: string;\n  path: Path;\n} {\n  const splitIndex = queryKey.indexOf('$');\n  assert(\n    splitIndex !== -1 && splitIndex < queryKey.length - 1,\n    'Bad queryKey.'\n  );\n  return {\n    queryId: queryKey.substr(splitIndex + 1),\n    path: new Path(queryKey.substr(0, splitIndex))\n  };\n}\n\n/**\n * A helper method to apply tagged operations\n */\nfunction syncTreeApplyTaggedOperation_(\n  syncTree: SyncTree,\n  queryPath: Path,\n  operation: Operation\n): Event[] {\n  const syncPoint = syncTree.syncPointTree_.get(queryPath);\n  assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\n  const writesCache = writeTreeChildWrites(\n    syncTree.pendingWriteTree_,\n    queryPath\n  );\n  return syncPointApplyOperation(syncPoint, operation, writesCache, null);\n}\n\n/**\n * This collapses multiple unfiltered views into a single view, since we only need a single\n * listener for them.\n */\nfunction syncTreeCollectDistinctViewsForSubTree_(\n  subtree: ImmutableTree<SyncPoint>\n): View[] {\n  return subtree.fold<View[]>((relativePath, maybeChildSyncPoint, childMap) => {\n    if (maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {\n      const completeView = syncPointGetCompleteView(maybeChildSyncPoint);\n      return [completeView];\n    } else {\n      // No complete view here, flatten any deeper listens into an array\n      let views: View[] = [];\n      if (maybeChildSyncPoint) {\n        views = syncPointGetQueryViews(maybeChildSyncPoint);\n      }\n      each(childMap, (_key: string, childViews: View[]) => {\n        views = views.concat(childViews);\n      });\n      return views;\n    }\n  });\n}\n\n/**\n * Normalizes a query to a query we send the server for listening\n *\n * @returns The normalized query\n */\nfunction syncTreeQueryForListening_(query: QueryContext): QueryContext {\n  if (query._queryParams.loadsAllData() && !query._queryParams.isDefault()) {\n    // We treat queries that load all data as default queries\n    // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\n    // from Query\n    return new (syncTreeGetReferenceConstructor())(query._repo, query._path);\n  } else {\n    return query;\n  }\n}\n\nfunction syncTreeRemoveTags_(syncTree: SyncTree, queries: QueryContext[]) {\n  for (let j = 0; j < queries.length; ++j) {\n    const removedQuery = queries[j];\n    if (!removedQuery._queryParams.loadsAllData()) {\n      // We should have a tag for this\n      const removedQueryKey = syncTreeMakeQueryKey_(removedQuery);\n      const removedQueryTag = syncTree.queryToTagMap.get(removedQueryKey);\n      syncTree.queryToTagMap.delete(removedQueryKey);\n      syncTree.tagToQueryMap.delete(removedQueryTag);\n    }\n  }\n}\n\n/**\n * Static accessor for query tags.\n */\nfunction syncTreeGetNextQueryTag_(): number {\n  return syncTreeNextQueryTag_++;\n}\n\n/**\n * For a given new listen, manage the de-duplication of outstanding subscriptions.\n *\n * @returns This method can return events to support synchronous data sources\n */\nfunction syncTreeSetupListener_(\n  syncTree: SyncTree,\n  query: QueryContext,\n  view: View\n): Event[] {\n  const path = query._path;\n  const tag = syncTreeTagForQuery_(syncTree, query);\n  const listener = syncTreeCreateListenerForView_(syncTree, view);\n\n  const events = syncTree.listenProvider_.startListening(\n    syncTreeQueryForListening_(query),\n    tag,\n    listener.hashFn,\n    listener.onComplete\n  );\n\n  const subtree = syncTree.syncPointTree_.subtree(path);\n  // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\n  // may need to shadow other listens as well.\n  if (tag) {\n    assert(\n      !syncPointHasCompleteView(subtree.value),\n      \"If we're adding a query, it shouldn't be shadowed\"\n    );\n  } else {\n    // Shadow everything at or below this location, this is a default listener.\n    const queriesToStop = subtree.fold<QueryContext[]>(\n      (relativePath, maybeChildSyncPoint, childMap) => {\n        if (\n          !pathIsEmpty(relativePath) &&\n          maybeChildSyncPoint &&\n          syncPointHasCompleteView(maybeChildSyncPoint)\n        ) {\n          return [syncPointGetCompleteView(maybeChildSyncPoint).query];\n        } else {\n          // No default listener here, flatten any deeper queries into an array\n          let queries: QueryContext[] = [];\n          if (maybeChildSyncPoint) {\n            queries = queries.concat(\n              syncPointGetQueryViews(maybeChildSyncPoint).map(\n                view => view.query\n              )\n            );\n          }\n          each(childMap, (_key: string, childQueries: QueryContext[]) => {\n            queries = queries.concat(childQueries);\n          });\n          return queries;\n        }\n      }\n    );\n    for (let i = 0; i < queriesToStop.length; ++i) {\n      const queryToStop = queriesToStop[i];\n      syncTree.listenProvider_.stopListening(\n        syncTreeQueryForListening_(queryToStop),\n        syncTreeTagForQuery_(syncTree, queryToStop)\n      );\n    }\n  }\n  return events;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { LeafNode } from '../snap/LeafNode';\nimport { Node } from '../snap/Node';\nimport { nodeFromJSON } from '../snap/nodeFromJSON';\nimport { SyncTree, syncTreeCalcCompleteEventCache } from '../SyncTree';\n\nimport { Indexable } from './misc';\nimport { Path, pathChild } from './Path';\n\n/* It's critical for performance that we do not calculate actual values from a SyncTree\n * unless and until the value is needed. Because we expose both a SyncTree and Node\n * version of deferred value resolution, we ned a wrapper class that will let us share\n * code.\n *\n * @see https://github.com/firebase/firebase-js-sdk/issues/2487\n */\ninterface ValueProvider {\n  getImmediateChild(childName: string): ValueProvider;\n  node(): Node;\n}\n\nclass ExistingValueProvider implements ValueProvider {\n  constructor(readonly node_: Node) {}\n\n  getImmediateChild(childName: string): ValueProvider {\n    const child = this.node_.getImmediateChild(childName);\n    return new ExistingValueProvider(child);\n  }\n\n  node(): Node {\n    return this.node_;\n  }\n}\n\nclass DeferredValueProvider implements ValueProvider {\n  private syncTree_: SyncTree;\n  private path_: Path;\n\n  constructor(syncTree: SyncTree, path: Path) {\n    this.syncTree_ = syncTree;\n    this.path_ = path;\n  }\n\n  getImmediateChild(childName: string): ValueProvider {\n    const childPath = pathChild(this.path_, childName);\n    return new DeferredValueProvider(this.syncTree_, childPath);\n  }\n\n  node(): Node {\n    return syncTreeCalcCompleteEventCache(this.syncTree_, this.path_);\n  }\n}\n\n/**\n * Generate placeholders for deferred values.\n */\nexport const generateWithValues = function (\n  values: {\n    [k: string]: unknown;\n  } | null\n): { [k: string]: unknown } {\n  values = values || {};\n  values['timestamp'] = values['timestamp'] || new Date().getTime();\n  return values;\n};\n\n/**\n * Value to use when firing local events. When writing server values, fire\n * local events with an approximate value, otherwise return value as-is.\n */\nexport const resolveDeferredLeafValue = function (\n  value: { [k: string]: unknown } | string | number | boolean,\n  existingVal: ValueProvider,\n  serverValues: { [k: string]: unknown }\n): string | number | boolean {\n  if (!value || typeof value !== 'object') {\n    return value as string | number | boolean;\n  }\n  assert('.sv' in value, 'Unexpected leaf node or priority contents');\n\n  if (typeof value['.sv'] === 'string') {\n    return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);\n  } else if (typeof value['.sv'] === 'object') {\n    return resolveComplexDeferredValue(value['.sv'], existingVal, serverValues);\n  } else {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));\n  }\n};\n\nconst resolveScalarDeferredValue = function (\n  op: string,\n  existing: ValueProvider,\n  serverValues: { [k: string]: unknown }\n): string | number | boolean {\n  switch (op) {\n    case 'timestamp':\n      return serverValues['timestamp'] as string | number | boolean;\n    default:\n      assert(false, 'Unexpected server value: ' + op);\n  }\n};\n\nconst resolveComplexDeferredValue = function (\n  op: object,\n  existing: ValueProvider,\n  unused: { [k: string]: unknown }\n): string | number | boolean {\n  if (!op.hasOwnProperty('increment')) {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));\n  }\n  const delta = op['increment'];\n  if (typeof delta !== 'number') {\n    assert(false, 'Unexpected increment value: ' + delta);\n  }\n\n  const existingNode = existing.node();\n  assert(\n    existingNode !== null && typeof existingNode !== 'undefined',\n    'Expected ChildrenNode.EMPTY_NODE for nulls'\n  );\n\n  // Incrementing a non-number sets the value to the incremented amount\n  if (!existingNode.isLeafNode()) {\n    return delta;\n  }\n\n  const leaf = existingNode as LeafNode;\n  const existingVal = leaf.getValue();\n  if (typeof existingVal !== 'number') {\n    return delta;\n  }\n\n  // No need to do over/underflow arithmetic here because JS only handles floats under the covers\n  return existingVal + delta;\n};\n\n/**\n * Recursively replace all deferred values and priorities in the tree with the\n * specified generated replacement values.\n * @param path - path to which write is relative\n * @param node - new data written at path\n * @param syncTree - current data\n */\nexport const resolveDeferredValueTree = function (\n  path: Path,\n  node: Node,\n  syncTree: SyncTree,\n  serverValues: Indexable\n): Node {\n  return resolveDeferredValue(\n    node,\n    new DeferredValueProvider(syncTree, path),\n    serverValues\n  );\n};\n\n/**\n * Recursively replace all deferred values and priorities in the node with the\n * specified generated replacement values.  If there are no server values in the node,\n * it'll be returned as-is.\n */\nexport const resolveDeferredValueSnapshot = function (\n  node: Node,\n  existing: Node,\n  serverValues: Indexable\n): Node {\n  return resolveDeferredValue(\n    node,\n    new ExistingValueProvider(existing),\n    serverValues\n  );\n};\n\nfunction resolveDeferredValue(\n  node: Node,\n  existingVal: ValueProvider,\n  serverValues: Indexable\n): Node {\n  const rawPri = node.getPriority().val() as\n    | Indexable\n    | boolean\n    | null\n    | number\n    | string;\n  const priority = resolveDeferredLeafValue(\n    rawPri,\n    existingVal.getImmediateChild('.priority'),\n    serverValues\n  );\n  let newNode: Node;\n\n  if (node.isLeafNode()) {\n    const leafNode = node as LeafNode;\n    const value = resolveDeferredLeafValue(\n      leafNode.getValue(),\n      existingVal,\n      serverValues\n    );\n    if (\n      value !== leafNode.getValue() ||\n      priority !== leafNode.getPriority().val()\n    ) {\n      return new LeafNode(value, nodeFromJSON(priority));\n    } else {\n      return node;\n    }\n  } else {\n    const childrenNode = node as ChildrenNode;\n    newNode = childrenNode;\n    if (priority !== childrenNode.getPriority().val()) {\n      newNode = newNode.updatePriority(new LeafNode(priority));\n    }\n    childrenNode.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\n      const newChildNode = resolveDeferredValue(\n        childNode,\n        existingVal.getImmediateChild(childName),\n        serverValues\n      );\n      if (newChildNode !== childNode) {\n        newNode = newNode.updateImmediateChild(childName, newChildNode);\n      }\n    });\n    return newNode;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains, safeGet } from '@firebase/util';\n\nimport { Path, pathGetFront, pathPopFront } from './Path';\nimport { each } from './util';\n\n/**\n * Node in a Tree.\n */\nexport interface TreeNode<T> {\n  // TODO: Consider making accessors that create children and value lazily or\n  // separate Internal / Leaf 'types'.\n  children: Record<string, TreeNode<T>>;\n  childCount: number;\n  value?: T;\n}\n\n/**\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\n * children.\n */\nexport class Tree<T> {\n  /**\n   * @param name - Optional name of the node.\n   * @param parent - Optional parent node.\n   * @param node - Optional node to wrap.\n   */\n  constructor(\n    readonly name: string = '',\n    readonly parent: Tree<T> | null = null,\n    public node: TreeNode<T> = { children: {}, childCount: 0 }\n  ) {}\n}\n\n/**\n * Returns a sub-Tree for the given path.\n *\n * @param pathObj - Path to look up.\n * @returns Tree for path.\n */\nexport function treeSubTree<T>(tree: Tree<T>, pathObj: string | Path): Tree<T> {\n  // TODO: Require pathObj to be Path?\n  let path = pathObj instanceof Path ? pathObj : new Path(pathObj);\n  let child = tree,\n    next = pathGetFront(path);\n  while (next !== null) {\n    const childNode = safeGet(child.node.children, next) || {\n      children: {},\n      childCount: 0\n    };\n    child = new Tree<T>(next, child, childNode);\n    path = pathPopFront(path);\n    next = pathGetFront(path);\n  }\n\n  return child;\n}\n\n/**\n * Returns the data associated with this tree node.\n *\n * @returns The data or null if no data exists.\n */\nexport function treeGetValue<T>(tree: Tree<T>): T | undefined {\n  return tree.node.value;\n}\n\n/**\n * Sets data to this tree node.\n *\n * @param value - Value to set.\n */\nexport function treeSetValue<T>(tree: Tree<T>, value: T | undefined): void {\n  tree.node.value = value;\n  treeUpdateParents(tree);\n}\n\n/**\n * @returns Whether the tree has any children.\n */\nexport function treeHasChildren<T>(tree: Tree<T>): boolean {\n  return tree.node.childCount > 0;\n}\n\n/**\n * @returns Whethe rthe tree is empty (no value or children).\n */\nexport function treeIsEmpty<T>(tree: Tree<T>): boolean {\n  return treeGetValue(tree) === undefined && !treeHasChildren(tree);\n}\n\n/**\n * Calls action for each child of this tree node.\n *\n * @param action - Action to be called for each child.\n */\nexport function treeForEachChild<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void\n): void {\n  each(tree.node.children, (child: string, childTree: TreeNode<T>) => {\n    action(new Tree<T>(child, tree, childTree));\n  });\n}\n\n/**\n * Does a depth-first traversal of this node's descendants, calling action for each one.\n *\n * @param action - Action to be called for each child.\n * @param includeSelf - Whether to call action on this node as well. Defaults to\n *   false.\n * @param childrenFirst - Whether to call action on children before calling it on\n *   parent.\n */\nexport function treeForEachDescendant<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void,\n  includeSelf?: boolean,\n  childrenFirst?: boolean\n): void {\n  if (includeSelf && !childrenFirst) {\n    action(tree);\n  }\n\n  treeForEachChild(tree, child => {\n    treeForEachDescendant(child, action, true, childrenFirst);\n  });\n\n  if (includeSelf && childrenFirst) {\n    action(tree);\n  }\n}\n\n/**\n * Calls action on each ancestor node.\n *\n * @param action - Action to be called on each parent; return\n *   true to abort.\n * @param includeSelf - Whether to call action on this node as well.\n * @returns true if the action callback returned true.\n */\nexport function treeForEachAncestor<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => unknown,\n  includeSelf?: boolean\n): boolean {\n  let node = includeSelf ? tree : tree.parent;\n  while (node !== null) {\n    if (action(node)) {\n      return true;\n    }\n    node = node.parent;\n  }\n  return false;\n}\n\n/**\n * Does a depth-first traversal of this node's descendants.  When a descendant with a value\n * is found, action is called on it and traversal does not continue inside the node.\n * Action is *not* called on this node.\n *\n * @param action - Action to be called for each child.\n */\nexport function treeForEachImmediateDescendantWithValue<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void\n): void {\n  treeForEachChild(tree, child => {\n    if (treeGetValue(child) !== undefined) {\n      action(child);\n    } else {\n      treeForEachImmediateDescendantWithValue(child, action);\n    }\n  });\n}\n\n/**\n * @returns The path of this tree node, as a Path.\n */\nexport function treeGetPath<T>(tree: Tree<T>) {\n  return new Path(\n    tree.parent === null\n      ? tree.name\n      : treeGetPath(tree.parent) + '/' + tree.name\n  );\n}\n\n/**\n * Adds or removes this child from its parent based on whether it's empty or not.\n */\nfunction treeUpdateParents<T>(tree: Tree<T>) {\n  if (tree.parent !== null) {\n    treeUpdateChild(tree.parent, tree.name, tree);\n  }\n}\n\n/**\n * Adds or removes the passed child to this tree node, depending on whether it's empty.\n *\n * @param childName - The name of the child to update.\n * @param child - The child to update.\n */\nfunction treeUpdateChild<T>(tree: Tree<T>, childName: string, child: Tree<T>) {\n  const childEmpty = treeIsEmpty(child);\n  const childExists = contains(tree.node.children, childName);\n  if (childEmpty && childExists) {\n    delete tree.node.children[childName];\n    tree.node.childCount--;\n    treeUpdateParents(tree);\n  } else if (!childEmpty && !childExists) {\n    tree.node.children[childName] = child.node;\n    tree.node.childCount++;\n    treeUpdateParents(tree);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  contains,\n  errorPrefix as errorPrefixFxn,\n  safeGet,\n  stringLength\n} from '@firebase/util';\n\nimport { RepoInfo } from '../RepoInfo';\n\nimport {\n  Path,\n  pathChild,\n  pathCompare,\n  pathContains,\n  pathGetBack,\n  pathGetFront,\n  pathSlice,\n  ValidationPath,\n  validationPathPop,\n  validationPathPush,\n  validationPathToErrorString\n} from './Path';\nimport { each, isInvalidJSONNumber } from './util';\n\n/**\n * True for invalid Firebase keys\n */\nexport const INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\n\n/**\n * True for invalid Firebase paths.\n * Allows '/' in paths.\n */\nexport const INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\n\n/**\n * Maximum number of characters to allow in leaf value\n */\nexport const MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\n\nexport const isValidKey = function (key: unknown): boolean {\n  return (\n    typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key)\n  );\n};\n\nexport const isValidPathString = function (pathString: string): boolean {\n  return (\n    typeof pathString === 'string' &&\n    pathString.length !== 0 &&\n    !INVALID_PATH_REGEX_.test(pathString)\n  );\n};\n\nexport const isValidRootPathString = function (pathString: string): boolean {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  return isValidPathString(pathString);\n};\n\nexport const isValidPriority = function (priority: unknown): boolean {\n  return (\n    priority === null ||\n    typeof priority === 'string' ||\n    (typeof priority === 'number' && !isInvalidJSONNumber(priority)) ||\n    (priority &&\n      typeof priority === 'object' &&\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      contains(priority as any, '.sv'))\n  );\n};\n\n/**\n * Pre-validate a datum passed as an argument to Firebase function.\n */\nexport const validateFirebaseDataArg = function (\n  fnName: string,\n  value: unknown,\n  path: Path,\n  optional: boolean\n) {\n  if (optional && value === undefined) {\n    return;\n  }\n\n  validateFirebaseData(errorPrefixFxn(fnName, 'value'), value, path);\n};\n\n/**\n * Validate a data object client-side before sending to server.\n */\nexport const validateFirebaseData = function (\n  errorPrefix: string,\n  data: unknown,\n  path_: Path | ValidationPath\n) {\n  const path =\n    path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\n\n  if (data === undefined) {\n    throw new Error(\n      errorPrefix + 'contains undefined ' + validationPathToErrorString(path)\n    );\n  }\n  if (typeof data === 'function') {\n    throw new Error(\n      errorPrefix +\n        'contains a function ' +\n        validationPathToErrorString(path) +\n        ' with contents = ' +\n        data.toString()\n    );\n  }\n  if (isInvalidJSONNumber(data)) {\n    throw new Error(\n      errorPrefix +\n        'contains ' +\n        data.toString() +\n        ' ' +\n        validationPathToErrorString(path)\n    );\n  }\n\n  // Check max leaf size, but try to avoid the utf8 conversion if we can.\n  if (\n    typeof data === 'string' &&\n    data.length > MAX_LEAF_SIZE_ / 3 &&\n    stringLength(data) > MAX_LEAF_SIZE_\n  ) {\n    throw new Error(\n      errorPrefix +\n        'contains a string greater than ' +\n        MAX_LEAF_SIZE_ +\n        ' utf8 bytes ' +\n        validationPathToErrorString(path) +\n        \" ('\" +\n        data.substring(0, 50) +\n        \"...')\"\n    );\n  }\n\n  // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\n  // to save extra walking of large objects.\n  if (data && typeof data === 'object') {\n    let hasDotValue = false;\n    let hasActualChild = false;\n    each(data, (key: string, value: unknown) => {\n      if (key === '.value') {\n        hasDotValue = true;\n      } else if (key !== '.priority' && key !== '.sv') {\n        hasActualChild = true;\n        if (!isValidKey(key)) {\n          throw new Error(\n            errorPrefix +\n              ' contains an invalid key (' +\n              key +\n              ') ' +\n              validationPathToErrorString(path) +\n              '.  Keys must be non-empty strings ' +\n              'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"'\n          );\n        }\n      }\n\n      validationPathPush(path, key);\n      validateFirebaseData(errorPrefix, value, path);\n      validationPathPop(path);\n    });\n\n    if (hasDotValue && hasActualChild) {\n      throw new Error(\n        errorPrefix +\n          ' contains \".value\" child ' +\n          validationPathToErrorString(path) +\n          ' in addition to actual children.'\n      );\n    }\n  }\n};\n\n/**\n * Pre-validate paths passed in the firebase function.\n */\nexport const validateFirebaseMergePaths = function (\n  errorPrefix: string,\n  mergePaths: Path[]\n) {\n  let i, curPath: Path;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    const keys = pathSlice(curPath);\n    for (let j = 0; j < keys.length; j++) {\n      if (keys[j] === '.priority' && j === keys.length - 1) {\n        // .priority is OK\n      } else if (!isValidKey(keys[j])) {\n        throw new Error(\n          errorPrefix +\n            'contains an invalid key (' +\n            keys[j] +\n            ') in path ' +\n            curPath.toString() +\n            '. Keys must be non-empty strings ' +\n            'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"'\n        );\n      }\n    }\n  }\n\n  // Check that update keys are not descendants of each other.\n  // We rely on the property that sorting guarantees that ancestors come\n  // right before descendants.\n  mergePaths.sort(pathCompare);\n  let prevPath: Path | null = null;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    if (prevPath !== null && pathContains(prevPath, curPath)) {\n      throw new Error(\n        errorPrefix +\n          'contains a path ' +\n          prevPath.toString() +\n          ' that is ancestor of another path ' +\n          curPath.toString()\n      );\n    }\n    prevPath = curPath;\n  }\n};\n\n/**\n * pre-validate an object passed as an argument to firebase function (\n * must be an object - e.g. for firebase.update()).\n */\nexport const validateFirebaseMergeDataArg = function (\n  fnName: string,\n  data: unknown,\n  path: Path,\n  optional: boolean\n) {\n  if (optional && data === undefined) {\n    return;\n  }\n\n  const errorPrefix = errorPrefixFxn(fnName, 'values');\n\n  if (!(data && typeof data === 'object') || Array.isArray(data)) {\n    throw new Error(\n      errorPrefix + ' must be an object containing the children to replace.'\n    );\n  }\n\n  const mergePaths: Path[] = [];\n  each(data, (key: string, value: unknown) => {\n    const curPath = new Path(key);\n    validateFirebaseData(errorPrefix, value, pathChild(path, curPath));\n    if (pathGetBack(curPath) === '.priority') {\n      if (!isValidPriority(value)) {\n        throw new Error(\n          errorPrefix +\n            \"contains an invalid value for '\" +\n            curPath.toString() +\n            \"', which must be a valid \" +\n            'Firebase priority (a string, finite number, server value, or null).'\n        );\n      }\n    }\n    mergePaths.push(curPath);\n  });\n  validateFirebaseMergePaths(errorPrefix, mergePaths);\n};\n\nexport const validatePriority = function (\n  fnName: string,\n  priority: unknown,\n  optional: boolean\n) {\n  if (optional && priority === undefined) {\n    return;\n  }\n  if (isInvalidJSONNumber(priority)) {\n    throw new Error(\n      errorPrefixFxn(fnName, 'priority') +\n        'is ' +\n        priority.toString() +\n        ', but must be a valid Firebase priority (a string, finite number, ' +\n        'server value, or null).'\n    );\n  }\n  // Special case to allow importing data with a .sv.\n  if (!isValidPriority(priority)) {\n    throw new Error(\n      errorPrefixFxn(fnName, 'priority') +\n        'must be a valid Firebase priority ' +\n        '(a string, finite number, server value, or null).'\n    );\n  }\n};\n\nexport const validateKey = function (\n  fnName: string,\n  argumentName: string,\n  key: string,\n  optional: boolean\n) {\n  if (optional && key === undefined) {\n    return;\n  }\n  if (!isValidKey(key)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) +\n        'was an invalid key = \"' +\n        key +\n        '\".  Firebase keys must be non-empty strings and ' +\n        'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").'\n    );\n  }\n};\n\n/**\n * @internal\n */\nexport const validatePathString = function (\n  fnName: string,\n  argumentName: string,\n  pathString: string,\n  optional: boolean\n) {\n  if (optional && pathString === undefined) {\n    return;\n  }\n\n  if (!isValidPathString(pathString)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) +\n        'was an invalid path = \"' +\n        pathString +\n        '\". Paths must be non-empty strings and ' +\n        'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"'\n    );\n  }\n};\n\nexport const validateRootPathString = function (\n  fnName: string,\n  argumentName: string,\n  pathString: string,\n  optional: boolean\n) {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  validatePathString(fnName, argumentName, pathString, optional);\n};\n\n/**\n * @internal\n */\nexport const validateWritablePath = function (fnName: string, path: Path) {\n  if (pathGetFront(path) === '.info') {\n    throw new Error(fnName + \" failed = Can't modify data under /.info/\");\n  }\n};\n\nexport const validateUrl = function (\n  fnName: string,\n  parsedUrl: { repoInfo: RepoInfo; path: Path }\n) {\n  // TODO = Validate server better.\n  const pathString = parsedUrl.path.toString();\n  if (\n    !(typeof parsedUrl.repoInfo.host === 'string') ||\n    parsedUrl.repoInfo.host.length === 0 ||\n    (!isValidKey(parsedUrl.repoInfo.namespace) &&\n      parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||\n    (pathString.length !== 0 && !isValidRootPathString(pathString))\n  ) {\n    throw new Error(\n      errorPrefixFxn(fnName, 'url') +\n        'must be a valid firebase URL and ' +\n        'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".'\n    );\n  }\n};\n\nexport const validateString = function (\n  fnName: string,\n  argumentName: string,\n  string: unknown,\n  optional: boolean\n) {\n  if (optional && string === undefined) {\n    return;\n  }\n  if (!(typeof string === 'string')) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) + 'must be a valid string.'\n    );\n  }\n};\n\nexport const validateObject = function (\n  fnName: string,\n  argumentName: string,\n  obj: unknown,\n  optional: boolean\n) {\n  if (optional && obj === undefined) {\n    return;\n  }\n  if (!(obj && typeof obj === 'object') || obj === null) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) + 'must be a valid object.'\n    );\n  }\n};\n\nexport const validateObjectContainsKey = function (\n  fnName: string,\n  argumentName: string,\n  obj: unknown,\n  key: string,\n  optional: boolean,\n  optType?: string\n) {\n  const objectContainsKey =\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    obj && typeof obj === 'object' && contains(obj as any, key);\n\n  if (!objectContainsKey) {\n    if (optional) {\n      return;\n    } else {\n      throw new Error(\n        errorPrefixFxn(fnName, argumentName) +\n          'must contain the key \"' +\n          key +\n          '\"'\n      );\n    }\n  }\n\n  if (optType) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const val = safeGet(obj as any, key);\n    if (\n      (optType === 'number' && !(typeof val === 'number')) ||\n      (optType === 'string' && !(typeof val === 'string')) ||\n      (optType === 'boolean' && !(typeof val === 'boolean')) ||\n      (optType === 'function' && !(typeof val === 'function')) ||\n      (optType === 'object' && !(typeof val === 'object') && val)\n    ) {\n      if (optional) {\n        throw new Error(\n          errorPrefixFxn(fnName, argumentName) +\n            'contains invalid value for key \"' +\n            key +\n            '\" (must be of type \"' +\n            optType +\n            '\")'\n        );\n      } else {\n        throw new Error(\n          errorPrefixFxn(fnName, argumentName) +\n            'must contain the key \"' +\n            key +\n            '\" with type \"' +\n            optType +\n            '\"'\n        );\n      }\n    }\n  }\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path, pathContains, pathEquals } from '../util/Path';\nimport { exceptionGuard, log, logger } from '../util/util';\n\nimport { Event } from './Event';\n\n/**\n * The event queue serves a few purposes:\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\n *    events being queued.\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\n *    left off, ensuring that the events are still raised synchronously and in order.\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\n *    events are raised synchronously.\n *\n * NOTE: This can all go away if/when we move to async events.\n *\n */\nexport class EventQueue {\n  eventLists_: EventList[] = [];\n\n  /**\n   * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\n   */\n  recursionDepth_ = 0;\n}\n\n/**\n * @param eventDataList - The new events to queue.\n */\nexport function eventQueueQueueEvents(\n  eventQueue: EventQueue,\n  eventDataList: Event[]\n) {\n  // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\n  let currList: EventList | null = null;\n  for (let i = 0; i < eventDataList.length; i++) {\n    const data = eventDataList[i];\n    const path = data.getPath();\n    if (currList !== null && !pathEquals(path, currList.path)) {\n      eventQueue.eventLists_.push(currList);\n      currList = null;\n    }\n\n    if (currList === null) {\n      currList = { events: [], path };\n    }\n\n    currList.events.push(data);\n  }\n  if (currList) {\n    eventQueue.eventLists_.push(currList);\n  }\n}\n\n/**\n * Queues the specified events and synchronously raises all events (including previously queued ones)\n * for the specified path.\n *\n * It is assumed that the new events are all for the specified path.\n *\n * @param path - The path to raise events for.\n * @param eventDataList - The new events to raise.\n */\nexport function eventQueueRaiseEventsAtPath(\n  eventQueue: EventQueue,\n  path: Path,\n  eventDataList: Event[]\n) {\n  eventQueueQueueEvents(eventQueue, eventDataList);\n  eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath =>\n    pathEquals(eventPath, path)\n  );\n}\n\n/**\n * Queues the specified events and synchronously raises all events (including previously queued ones) for\n * locations related to the specified change path (i.e. all ancestors and descendants).\n *\n * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\n *\n * @param changedPath - The path to raise events for.\n * @param eventDataList - The events to raise\n */\nexport function eventQueueRaiseEventsForChangedPath(\n  eventQueue: EventQueue,\n  changedPath: Path,\n  eventDataList: Event[]\n) {\n  eventQueueQueueEvents(eventQueue, eventDataList);\n  eventQueueRaiseQueuedEventsMatchingPredicate(\n    eventQueue,\n    eventPath =>\n      pathContains(eventPath, changedPath) ||\n      pathContains(changedPath, eventPath)\n  );\n}\n\nfunction eventQueueRaiseQueuedEventsMatchingPredicate(\n  eventQueue: EventQueue,\n  predicate: (path: Path) => boolean\n) {\n  eventQueue.recursionDepth_++;\n\n  let sentAll = true;\n  for (let i = 0; i < eventQueue.eventLists_.length; i++) {\n    const eventList = eventQueue.eventLists_[i];\n    if (eventList) {\n      const eventPath = eventList.path;\n      if (predicate(eventPath)) {\n        eventListRaise(eventQueue.eventLists_[i]);\n        eventQueue.eventLists_[i] = null;\n      } else {\n        sentAll = false;\n      }\n    }\n  }\n\n  if (sentAll) {\n    eventQueue.eventLists_ = [];\n  }\n\n  eventQueue.recursionDepth_--;\n}\n\ninterface EventList {\n  events: Event[];\n  path: Path;\n}\n\n/**\n * Iterates through the list and raises each event\n */\nfunction eventListRaise(eventList: EventList) {\n  for (let i = 0; i < eventList.events.length; i++) {\n    const eventData = eventList.events[i];\n    if (eventData !== null) {\n      eventList.events[i] = null;\n      const eventFn = eventData.getEventRunner();\n      if (logger) {\n        log('event: ' + eventData.toString());\n      }\n      exceptionGuard(eventFn);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  contains,\n  isEmpty,\n  map,\n  safeGet,\n  stringify\n} from '@firebase/util';\n\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { PersistentConnection } from './PersistentConnection';\nimport { ReadonlyRestClient } from './ReadonlyRestClient';\nimport { RepoInfo } from './RepoInfo';\nimport { ServerActions } from './ServerActions';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport { nodeFromJSON } from './snap/nodeFromJSON';\nimport { SnapshotHolder } from './SnapshotHolder';\nimport {\n  newSparseSnapshotTree,\n  SparseSnapshotTree,\n  sparseSnapshotTreeForEachTree,\n  sparseSnapshotTreeForget,\n  sparseSnapshotTreeRemember\n} from './SparseSnapshotTree';\nimport { StatsCollection } from './stats/StatsCollection';\nimport { StatsListener } from './stats/StatsListener';\nimport {\n  statsManagerGetCollection,\n  statsManagerGetOrCreateReporter\n} from './stats/StatsManager';\nimport { StatsReporter, statsReporterIncludeStat } from './stats/StatsReporter';\nimport {\n  SyncTree,\n  syncTreeAckUserWrite,\n  syncTreeAddEventRegistration,\n  syncTreeApplyServerMerge,\n  syncTreeApplyServerOverwrite,\n  syncTreeApplyTaggedQueryMerge,\n  syncTreeApplyTaggedQueryOverwrite,\n  syncTreeApplyUserMerge,\n  syncTreeApplyUserOverwrite,\n  syncTreeCalcCompleteEventCache,\n  syncTreeGetServerValue,\n  syncTreeRemoveEventRegistration\n} from './SyncTree';\nimport { Indexable } from './util/misc';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathGetFront,\n  pathPopFront\n} from './util/Path';\nimport {\n  generateWithValues,\n  resolveDeferredValueSnapshot,\n  resolveDeferredValueTree\n} from './util/ServerValues';\nimport {\n  Tree,\n  treeForEachAncestor,\n  treeForEachChild,\n  treeForEachDescendant,\n  treeGetPath,\n  treeGetValue,\n  treeHasChildren,\n  treeSetValue,\n  treeSubTree\n} from './util/Tree';\nimport {\n  beingCrawled,\n  each,\n  exceptionGuard,\n  log,\n  LUIDGenerator,\n  warn\n} from './util/util';\nimport { isValidPriority, validateFirebaseData } from './util/validation';\nimport { Event } from './view/Event';\nimport {\n  EventQueue,\n  eventQueueQueueEvents,\n  eventQueueRaiseEventsAtPath,\n  eventQueueRaiseEventsForChangedPath\n} from './view/EventQueue';\nimport { EventRegistration, QueryContext } from './view/EventRegistration';\n\nconst INTERRUPT_REASON = 'repo_interrupt';\n\n/**\n * If a transaction does not succeed after 25 retries, we abort it. Among other\n * things this ensure that if there's ever a bug causing a mismatch between\n * client / server hashes for some data, we won't retry indefinitely.\n */\nconst MAX_TRANSACTION_RETRIES = 25;\n\nconst enum TransactionStatus {\n  // We've run the transaction and updated transactionResultData_ with the result, but it isn't currently sent to the\n  // server. A transaction will go from RUN -> SENT -> RUN if it comes back from the server as rejected due to\n  // mismatched hash.\n  RUN,\n\n  // We've run the transaction and sent it to the server and it's currently outstanding (hasn't come back as accepted\n  // or rejected yet).\n  SENT,\n\n  // Temporary state used to mark completed transactions (whether successful or aborted).  The transaction will be\n  // removed when we get a chance to prune completed ones.\n  COMPLETED,\n\n  // Used when an already-sent transaction needs to be aborted (e.g. due to a conflicting set() call that was made).\n  // If it comes back as unsuccessful, we'll abort it.\n  SENT_NEEDS_ABORT,\n\n  // Temporary state used to mark transactions that need to be aborted.\n  NEEDS_ABORT\n}\n\ninterface Transaction {\n  path: Path;\n  update: (a: unknown) => unknown;\n  onComplete: (\n    error: Error | null,\n    committed: boolean,\n    node: Node | null\n  ) => void;\n  status: TransactionStatus;\n  order: number;\n  applyLocally: boolean;\n  retryCount: number;\n  unwatcher: () => void;\n  abortReason: string | null;\n  currentWriteId: number;\n  currentInputSnapshot: Node | null;\n  currentOutputSnapshotRaw: Node | null;\n  currentOutputSnapshotResolved: Node | null;\n}\n\n/**\n * A connection to a single data repository.\n */\nexport class Repo {\n  /** Key for uniquely identifying this repo, used in RepoManager */\n  readonly key: string;\n\n  dataUpdateCount = 0;\n  infoSyncTree_: SyncTree;\n  serverSyncTree_: SyncTree;\n\n  stats_: StatsCollection;\n  statsListener_: StatsListener | null = null;\n  eventQueue_ = new EventQueue();\n  nextWriteId_ = 1;\n  server_: ServerActions;\n  statsReporter_: StatsReporter;\n  infoData_: SnapshotHolder;\n  interceptServerDataCallback_: ((a: string, b: unknown) => void) | null = null;\n\n  /** A list of data pieces and paths to be set when this client disconnects. */\n  onDisconnect_: SparseSnapshotTree = newSparseSnapshotTree();\n\n  /** Stores queues of outstanding transactions for Firebase locations. */\n  transactionQueueTree_ = new Tree<Transaction[]>();\n\n  // TODO: This should be @private but it's used by test_access.js and internal.js\n  persistentConnection_: PersistentConnection | null = null;\n\n  constructor(\n    public repoInfo_: RepoInfo,\n    public forceRestClient_: boolean,\n    public authTokenProvider_: AuthTokenProvider,\n    public appCheckProvider_: AppCheckTokenProvider\n  ) {\n    // This key is intentionally not updated if RepoInfo is later changed or replaced\n    this.key = this.repoInfo_.toURLString();\n  }\n\n  /**\n   * @returns The URL corresponding to the root of this Firebase.\n   */\n  toString(): string {\n    return (\n      (this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host\n    );\n  }\n}\n\nexport function repoStart(\n  repo: Repo,\n  appId: string,\n  authOverride?: object\n): void {\n  repo.stats_ = statsManagerGetCollection(repo.repoInfo_);\n\n  if (repo.forceRestClient_ || beingCrawled()) {\n    repo.server_ = new ReadonlyRestClient(\n      repo.repoInfo_,\n      (\n        pathString: string,\n        data: unknown,\n        isMerge: boolean,\n        tag: number | null\n      ) => {\n        repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n      },\n      repo.authTokenProvider_,\n      repo.appCheckProvider_\n    );\n\n    // Minor hack: Fire onConnect immediately, since there's no actual connection.\n    setTimeout(() => repoOnConnectStatus(repo, /* connectStatus= */ true), 0);\n  } else {\n    // Validate authOverride\n    if (typeof authOverride !== 'undefined' && authOverride !== null) {\n      if (typeof authOverride !== 'object') {\n        throw new Error(\n          'Only objects are supported for option databaseAuthVariableOverride'\n        );\n      }\n      try {\n        stringify(authOverride);\n      } catch (e) {\n        throw new Error('Invalid authOverride provided: ' + e);\n      }\n    }\n\n    repo.persistentConnection_ = new PersistentConnection(\n      repo.repoInfo_,\n      appId,\n      (\n        pathString: string,\n        data: unknown,\n        isMerge: boolean,\n        tag: number | null\n      ) => {\n        repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n      },\n      (connectStatus: boolean) => {\n        repoOnConnectStatus(repo, connectStatus);\n      },\n      (updates: object) => {\n        repoOnServerInfoUpdate(repo, updates);\n      },\n      repo.authTokenProvider_,\n      repo.appCheckProvider_,\n      authOverride\n    );\n\n    repo.server_ = repo.persistentConnection_;\n  }\n\n  repo.authTokenProvider_.addTokenChangeListener(token => {\n    repo.server_.refreshAuthToken(token);\n  });\n\n  repo.appCheckProvider_.addTokenChangeListener(result => {\n    repo.server_.refreshAppCheckToken(result.token);\n  });\n\n  // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\n  // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\n  repo.statsReporter_ = statsManagerGetOrCreateReporter(\n    repo.repoInfo_,\n    () => new StatsReporter(repo.stats_, repo.server_)\n  );\n\n  // Used for .info.\n  repo.infoData_ = new SnapshotHolder();\n  repo.infoSyncTree_ = new SyncTree({\n    startListening: (query, tag, currentHashFn, onComplete) => {\n      let infoEvents: Event[] = [];\n      const node = repo.infoData_.getNode(query._path);\n      // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\n      // on initial data...\n      if (!node.isEmpty()) {\n        infoEvents = syncTreeApplyServerOverwrite(\n          repo.infoSyncTree_,\n          query._path,\n          node\n        );\n        setTimeout(() => {\n          onComplete('ok');\n        }, 0);\n      }\n      return infoEvents;\n    },\n    stopListening: () => {}\n  });\n  repoUpdateInfo(repo, 'connected', false);\n\n  repo.serverSyncTree_ = new SyncTree({\n    startListening: (query, tag, currentHashFn, onComplete) => {\n      repo.server_.listen(query, currentHashFn, tag, (status, data) => {\n        const events = onComplete(status, data);\n        eventQueueRaiseEventsForChangedPath(\n          repo.eventQueue_,\n          query._path,\n          events\n        );\n      });\n      // No synchronous events for network-backed sync trees\n      return [];\n    },\n    stopListening: (query, tag) => {\n      repo.server_.unlisten(query, tag);\n    }\n  });\n}\n\n/**\n * @returns The time in milliseconds, taking the server offset into account if we have one.\n */\nexport function repoServerTime(repo: Repo): number {\n  const offsetNode = repo.infoData_.getNode(new Path('.info/serverTimeOffset'));\n  const offset = (offsetNode.val() as number) || 0;\n  return new Date().getTime() + offset;\n}\n\n/**\n * Generate ServerValues using some variables from the repo object.\n */\nexport function repoGenerateServerValues(repo: Repo): Indexable {\n  return generateWithValues({\n    timestamp: repoServerTime(repo)\n  });\n}\n\n/**\n * Called by realtime when we get new messages from the server.\n */\nfunction repoOnDataUpdate(\n  repo: Repo,\n  pathString: string,\n  data: unknown,\n  isMerge: boolean,\n  tag: number | null\n): void {\n  // For testing.\n  repo.dataUpdateCount++;\n  const path = new Path(pathString);\n  data = repo.interceptServerDataCallback_\n    ? repo.interceptServerDataCallback_(pathString, data)\n    : data;\n  let events = [];\n  if (tag) {\n    if (isMerge) {\n      const taggedChildren = map(\n        data as { [k: string]: unknown },\n        (raw: unknown) => nodeFromJSON(raw)\n      );\n      events = syncTreeApplyTaggedQueryMerge(\n        repo.serverSyncTree_,\n        path,\n        taggedChildren,\n        tag\n      );\n    } else {\n      const taggedSnap = nodeFromJSON(data);\n      events = syncTreeApplyTaggedQueryOverwrite(\n        repo.serverSyncTree_,\n        path,\n        taggedSnap,\n        tag\n      );\n    }\n  } else if (isMerge) {\n    const changedChildren = map(\n      data as { [k: string]: unknown },\n      (raw: unknown) => nodeFromJSON(raw)\n    );\n    events = syncTreeApplyServerMerge(\n      repo.serverSyncTree_,\n      path,\n      changedChildren\n    );\n  } else {\n    const snap = nodeFromJSON(data);\n    events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap);\n  }\n  let affectedPath = path;\n  if (events.length > 0) {\n    // Since we have a listener outstanding for each transaction, receiving any events\n    // is a proxy for some change having occurred.\n    affectedPath = repoRerunTransactions(repo, path);\n  }\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, events);\n}\n\n// TODO: This should be @private but it's used by test_access.js and internal.js\nexport function repoInterceptServerData(\n  repo: Repo,\n  callback: ((a: string, b: unknown) => unknown) | null\n): void {\n  repo.interceptServerDataCallback_ = callback;\n}\n\nfunction repoOnConnectStatus(repo: Repo, connectStatus: boolean): void {\n  repoUpdateInfo(repo, 'connected', connectStatus);\n  if (connectStatus === false) {\n    repoRunOnDisconnectEvents(repo);\n  }\n}\n\nfunction repoOnServerInfoUpdate(repo: Repo, updates: object): void {\n  each(updates, (key: string, value: unknown) => {\n    repoUpdateInfo(repo, key, value);\n  });\n}\n\nfunction repoUpdateInfo(repo: Repo, pathString: string, value: unknown): void {\n  const path = new Path('/.info/' + pathString);\n  const newNode = nodeFromJSON(value);\n  repo.infoData_.updateSnapshot(path, newNode);\n  const events = syncTreeApplyServerOverwrite(\n    repo.infoSyncTree_,\n    path,\n    newNode\n  );\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n}\n\nfunction repoGetNextWriteId(repo: Repo): number {\n  return repo.nextWriteId_++;\n}\n\n/**\n * The purpose of `getValue` is to return the latest known value\n * satisfying `query`.\n *\n * This method will first check for in-memory cached values\n * belonging to active listeners. If they are found, such values\n * are considered to be the most up-to-date.\n *\n * If the client is not connected, this method will try to\n * establish a connection and request the value for `query`. If\n * the client is not able to retrieve the query result, it reports\n * an error.\n *\n * @param query - The query to surface a value for.\n */\nexport function repoGetValue(repo: Repo, query: QueryContext): Promise<Node> {\n  // Only active queries are cached. There is no persisted cache.\n  const cached = syncTreeGetServerValue(repo.serverSyncTree_, query);\n  if (cached != null) {\n    return Promise.resolve(cached);\n  }\n  return repo.server_.get(query).then(\n    payload => {\n      const node = nodeFromJSON(payload as string).withIndex(\n        query._queryParams.getIndex()\n      );\n      const events = syncTreeApplyServerOverwrite(\n        repo.serverSyncTree_,\n        query._path,\n        node\n      );\n      eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n      return Promise.resolve(node);\n    },\n    err => {\n      repoLog(repo, 'get for query ' + stringify(query) + ' failed: ' + err);\n      return Promise.reject(new Error(err as string));\n    }\n  );\n}\n\nexport function repoSetWithPriority(\n  repo: Repo,\n  path: Path,\n  newVal: unknown,\n  newPriority: number | string | null,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repoLog(repo, 'set', {\n    path: path.toString(),\n    value: newVal,\n    priority: newPriority\n  });\n\n  // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\n  // (b) store unresolved paths on JSON parse\n  const serverValues = repoGenerateServerValues(repo);\n  const newNodeUnresolved = nodeFromJSON(newVal, newPriority);\n  const existing = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path);\n  const newNode = resolveDeferredValueSnapshot(\n    newNodeUnresolved,\n    existing,\n    serverValues\n  );\n\n  const writeId = repoGetNextWriteId(repo);\n  const events = syncTreeApplyUserOverwrite(\n    repo.serverSyncTree_,\n    path,\n    newNode,\n    writeId,\n    true\n  );\n  eventQueueQueueEvents(repo.eventQueue_, events);\n  repo.server_.put(\n    path.toString(),\n    newNodeUnresolved.val(/*export=*/ true),\n    (status, errorReason) => {\n      const success = status === 'ok';\n      if (!success) {\n        warn('set at ' + path + ' failed: ' + status);\n      }\n\n      const clearEvents = syncTreeAckUserWrite(\n        repo.serverSyncTree_,\n        writeId,\n        !success\n      );\n      eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, clearEvents);\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n  const affectedPath = repoAbortTransactions(repo, path);\n  repoRerunTransactions(repo, affectedPath);\n  // We queued the events above, so just flush the queue here\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, []);\n}\n\nexport function repoUpdate(\n  repo: Repo,\n  path: Path,\n  childrenToMerge: { [k: string]: unknown },\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repoLog(repo, 'update', { path: path.toString(), value: childrenToMerge });\n\n  // Start with our existing data and merge each child into it.\n  let empty = true;\n  const serverValues = repoGenerateServerValues(repo);\n  const changedChildren: { [k: string]: Node } = {};\n  each(childrenToMerge, (changedKey: string, changedValue: unknown) => {\n    empty = false;\n    changedChildren[changedKey] = resolveDeferredValueTree(\n      pathChild(path, changedKey),\n      nodeFromJSON(changedValue),\n      repo.serverSyncTree_,\n      serverValues\n    );\n  });\n\n  if (!empty) {\n    const writeId = repoGetNextWriteId(repo);\n    const events = syncTreeApplyUserMerge(\n      repo.serverSyncTree_,\n      path,\n      changedChildren,\n      writeId\n    );\n    eventQueueQueueEvents(repo.eventQueue_, events);\n    repo.server_.merge(\n      path.toString(),\n      childrenToMerge,\n      (status, errorReason) => {\n        const success = status === 'ok';\n        if (!success) {\n          warn('update at ' + path + ' failed: ' + status);\n        }\n\n        const clearEvents = syncTreeAckUserWrite(\n          repo.serverSyncTree_,\n          writeId,\n          !success\n        );\n        const affectedPath =\n          clearEvents.length > 0 ? repoRerunTransactions(repo, path) : path;\n        eventQueueRaiseEventsForChangedPath(\n          repo.eventQueue_,\n          affectedPath,\n          clearEvents\n        );\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n      }\n    );\n\n    each(childrenToMerge, (changedPath: string) => {\n      const affectedPath = repoAbortTransactions(\n        repo,\n        pathChild(path, changedPath)\n      );\n      repoRerunTransactions(repo, affectedPath);\n    });\n\n    // We queued the events above, so just flush the queue here\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, []);\n  } else {\n    log(\"update() called with empty data.  Don't do anything.\");\n    repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n  }\n}\n\n/**\n * Applies all of the changes stored up in the onDisconnect_ tree.\n */\nfunction repoRunOnDisconnectEvents(repo: Repo): void {\n  repoLog(repo, 'onDisconnectEvents');\n\n  const serverValues = repoGenerateServerValues(repo);\n  const resolvedOnDisconnectTree = newSparseSnapshotTree();\n  sparseSnapshotTreeForEachTree(\n    repo.onDisconnect_,\n    newEmptyPath(),\n    (path, node) => {\n      const resolved = resolveDeferredValueTree(\n        path,\n        node,\n        repo.serverSyncTree_,\n        serverValues\n      );\n      sparseSnapshotTreeRemember(resolvedOnDisconnectTree, path, resolved);\n    }\n  );\n  let events: Event[] = [];\n\n  sparseSnapshotTreeForEachTree(\n    resolvedOnDisconnectTree,\n    newEmptyPath(),\n    (path, snap) => {\n      events = events.concat(\n        syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap)\n      );\n      const affectedPath = repoAbortTransactions(repo, path);\n      repoRerunTransactions(repo, affectedPath);\n    }\n  );\n\n  repo.onDisconnect_ = newSparseSnapshotTree();\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, newEmptyPath(), events);\n}\n\nexport function repoOnDisconnectCancel(\n  repo: Repo,\n  path: Path,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repo.server_.onDisconnectCancel(path.toString(), (status, errorReason) => {\n    if (status === 'ok') {\n      sparseSnapshotTreeForget(repo.onDisconnect_, path);\n    }\n    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  });\n}\n\nexport function repoOnDisconnectSet(\n  repo: Repo,\n  path: Path,\n  value: unknown,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  const newNode = nodeFromJSON(value);\n  repo.server_.onDisconnectPut(\n    path.toString(),\n    newNode.val(/*export=*/ true),\n    (status, errorReason) => {\n      if (status === 'ok') {\n        sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoOnDisconnectSetWithPriority(\n  repo: Repo,\n  path: Path,\n  value: unknown,\n  priority: unknown,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  const newNode = nodeFromJSON(value, priority);\n  repo.server_.onDisconnectPut(\n    path.toString(),\n    newNode.val(/*export=*/ true),\n    (status, errorReason) => {\n      if (status === 'ok') {\n        sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoOnDisconnectUpdate(\n  repo: Repo,\n  path: Path,\n  childrenToMerge: { [k: string]: unknown },\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  if (isEmpty(childrenToMerge)) {\n    log(\"onDisconnect().update() called with empty data.  Don't do anything.\");\n    repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n    return;\n  }\n\n  repo.server_.onDisconnectMerge(\n    path.toString(),\n    childrenToMerge,\n    (status, errorReason) => {\n      if (status === 'ok') {\n        each(childrenToMerge, (childName: string, childNode: unknown) => {\n          const newChildNode = nodeFromJSON(childNode);\n          sparseSnapshotTreeRemember(\n            repo.onDisconnect_,\n            pathChild(path, childName),\n            newChildNode\n          );\n        });\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoAddEventCallbackForQuery(\n  repo: Repo,\n  query: QueryContext,\n  eventRegistration: EventRegistration\n): void {\n  let events;\n  if (pathGetFront(query._path) === '.info') {\n    events = syncTreeAddEventRegistration(\n      repo.infoSyncTree_,\n      query,\n      eventRegistration\n    );\n  } else {\n    events = syncTreeAddEventRegistration(\n      repo.serverSyncTree_,\n      query,\n      eventRegistration\n    );\n  }\n  eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\n\nexport function repoRemoveEventCallbackForQuery(\n  repo: Repo,\n  query: QueryContext,\n  eventRegistration: EventRegistration\n): void {\n  // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\n  // a little bit by handling the return values anyways.\n  let events;\n  if (pathGetFront(query._path) === '.info') {\n    events = syncTreeRemoveEventRegistration(\n      repo.infoSyncTree_,\n      query,\n      eventRegistration\n    );\n  } else {\n    events = syncTreeRemoveEventRegistration(\n      repo.serverSyncTree_,\n      query,\n      eventRegistration\n    );\n  }\n  eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\n\nexport function repoInterrupt(repo: Repo): void {\n  if (repo.persistentConnection_) {\n    repo.persistentConnection_.interrupt(INTERRUPT_REASON);\n  }\n}\n\nexport function repoResume(repo: Repo): void {\n  if (repo.persistentConnection_) {\n    repo.persistentConnection_.resume(INTERRUPT_REASON);\n  }\n}\n\nexport function repoStats(repo: Repo, showDelta: boolean = false): void {\n  if (typeof console === 'undefined') {\n    return;\n  }\n\n  let stats: { [k: string]: unknown };\n  if (showDelta) {\n    if (!repo.statsListener_) {\n      repo.statsListener_ = new StatsListener(repo.stats_);\n    }\n    stats = repo.statsListener_.get();\n  } else {\n    stats = repo.stats_.get();\n  }\n\n  const longestName = Object.keys(stats).reduce(\n    (previousValue, currentValue) =>\n      Math.max(currentValue.length, previousValue),\n    0\n  );\n\n  each(stats, (stat: string, value: unknown) => {\n    let paddedStat = stat;\n    // pad stat names to be the same length (plus 2 extra spaces).\n    for (let i = stat.length; i < longestName + 2; i++) {\n      paddedStat += ' ';\n    }\n    console.log(paddedStat + value);\n  });\n}\n\nexport function repoStatsIncrementCounter(repo: Repo, metric: string): void {\n  repo.stats_.incrementCounter(metric);\n  statsReporterIncludeStat(repo.statsReporter_, metric);\n}\n\nfunction repoLog(repo: Repo, ...varArgs: unknown[]): void {\n  let prefix = '';\n  if (repo.persistentConnection_) {\n    prefix = repo.persistentConnection_.id + ':';\n  }\n  log(prefix, ...varArgs);\n}\n\nexport function repoCallOnCompleteCallback(\n  repo: Repo,\n  callback: ((status: Error | null, errorReason?: string) => void) | null,\n  status: string,\n  errorReason?: string | null\n): void {\n  if (callback) {\n    exceptionGuard(() => {\n      if (status === 'ok') {\n        callback(null);\n      } else {\n        const code = (status || 'error').toUpperCase();\n        let message = code;\n        if (errorReason) {\n          message += ': ' + errorReason;\n        }\n\n        const error = new Error(message);\n\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (error as any).code = code;\n        callback(error);\n      }\n    });\n  }\n}\n\n/**\n * Creates a new transaction, adds it to the transactions we're tracking, and\n * sends it to the server if possible.\n *\n * @param path - Path at which to do transaction.\n * @param transactionUpdate - Update callback.\n * @param onComplete - Completion callback.\n * @param unwatcher - Function that will be called when the transaction no longer\n * need data updates for `path`.\n * @param applyLocally - Whether or not to make intermediate results visible\n */\nexport function repoStartTransaction(\n  repo: Repo,\n  path: Path,\n  transactionUpdate: (a: unknown) => unknown,\n  onComplete: ((error: Error, committed: boolean, node: Node) => void) | null,\n  unwatcher: () => void,\n  applyLocally: boolean\n): void {\n  repoLog(repo, 'transaction on ' + path);\n\n  // Initialize transaction.\n  const transaction: Transaction = {\n    path,\n    update: transactionUpdate,\n    onComplete,\n    // One of TransactionStatus enums.\n    status: null,\n    // Used when combining transactions at different locations to figure out\n    // which one goes first.\n    order: LUIDGenerator(),\n    // Whether to raise local events for this transaction.\n    applyLocally,\n    // Count of how many times we've retried the transaction.\n    retryCount: 0,\n    // Function to call to clean up our .on() listener.\n    unwatcher,\n    // Stores why a transaction was aborted.\n    abortReason: null,\n    currentWriteId: null,\n    currentInputSnapshot: null,\n    currentOutputSnapshotRaw: null,\n    currentOutputSnapshotResolved: null\n  };\n\n  // Run transaction initially.\n  const currentState = repoGetLatestState(repo, path, undefined);\n  transaction.currentInputSnapshot = currentState;\n  const newVal = transaction.update(currentState.val());\n  if (newVal === undefined) {\n    // Abort transaction.\n    transaction.unwatcher();\n    transaction.currentOutputSnapshotRaw = null;\n    transaction.currentOutputSnapshotResolved = null;\n    if (transaction.onComplete) {\n      transaction.onComplete(null, false, transaction.currentInputSnapshot);\n    }\n  } else {\n    validateFirebaseData(\n      'transaction failed: Data returned ',\n      newVal,\n      transaction.path\n    );\n\n    // Mark as run and add to our queue.\n    transaction.status = TransactionStatus.RUN;\n    const queueNode = treeSubTree(repo.transactionQueueTree_, path);\n    const nodeQueue = treeGetValue(queueNode) || [];\n    nodeQueue.push(transaction);\n\n    treeSetValue(queueNode, nodeQueue);\n\n    // Update visibleData and raise events\n    // Note: We intentionally raise events after updating all of our\n    // transaction state, since the user could start new transactions from the\n    // event callbacks.\n    let priorityForNode;\n    if (\n      typeof newVal === 'object' &&\n      newVal !== null &&\n      contains(newVal, '.priority')\n    ) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      priorityForNode = safeGet(newVal as any, '.priority');\n      assert(\n        isValidPriority(priorityForNode),\n        'Invalid priority returned by transaction. ' +\n          'Priority must be a valid string, finite number, server value, or null.'\n      );\n    } else {\n      const currentNode =\n        syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path) ||\n        ChildrenNode.EMPTY_NODE;\n      priorityForNode = currentNode.getPriority().val();\n    }\n\n    const serverValues = repoGenerateServerValues(repo);\n    const newNodeUnresolved = nodeFromJSON(newVal, priorityForNode);\n    const newNode = resolveDeferredValueSnapshot(\n      newNodeUnresolved,\n      currentState,\n      serverValues\n    );\n    transaction.currentOutputSnapshotRaw = newNodeUnresolved;\n    transaction.currentOutputSnapshotResolved = newNode;\n    transaction.currentWriteId = repoGetNextWriteId(repo);\n\n    const events = syncTreeApplyUserOverwrite(\n      repo.serverSyncTree_,\n      path,\n      newNode,\n      transaction.currentWriteId,\n      transaction.applyLocally\n    );\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n\n    repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n  }\n}\n\n/**\n * @param excludeSets - A specific set to exclude\n */\nfunction repoGetLatestState(\n  repo: Repo,\n  path: Path,\n  excludeSets?: number[]\n): Node {\n  return (\n    syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path, excludeSets) ||\n    ChildrenNode.EMPTY_NODE\n  );\n}\n\n/**\n * Sends any already-run transactions that aren't waiting for outstanding\n * transactions to complete.\n *\n * Externally it's called with no arguments, but it calls itself recursively\n * with a particular transactionQueueTree node to recurse through the tree.\n *\n * @param node - transactionQueueTree node to start at.\n */\nfunction repoSendReadyTransactions(\n  repo: Repo,\n  node: Tree<Transaction[]> = repo.transactionQueueTree_\n): void {\n  // Before recursing, make sure any completed transactions are removed.\n  if (!node) {\n    repoPruneCompletedTransactionsBelowNode(repo, node);\n  }\n\n  if (treeGetValue(node)) {\n    const queue = repoBuildTransactionQueue(repo, node);\n    assert(queue.length > 0, 'Sending zero length transaction queue');\n\n    const allRun = queue.every(\n      (transaction: Transaction) => transaction.status === TransactionStatus.RUN\n    );\n\n    // If they're all run (and not sent), we can send them.  Else, we must wait.\n    if (allRun) {\n      repoSendTransactionQueue(repo, treeGetPath(node), queue);\n    }\n  } else if (treeHasChildren(node)) {\n    treeForEachChild(node, childNode => {\n      repoSendReadyTransactions(repo, childNode);\n    });\n  }\n}\n\n/**\n * Given a list of run transactions, send them to the server and then handle\n * the result (success or failure).\n *\n * @param path - The location of the queue.\n * @param queue - Queue of transactions under the specified location.\n */\nfunction repoSendTransactionQueue(\n  repo: Repo,\n  path: Path,\n  queue: Transaction[]\n): void {\n  // Mark transactions as sent and increment retry count!\n  const setsToIgnore = queue.map(txn => {\n    return txn.currentWriteId;\n  });\n  const latestState = repoGetLatestState(repo, path, setsToIgnore);\n  let snapToSend = latestState;\n  const latestHash = latestState.hash();\n  for (let i = 0; i < queue.length; i++) {\n    const txn = queue[i];\n    assert(\n      txn.status === TransactionStatus.RUN,\n      'tryToSendTransactionQueue_: items in queue should all be run.'\n    );\n    txn.status = TransactionStatus.SENT;\n    txn.retryCount++;\n    const relativePath = newRelativePath(path, txn.path);\n    // If we've gotten to this point, the output snapshot must be defined.\n    snapToSend = snapToSend.updateChild(\n      relativePath /** @type {!Node} */,\n      txn.currentOutputSnapshotRaw\n    );\n  }\n\n  const dataToSend = snapToSend.val(true);\n  const pathToSend = path;\n\n  // Send the put.\n  repo.server_.put(\n    pathToSend.toString(),\n    dataToSend,\n    (status: string) => {\n      repoLog(repo, 'transaction put response', {\n        path: pathToSend.toString(),\n        status\n      });\n\n      let events: Event[] = [];\n      if (status === 'ok') {\n        // Queue up the callbacks and fire them after cleaning up all of our\n        // transaction state, since the callback could trigger more\n        // transactions or sets.\n        const callbacks = [];\n        for (let i = 0; i < queue.length; i++) {\n          queue[i].status = TransactionStatus.COMPLETED;\n          events = events.concat(\n            syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId)\n          );\n          if (queue[i].onComplete) {\n            // We never unset the output snapshot, and given that this\n            // transaction is complete, it should be set\n            callbacks.push(() =>\n              queue[i].onComplete(\n                null,\n                true,\n                queue[i].currentOutputSnapshotResolved\n              )\n            );\n          }\n          queue[i].unwatcher();\n        }\n\n        // Now remove the completed transactions.\n        repoPruneCompletedTransactionsBelowNode(\n          repo,\n          treeSubTree(repo.transactionQueueTree_, path)\n        );\n        // There may be pending transactions that we can now send.\n        repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n\n        // Finally, trigger onComplete callbacks.\n        for (let i = 0; i < callbacks.length; i++) {\n          exceptionGuard(callbacks[i]);\n        }\n      } else {\n        // transactions are no longer sent.  Update their status appropriately.\n        if (status === 'datastale') {\n          for (let i = 0; i < queue.length; i++) {\n            if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\n              queue[i].status = TransactionStatus.NEEDS_ABORT;\n            } else {\n              queue[i].status = TransactionStatus.RUN;\n            }\n          }\n        } else {\n          warn(\n            'transaction at ' + pathToSend.toString() + ' failed: ' + status\n          );\n          for (let i = 0; i < queue.length; i++) {\n            queue[i].status = TransactionStatus.NEEDS_ABORT;\n            queue[i].abortReason = status;\n          }\n        }\n\n        repoRerunTransactions(repo, path);\n      }\n    },\n    latestHash\n  );\n}\n\n/**\n * Finds all transactions dependent on the data at changedPath and reruns them.\n *\n * Should be called any time cached data changes.\n *\n * Return the highest path that was affected by rerunning transactions. This\n * is the path at which events need to be raised for.\n *\n * @param changedPath - The path in mergedData that changed.\n * @returns The rootmost path that was affected by rerunning transactions.\n */\nfunction repoRerunTransactions(repo: Repo, changedPath: Path): Path {\n  const rootMostTransactionNode = repoGetAncestorTransactionNode(\n    repo,\n    changedPath\n  );\n  const path = treeGetPath(rootMostTransactionNode);\n\n  const queue = repoBuildTransactionQueue(repo, rootMostTransactionNode);\n  repoRerunTransactionQueue(repo, queue, path);\n\n  return path;\n}\n\n/**\n * Does all the work of rerunning transactions (as well as cleans up aborted\n * transactions and whatnot).\n *\n * @param queue - The queue of transactions to run.\n * @param path - The path the queue is for.\n */\nfunction repoRerunTransactionQueue(\n  repo: Repo,\n  queue: Transaction[],\n  path: Path\n): void {\n  if (queue.length === 0) {\n    return; // Nothing to do!\n  }\n\n  // Queue up the callbacks and fire them after cleaning up all of our\n  // transaction state, since the callback could trigger more transactions or\n  // sets.\n  const callbacks = [];\n  let events: Event[] = [];\n  // Ignore all of the sets we're going to re-run.\n  const txnsToRerun = queue.filter(q => {\n    return q.status === TransactionStatus.RUN;\n  });\n  const setsToIgnore = txnsToRerun.map(q => {\n    return q.currentWriteId;\n  });\n  for (let i = 0; i < queue.length; i++) {\n    const transaction = queue[i];\n    const relativePath = newRelativePath(path, transaction.path);\n    let abortTransaction = false,\n      abortReason;\n    assert(\n      relativePath !== null,\n      'rerunTransactionsUnderNode_: relativePath should not be null.'\n    );\n\n    if (transaction.status === TransactionStatus.NEEDS_ABORT) {\n      abortTransaction = true;\n      abortReason = transaction.abortReason;\n      events = events.concat(\n        syncTreeAckUserWrite(\n          repo.serverSyncTree_,\n          transaction.currentWriteId,\n          true\n        )\n      );\n    } else if (transaction.status === TransactionStatus.RUN) {\n      if (transaction.retryCount >= MAX_TRANSACTION_RETRIES) {\n        abortTransaction = true;\n        abortReason = 'maxretry';\n        events = events.concat(\n          syncTreeAckUserWrite(\n            repo.serverSyncTree_,\n            transaction.currentWriteId,\n            true\n          )\n        );\n      } else {\n        // This code reruns a transaction\n        const currentNode = repoGetLatestState(\n          repo,\n          transaction.path,\n          setsToIgnore\n        );\n        transaction.currentInputSnapshot = currentNode;\n        const newData = queue[i].update(currentNode.val());\n        if (newData !== undefined) {\n          validateFirebaseData(\n            'transaction failed: Data returned ',\n            newData,\n            transaction.path\n          );\n          let newDataNode = nodeFromJSON(newData);\n          const hasExplicitPriority =\n            typeof newData === 'object' &&\n            newData != null &&\n            contains(newData, '.priority');\n          if (!hasExplicitPriority) {\n            // Keep the old priority if there wasn't a priority explicitly specified.\n            newDataNode = newDataNode.updatePriority(currentNode.getPriority());\n          }\n\n          const oldWriteId = transaction.currentWriteId;\n          const serverValues = repoGenerateServerValues(repo);\n          const newNodeResolved = resolveDeferredValueSnapshot(\n            newDataNode,\n            currentNode,\n            serverValues\n          );\n\n          transaction.currentOutputSnapshotRaw = newDataNode;\n          transaction.currentOutputSnapshotResolved = newNodeResolved;\n          transaction.currentWriteId = repoGetNextWriteId(repo);\n          // Mutates setsToIgnore in place\n          setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\n          events = events.concat(\n            syncTreeApplyUserOverwrite(\n              repo.serverSyncTree_,\n              transaction.path,\n              newNodeResolved,\n              transaction.currentWriteId,\n              transaction.applyLocally\n            )\n          );\n          events = events.concat(\n            syncTreeAckUserWrite(repo.serverSyncTree_, oldWriteId, true)\n          );\n        } else {\n          abortTransaction = true;\n          abortReason = 'nodata';\n          events = events.concat(\n            syncTreeAckUserWrite(\n              repo.serverSyncTree_,\n              transaction.currentWriteId,\n              true\n            )\n          );\n        }\n      }\n    }\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n    events = [];\n    if (abortTransaction) {\n      // Abort.\n      queue[i].status = TransactionStatus.COMPLETED;\n\n      // Removing a listener can trigger pruning which can muck with\n      // mergedData/visibleData (as it prunes data). So defer the unwatcher\n      // until we're done.\n      (function (unwatcher) {\n        setTimeout(unwatcher, Math.floor(0));\n      })(queue[i].unwatcher);\n\n      if (queue[i].onComplete) {\n        if (abortReason === 'nodata') {\n          callbacks.push(() =>\n            queue[i].onComplete(null, false, queue[i].currentInputSnapshot)\n          );\n        } else {\n          callbacks.push(() =>\n            queue[i].onComplete(new Error(abortReason), false, null)\n          );\n        }\n      }\n    }\n  }\n\n  // Clean up completed transactions.\n  repoPruneCompletedTransactionsBelowNode(repo, repo.transactionQueueTree_);\n\n  // Now fire callbacks, now that we're in a good, known state.\n  for (let i = 0; i < callbacks.length; i++) {\n    exceptionGuard(callbacks[i]);\n  }\n\n  // Try to send the transaction result to the server.\n  repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n}\n\n/**\n * Returns the rootmost ancestor node of the specified path that has a pending\n * transaction on it, or just returns the node for the given path if there are\n * no pending transactions on any ancestor.\n *\n * @param path - The location to start at.\n * @returns The rootmost node with a transaction.\n */\nfunction repoGetAncestorTransactionNode(\n  repo: Repo,\n  path: Path\n): Tree<Transaction[]> {\n  let front;\n\n  // Start at the root and walk deeper into the tree towards path until we\n  // find a node with pending transactions.\n  let transactionNode = repo.transactionQueueTree_;\n  front = pathGetFront(path);\n  while (front !== null && treeGetValue(transactionNode) === undefined) {\n    transactionNode = treeSubTree(transactionNode, front);\n    path = pathPopFront(path);\n    front = pathGetFront(path);\n  }\n\n  return transactionNode;\n}\n\n/**\n * Builds the queue of all transactions at or below the specified\n * transactionNode.\n *\n * @param transactionNode\n * @returns The generated queue.\n */\nfunction repoBuildTransactionQueue(\n  repo: Repo,\n  transactionNode: Tree<Transaction[]>\n): Transaction[] {\n  // Walk any child transaction queues and aggregate them into a single queue.\n  const transactionQueue: Transaction[] = [];\n  repoAggregateTransactionQueuesForNode(\n    repo,\n    transactionNode,\n    transactionQueue\n  );\n\n  // Sort them by the order the transactions were created.\n  transactionQueue.sort((a, b) => a.order - b.order);\n\n  return transactionQueue;\n}\n\nfunction repoAggregateTransactionQueuesForNode(\n  repo: Repo,\n  node: Tree<Transaction[]>,\n  queue: Transaction[]\n): void {\n  const nodeQueue = treeGetValue(node);\n  if (nodeQueue) {\n    for (let i = 0; i < nodeQueue.length; i++) {\n      queue.push(nodeQueue[i]);\n    }\n  }\n\n  treeForEachChild(node, child => {\n    repoAggregateTransactionQueuesForNode(repo, child, queue);\n  });\n}\n\n/**\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\n */\nfunction repoPruneCompletedTransactionsBelowNode(\n  repo: Repo,\n  node: Tree<Transaction[]>\n): void {\n  const queue = treeGetValue(node);\n  if (queue) {\n    let to = 0;\n    for (let from = 0; from < queue.length; from++) {\n      if (queue[from].status !== TransactionStatus.COMPLETED) {\n        queue[to] = queue[from];\n        to++;\n      }\n    }\n    queue.length = to;\n    treeSetValue(node, queue.length > 0 ? queue : undefined);\n  }\n\n  treeForEachChild(node, childNode => {\n    repoPruneCompletedTransactionsBelowNode(repo, childNode);\n  });\n}\n\n/**\n * Aborts all transactions on ancestors or descendants of the specified path.\n * Called when doing a set() or update() since we consider them incompatible\n * with transactions.\n *\n * @param path - Path for which we want to abort related transactions.\n */\nfunction repoAbortTransactions(repo: Repo, path: Path): Path {\n  const affectedPath = treeGetPath(repoGetAncestorTransactionNode(repo, path));\n\n  const transactionNode = treeSubTree(repo.transactionQueueTree_, path);\n\n  treeForEachAncestor(transactionNode, (node: Tree<Transaction[]>) => {\n    repoAbortTransactionsOnNode(repo, node);\n  });\n\n  repoAbortTransactionsOnNode(repo, transactionNode);\n\n  treeForEachDescendant(transactionNode, (node: Tree<Transaction[]>) => {\n    repoAbortTransactionsOnNode(repo, node);\n  });\n\n  return affectedPath;\n}\n\n/**\n * Abort transactions stored in this transaction queue node.\n *\n * @param node - Node to abort transactions for.\n */\nfunction repoAbortTransactionsOnNode(\n  repo: Repo,\n  node: Tree<Transaction[]>\n): void {\n  const queue = treeGetValue(node);\n  if (queue) {\n    // Queue up the callbacks and fire them after cleaning up all of our\n    // transaction state, since the callback could trigger more transactions\n    // or sets.\n    const callbacks = [];\n\n    // Go through queue.  Any already-sent transactions must be marked for\n    // abort, while the unsent ones can be immediately aborted and removed.\n    let events: Event[] = [];\n    let lastSent = -1;\n    for (let i = 0; i < queue.length; i++) {\n      if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\n        // Already marked.  No action needed.\n      } else if (queue[i].status === TransactionStatus.SENT) {\n        assert(\n          lastSent === i - 1,\n          'All SENT items should be at beginning of queue.'\n        );\n        lastSent = i;\n        // Mark transaction for abort when it comes back.\n        queue[i].status = TransactionStatus.SENT_NEEDS_ABORT;\n        queue[i].abortReason = 'set';\n      } else {\n        assert(\n          queue[i].status === TransactionStatus.RUN,\n          'Unexpected transaction status in abort'\n        );\n        // We can abort it immediately.\n        queue[i].unwatcher();\n        events = events.concat(\n          syncTreeAckUserWrite(\n            repo.serverSyncTree_,\n            queue[i].currentWriteId,\n            true\n          )\n        );\n        if (queue[i].onComplete) {\n          callbacks.push(\n            queue[i].onComplete.bind(null, new Error('set'), false, null)\n          );\n        }\n      }\n    }\n    if (lastSent === -1) {\n      // We're not waiting for any sent transactions.  We can clear the queue.\n      treeSetValue(node, undefined);\n    } else {\n      // Remove the transactions we aborted.\n      queue.length = lastSent + 1;\n    }\n\n    // Now fire the callbacks.\n    eventQueueRaiseEventsForChangedPath(\n      repo.eventQueue_,\n      treeGetPath(node),\n      events\n    );\n    for (let i = 0; i < callbacks.length; i++) {\n      exceptionGuard(callbacks[i]);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../../RepoInfo';\nimport { Path } from '../Path';\nimport { warnIfPageIsSecure, warn, fatal } from '../util';\n\nfunction decodePath(pathString: string): string {\n  let pathStringDecoded = '';\n  const pieces = pathString.split('/');\n  for (let i = 0; i < pieces.length; i++) {\n    if (pieces[i].length > 0) {\n      let piece = pieces[i];\n      try {\n        piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\n      } catch (e) {}\n      pathStringDecoded += '/' + piece;\n    }\n  }\n  return pathStringDecoded;\n}\n\n/**\n * @returns key value hash\n */\nfunction decodeQuery(queryString: string): { [key: string]: string } {\n  const results = {};\n  if (queryString.charAt(0) === '?') {\n    queryString = queryString.substring(1);\n  }\n  for (const segment of queryString.split('&')) {\n    if (segment.length === 0) {\n      continue;\n    }\n    const kv = segment.split('=');\n    if (kv.length === 2) {\n      results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\n    } else {\n      warn(`Invalid query segment '${segment}' in query '${queryString}'`);\n    }\n  }\n  return results;\n}\n\nexport const parseRepoInfo = function (\n  dataURL: string,\n  nodeAdmin: boolean\n): { repoInfo: RepoInfo; path: Path } {\n  const parsedUrl = parseDatabaseURL(dataURL),\n    namespace = parsedUrl.namespace;\n\n  if (parsedUrl.domain === 'firebase.com') {\n    fatal(\n      parsedUrl.host +\n        ' is no longer supported. ' +\n        'Please use <YOUR FIREBASE>.firebaseio.com instead'\n    );\n  }\n\n  // Catch common error of uninitialized namespace value.\n  if (\n    (!namespace || namespace === 'undefined') &&\n    parsedUrl.domain !== 'localhost'\n  ) {\n    fatal(\n      'Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com'\n    );\n  }\n\n  if (!parsedUrl.secure) {\n    warnIfPageIsSecure();\n  }\n\n  const webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\n\n  return {\n    repoInfo: new RepoInfo(\n      parsedUrl.host,\n      parsedUrl.secure,\n      namespace,\n      nodeAdmin,\n      webSocketOnly,\n      /*persistenceKey=*/ '',\n      /*includeNamespaceInQueryParams=*/ namespace !== parsedUrl.subdomain\n    ),\n    path: new Path(parsedUrl.pathString)\n  };\n};\n\nexport const parseDatabaseURL = function (dataURL: string): {\n  host: string;\n  port: number;\n  domain: string;\n  subdomain: string;\n  secure: boolean;\n  scheme: string;\n  pathString: string;\n  namespace: string;\n} {\n  // Default to empty strings in the event of a malformed string.\n  let host = '',\n    domain = '',\n    subdomain = '',\n    pathString = '',\n    namespace = '';\n\n  // Always default to SSL, unless otherwise specified.\n  let secure = true,\n    scheme = 'https',\n    port = 443;\n\n  // Don't do any validation here. The caller is responsible for validating the result of parsing.\n  if (typeof dataURL === 'string') {\n    // Parse scheme.\n    let colonInd = dataURL.indexOf('//');\n    if (colonInd >= 0) {\n      scheme = dataURL.substring(0, colonInd - 1);\n      dataURL = dataURL.substring(colonInd + 2);\n    }\n\n    // Parse host, path, and query string.\n    let slashInd = dataURL.indexOf('/');\n    if (slashInd === -1) {\n      slashInd = dataURL.length;\n    }\n    let questionMarkInd = dataURL.indexOf('?');\n    if (questionMarkInd === -1) {\n      questionMarkInd = dataURL.length;\n    }\n    host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\n    if (slashInd < questionMarkInd) {\n      // For pathString, questionMarkInd will always come after slashInd\n      pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\n    }\n    const queryParams = decodeQuery(\n      dataURL.substring(Math.min(dataURL.length, questionMarkInd))\n    );\n\n    // If we have a port, use scheme for determining if it's secure.\n    colonInd = host.indexOf(':');\n    if (colonInd >= 0) {\n      secure = scheme === 'https' || scheme === 'wss';\n      port = parseInt(host.substring(colonInd + 1), 10);\n    } else {\n      colonInd = host.length;\n    }\n\n    const hostWithoutPort = host.slice(0, colonInd);\n    if (hostWithoutPort.toLowerCase() === 'localhost') {\n      domain = 'localhost';\n    } else if (hostWithoutPort.split('.').length <= 2) {\n      domain = hostWithoutPort;\n    } else {\n      // Interpret the subdomain of a 3 or more component URL as the namespace name.\n      const dotInd = host.indexOf('.');\n      subdomain = host.substring(0, dotInd).toLowerCase();\n      domain = host.substring(dotInd + 1);\n      // Normalize namespaces to lowercase to share storage / connection.\n      namespace = subdomain;\n    }\n    // Always treat the value of the `ns` as the namespace name if it is present.\n    if ('ns' in queryParams) {\n      namespace = queryParams['ns'];\n    }\n  }\n\n  return {\n    host,\n    port,\n    domain,\n    subdomain,\n    secure,\n    scheme,\n    pathString,\n    namespace\n  };\n};\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, getModularInstance, Deferred } from '@firebase/util';\n\nimport {\n  Repo,\n  repoAddEventCallbackForQuery,\n  repoGetValue,\n  repoRemoveEventCallbackForQuery,\n  repoServerTime,\n  repoSetWithPriority,\n  repoUpdate\n} from '../core/Repo';\nimport { ChildrenNode } from '../core/snap/ChildrenNode';\nimport { Index } from '../core/snap/indexes/Index';\nimport { KEY_INDEX } from '../core/snap/indexes/KeyIndex';\nimport { PathIndex } from '../core/snap/indexes/PathIndex';\nimport { PRIORITY_INDEX } from '../core/snap/indexes/PriorityIndex';\nimport { VALUE_INDEX } from '../core/snap/indexes/ValueIndex';\nimport { Node } from '../core/snap/Node';\nimport { syncPointSetReferenceConstructor } from '../core/SyncPoint';\nimport { syncTreeSetReferenceConstructor } from '../core/SyncTree';\nimport { parseRepoInfo } from '../core/util/libs/parser';\nimport { nextPushId } from '../core/util/NextPushId';\nimport {\n  Path,\n  pathChild,\n  pathEquals,\n  pathGetBack,\n  pathGetFront,\n  pathIsEmpty,\n  pathParent,\n  pathToUrlEncodedString\n} from '../core/util/Path';\nimport {\n  fatal,\n  MAX_NAME,\n  MIN_NAME,\n  ObjectToUniqueKey\n} from '../core/util/util';\nimport {\n  isValidPriority,\n  validateFirebaseDataArg,\n  validateFirebaseMergeDataArg,\n  validateKey,\n  validatePathString,\n  validatePriority,\n  validateRootPathString,\n  validateUrl,\n  validateWritablePath\n} from '../core/util/validation';\nimport { Change } from '../core/view/Change';\nimport { CancelEvent, DataEvent, EventType } from '../core/view/Event';\nimport {\n  CallbackContext,\n  EventRegistration,\n  QueryContext,\n  UserCallback\n} from '../core/view/EventRegistration';\nimport {\n  QueryParams,\n  queryParamsEndAt,\n  queryParamsEndBefore,\n  queryParamsGetQueryObject,\n  queryParamsLimitToFirst,\n  queryParamsLimitToLast,\n  queryParamsOrderBy,\n  queryParamsStartAfter,\n  queryParamsStartAt\n} from '../core/view/QueryParams';\n\nimport { Database } from './Database';\nimport { OnDisconnect } from './OnDisconnect';\nimport {\n  ListenOptions,\n  Query as Query,\n  DatabaseReference,\n  Unsubscribe,\n  ThenableReference\n} from './Reference';\n\n/**\n * @internal\n */\nexport class QueryImpl implements Query, QueryContext {\n  /**\n   * @hideconstructor\n   */\n  constructor(\n    readonly _repo: Repo,\n    readonly _path: Path,\n    readonly _queryParams: QueryParams,\n    readonly _orderByCalled: boolean\n  ) {}\n\n  get key(): string | null {\n    if (pathIsEmpty(this._path)) {\n      return null;\n    } else {\n      return pathGetBack(this._path);\n    }\n  }\n\n  get ref(): DatabaseReference {\n    return new ReferenceImpl(this._repo, this._path);\n  }\n\n  get _queryIdentifier(): string {\n    const obj = queryParamsGetQueryObject(this._queryParams);\n    const id = ObjectToUniqueKey(obj);\n    return id === '{}' ? 'default' : id;\n  }\n\n  /**\n   * An object representation of the query parameters used by this Query.\n   */\n  get _queryObject(): object {\n    return queryParamsGetQueryObject(this._queryParams);\n  }\n\n  isEqual(other: QueryImpl | null): boolean {\n    other = getModularInstance(other);\n    if (!(other instanceof QueryImpl)) {\n      return false;\n    }\n\n    const sameRepo = this._repo === other._repo;\n    const samePath = pathEquals(this._path, other._path);\n    const sameQueryIdentifier =\n      this._queryIdentifier === other._queryIdentifier;\n\n    return sameRepo && samePath && sameQueryIdentifier;\n  }\n\n  toJSON(): string {\n    return this.toString();\n  }\n\n  toString(): string {\n    return this._repo.toString() + pathToUrlEncodedString(this._path);\n  }\n}\n\n/**\n * Validates that no other order by call has been made\n */\nfunction validateNoPreviousOrderByCall(query: QueryImpl, fnName: string) {\n  if (query._orderByCalled === true) {\n    throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\n  }\n}\n\n/**\n * Validates start/end values for queries.\n */\nfunction validateQueryEndpoints(params: QueryParams) {\n  let startNode = null;\n  let endNode = null;\n  if (params.hasStart()) {\n    startNode = params.getIndexStartValue();\n  }\n  if (params.hasEnd()) {\n    endNode = params.getIndexEndValue();\n  }\n\n  if (params.getIndex() === KEY_INDEX) {\n    const tooManyArgsError =\n      'Query: When ordering by key, you may only pass one argument to ' +\n      'startAt(), endAt(), or equalTo().';\n    const wrongArgTypeError =\n      'Query: When ordering by key, the argument passed to startAt(), startAfter(), ' +\n      'endAt(), endBefore(), or equalTo() must be a string.';\n    if (params.hasStart()) {\n      const startName = params.getIndexStartName();\n      if (startName !== MIN_NAME) {\n        throw new Error(tooManyArgsError);\n      } else if (typeof startNode !== 'string') {\n        throw new Error(wrongArgTypeError);\n      }\n    }\n    if (params.hasEnd()) {\n      const endName = params.getIndexEndName();\n      if (endName !== MAX_NAME) {\n        throw new Error(tooManyArgsError);\n      } else if (typeof endNode !== 'string') {\n        throw new Error(wrongArgTypeError);\n      }\n    }\n  } else if (params.getIndex() === PRIORITY_INDEX) {\n    if (\n      (startNode != null && !isValidPriority(startNode)) ||\n      (endNode != null && !isValidPriority(endNode))\n    ) {\n      throw new Error(\n        'Query: When ordering by priority, the first argument passed to startAt(), ' +\n          'startAfter() endAt(), endBefore(), or equalTo() must be a valid priority value ' +\n          '(null, a number, or a string).'\n      );\n    }\n  } else {\n    assert(\n      params.getIndex() instanceof PathIndex ||\n        params.getIndex() === VALUE_INDEX,\n      'unknown index type.'\n    );\n    if (\n      (startNode != null && typeof startNode === 'object') ||\n      (endNode != null && typeof endNode === 'object')\n    ) {\n      throw new Error(\n        'Query: First argument passed to startAt(), startAfter(), endAt(), endBefore(), or ' +\n          'equalTo() cannot be an object.'\n      );\n    }\n  }\n}\n\n/**\n * Validates that limit* has been called with the correct combination of parameters\n */\nfunction validateLimit(params: QueryParams) {\n  if (\n    params.hasStart() &&\n    params.hasEnd() &&\n    params.hasLimit() &&\n    !params.hasAnchoredLimit()\n  ) {\n    throw new Error(\n      \"Query: Can't combine startAt(), startAfter(), endAt(), endBefore(), and limit(). Use \" +\n        'limitToFirst() or limitToLast() instead.'\n    );\n  }\n}\n\n/**\n * @internal\n */\nexport class ReferenceImpl extends QueryImpl implements DatabaseReference {\n  /** @hideconstructor */\n  constructor(repo: Repo, path: Path) {\n    super(repo, path, new QueryParams(), false);\n  }\n\n  get parent(): ReferenceImpl | null {\n    const parentPath = pathParent(this._path);\n    return parentPath === null\n      ? null\n      : new ReferenceImpl(this._repo, parentPath);\n  }\n\n  get root(): ReferenceImpl {\n    let ref: ReferenceImpl = this;\n    while (ref.parent !== null) {\n      ref = ref.parent;\n    }\n    return ref;\n  }\n}\n\n/**\n * A `DataSnapshot` contains data from a Database location.\n *\n * Any time you read data from the Database, you receive the data as a\n * `DataSnapshot`. A `DataSnapshot` is passed to the event callbacks you attach\n * with `on()` or `once()`. You can extract the contents of the snapshot as a\n * JavaScript object by calling the `val()` method. Alternatively, you can\n * traverse into the snapshot by calling `child()` to return child snapshots\n * (which you could then call `val()` on).\n *\n * A `DataSnapshot` is an efficiently generated, immutable copy of the data at\n * a Database location. It cannot be modified and will never change (to modify\n * data, you always call the `set()` method on a `Reference` directly).\n */\nexport class DataSnapshot {\n  /**\n   * @param _node - A SnapshotNode to wrap.\n   * @param ref - The location this snapshot came from.\n   * @param _index - The iteration order for this snapshot\n   * @hideconstructor\n   */\n  constructor(\n    readonly _node: Node,\n    /**\n     * The location of this DataSnapshot.\n     */\n    readonly ref: DatabaseReference,\n    readonly _index: Index\n  ) {}\n\n  /**\n   * Gets the priority value of the data in this `DataSnapshot`.\n   *\n   * Applications need not use priority but can order collections by\n   * ordinary properties (see\n   * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data |Sorting and filtering data}\n   * ).\n   */\n  get priority(): string | number | null {\n    // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\n    return this._node.getPriority().val() as string | number | null;\n  }\n\n  /**\n   * The key (last part of the path) of the location of this `DataSnapshot`.\n   *\n   * The last token in a Database location is considered its key. For example,\n   * \"ada\" is the key for the /users/ada/ node. Accessing the key on any\n   * `DataSnapshot` will return the key for the location that generated it.\n   * However, accessing the key on the root URL of a Database will return\n   * `null`.\n   */\n  get key(): string | null {\n    return this.ref.key;\n  }\n\n  /** Returns the number of child properties of this `DataSnapshot`. */\n  get size(): number {\n    return this._node.numChildren();\n  }\n\n  /**\n   * Gets another `DataSnapshot` for the location at the specified relative path.\n   *\n   * Passing a relative path to the `child()` method of a DataSnapshot returns\n   * another `DataSnapshot` for the location at the specified relative path. The\n   * relative path can either be a simple child name (for example, \"ada\") or a\n   * deeper, slash-separated path (for example, \"ada/name/first\"). If the child\n   * location has no data, an empty `DataSnapshot` (that is, a `DataSnapshot`\n   * whose value is `null`) is returned.\n   *\n   * @param path - A relative path to the location of child data.\n   */\n  child(path: string): DataSnapshot {\n    const childPath = new Path(path);\n    const childRef = child(this.ref, path);\n    return new DataSnapshot(\n      this._node.getChild(childPath),\n      childRef,\n      PRIORITY_INDEX\n    );\n  }\n  /**\n   * Returns true if this `DataSnapshot` contains any data. It is slightly more\n   * efficient than using `snapshot.val() !== null`.\n   */\n  exists(): boolean {\n    return !this._node.isEmpty();\n  }\n\n  /**\n   * Exports the entire contents of the DataSnapshot as a JavaScript object.\n   *\n   * The `exportVal()` method is similar to `val()`, except priority information\n   * is included (if available), making it suitable for backing up your data.\n   *\n   * @returns The DataSnapshot's contents as a JavaScript value (Object,\n   *   Array, string, number, boolean, or `null`).\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  exportVal(): any {\n    return this._node.val(true);\n  }\n\n  /**\n   * Enumerates the top-level children in the `DataSnapshot`.\n   *\n   * Because of the way JavaScript objects work, the ordering of data in the\n   * JavaScript object returned by `val()` is not guaranteed to match the\n   * ordering on the server nor the ordering of `onChildAdded()` events. That is\n   * where `forEach()` comes in handy. It guarantees the children of a\n   * `DataSnapshot` will be iterated in their query order.\n   *\n   * If no explicit `orderBy*()` method is used, results are returned\n   * ordered by key (unless priorities are used, in which case, results are\n   * returned by priority).\n   *\n   * @param action - A function that will be called for each child DataSnapshot.\n   * The callback can return true to cancel further enumeration.\n   * @returns true if enumeration was canceled due to your callback returning\n   * true.\n   */\n  forEach(action: (child: DataSnapshot) => boolean | void): boolean {\n    if (this._node.isLeafNode()) {\n      return false;\n    }\n\n    const childrenNode = this._node as ChildrenNode;\n    // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\n    return !!childrenNode.forEachChild(this._index, (key, node) => {\n      return action(\n        new DataSnapshot(node, child(this.ref, key), PRIORITY_INDEX)\n      );\n    });\n  }\n\n  /**\n   * Returns true if the specified child path has (non-null) data.\n   *\n   * @param path - A relative path to the location of a potential child.\n   * @returns `true` if data exists at the specified child path; else\n   *  `false`.\n   */\n  hasChild(path: string): boolean {\n    const childPath = new Path(path);\n    return !this._node.getChild(childPath).isEmpty();\n  }\n\n  /**\n   * Returns whether or not the `DataSnapshot` has any non-`null` child\n   * properties.\n   *\n   * You can use `hasChildren()` to determine if a `DataSnapshot` has any\n   * children. If it does, you can enumerate them using `forEach()`. If it\n   * doesn't, then either this snapshot contains a primitive value (which can be\n   * retrieved with `val()`) or it is empty (in which case, `val()` will return\n   * `null`).\n   *\n   * @returns true if this snapshot has any children; else false.\n   */\n  hasChildren(): boolean {\n    if (this._node.isLeafNode()) {\n      return false;\n    } else {\n      return !this._node.isEmpty();\n    }\n  }\n\n  /**\n   * Returns a JSON-serializable representation of this object.\n   */\n  toJSON(): object | null {\n    return this.exportVal();\n  }\n\n  /**\n   * Extracts a JavaScript value from a `DataSnapshot`.\n   *\n   * Depending on the data in a `DataSnapshot`, the `val()` method may return a\n   * scalar type (string, number, or boolean), an array, or an object. It may\n   * also return null, indicating that the `DataSnapshot` is empty (contains no\n   * data).\n   *\n   * @returns The DataSnapshot's contents as a JavaScript value (Object,\n   *   Array, string, number, boolean, or `null`).\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  val(): any {\n    return this._node.val();\n  }\n}\n/**\n *\n * Returns a `Reference` representing the location in the Database\n * corresponding to the provided path. If no path is provided, the `Reference`\n * will point to the root of the Database.\n *\n * @param db - The database instance to obtain a reference for.\n * @param path - Optional path representing the location the returned\n *   `Reference` will point. If not provided, the returned `Reference` will\n *   point to the root of the Database.\n * @returns If a path is provided, a `Reference`\n *   pointing to the provided path. Otherwise, a `Reference` pointing to the\n *   root of the Database.\n */\nexport function ref(db: Database, path?: string): DatabaseReference {\n  db = getModularInstance(db);\n  db._checkNotDeleted('ref');\n  return path !== undefined ? child(db._root, path) : db._root;\n}\n\n/**\n * Returns a `Reference` representing the location in the Database\n * corresponding to the provided Firebase URL.\n *\n * An exception is thrown if the URL is not a valid Firebase Database URL or it\n * has a different domain than the current `Database` instance.\n *\n * Note that all query parameters (`orderBy`, `limitToLast`, etc.) are ignored\n * and are not applied to the returned `Reference`.\n *\n * @param db - The database instance to obtain a reference for.\n * @param url - The Firebase URL at which the returned `Reference` will\n *   point.\n * @returns A `Reference` pointing to the provided\n *   Firebase URL.\n */\nexport function refFromURL(db: Database, url: string): DatabaseReference {\n  db = getModularInstance(db);\n  db._checkNotDeleted('refFromURL');\n  const parsedURL = parseRepoInfo(url, db._repo.repoInfo_.nodeAdmin);\n  validateUrl('refFromURL', parsedURL);\n\n  const repoInfo = parsedURL.repoInfo;\n  if (\n    !db._repo.repoInfo_.isCustomHost() &&\n    repoInfo.host !== db._repo.repoInfo_.host\n  ) {\n    fatal(\n      'refFromURL' +\n        ': Host name does not match the current database: ' +\n        '(found ' +\n        repoInfo.host +\n        ' but expected ' +\n        db._repo.repoInfo_.host +\n        ')'\n    );\n  }\n\n  return ref(db, parsedURL.path.toString());\n}\n\n/**\n * Gets a `Reference` for the location at the specified relative path.\n *\n * The relative path can either be a simple child name (for example, \"ada\") or\n * a deeper slash-separated path (for example, \"ada/name/first\").\n *\n * @param parent - The parent location.\n * @param path - A relative path from this location to the desired child\n *   location.\n * @returns The specified child location.\n */\nexport function child(\n  parent: DatabaseReference,\n  path: string\n): DatabaseReference {\n  parent = getModularInstance(parent);\n  if (pathGetFront(parent._path) === null) {\n    validateRootPathString('child', 'path', path, false);\n  } else {\n    validatePathString('child', 'path', path, false);\n  }\n  return new ReferenceImpl(parent._repo, pathChild(parent._path, path));\n}\n\n/**\n * Returns an `OnDisconnect` object - see\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n * for more information on how to use it.\n *\n * @param ref - The reference to add OnDisconnect triggers for.\n */\nexport function onDisconnect(ref: DatabaseReference): OnDisconnect {\n  ref = getModularInstance(ref) as ReferenceImpl;\n  return new OnDisconnect(ref._repo, ref._path);\n}\n\nexport interface ThenableReferenceImpl\n  extends ReferenceImpl,\n    Pick<Promise<ReferenceImpl>, 'then' | 'catch'> {}\n\n/**\n * Generates a new child location using a unique key and returns its\n * `Reference`.\n *\n * This is the most common pattern for adding data to a collection of items.\n *\n * If you provide a value to `push()`, the value is written to the\n * generated location. If you don't pass a value, nothing is written to the\n * database and the child remains empty (but you can use the `Reference`\n * elsewhere).\n *\n * The unique keys generated by `push()` are ordered by the current time, so the\n * resulting list of items is chronologically sorted. The keys are also\n * designed to be unguessable (they contain 72 random bits of entropy).\n *\n * See {@link https://firebase.google.com/docs/database/web/lists-of-data#append_to_a_list_of_data | Append to a list of data}\n * </br>See {@link ttps://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html | The 2^120 Ways to Ensure Unique Identifiers}\n *\n * @param parent - The parent location.\n * @param value - Optional value to be written at the generated location.\n * @returns Combined `Promise` and `Reference`; resolves when write is complete,\n * but can be used immediately as the `Reference` to the child location.\n */\nexport function push(\n  parent: DatabaseReference,\n  value?: unknown\n): ThenableReference {\n  parent = getModularInstance(parent);\n  validateWritablePath('push', parent._path);\n  validateFirebaseDataArg('push', value, parent._path, true);\n  const now = repoServerTime(parent._repo);\n  const name = nextPushId(now);\n\n  // push() returns a ThennableReference whose promise is fulfilled with a\n  // regular Reference. We use child() to create handles to two different\n  // references. The first is turned into a ThennableReference below by adding\n  // then() and catch() methods and is used as the return value of push(). The\n  // second remains a regular Reference and is used as the fulfilled value of\n  // the first ThennableReference.\n  const thennablePushRef: Partial<ThenableReferenceImpl> = child(\n    parent,\n    name\n  ) as ReferenceImpl;\n  const pushRef = child(parent, name) as ReferenceImpl;\n\n  let promise: Promise<ReferenceImpl>;\n  if (value != null) {\n    promise = set(pushRef, value).then(() => pushRef);\n  } else {\n    promise = Promise.resolve(pushRef);\n  }\n\n  thennablePushRef.then = promise.then.bind(promise);\n  thennablePushRef.catch = promise.then.bind(promise, undefined);\n  return thennablePushRef as ThenableReferenceImpl;\n}\n\n/**\n * Removes the data at this Database location.\n *\n * Any data at child locations will also be deleted.\n *\n * The effect of the remove will be visible immediately and the corresponding\n * event 'value' will be triggered. Synchronization of the remove to the\n * Firebase servers will also be started, and the returned Promise will resolve\n * when complete. If provided, the onComplete callback will be called\n * asynchronously after synchronization has finished.\n *\n * @param ref - The location to remove.\n * @returns Resolves when remove on server is complete.\n */\nexport function remove(ref: DatabaseReference): Promise<void> {\n  validateWritablePath('remove', ref._path);\n  return set(ref, null);\n}\n\n/**\n * Writes data to this Database location.\n *\n * This will overwrite any data at this location and all child locations.\n *\n * The effect of the write will be visible immediately, and the corresponding\n * events (\"value\", \"child_added\", etc.) will be triggered. Synchronization of\n * the data to the Firebase servers will also be started, and the returned\n * Promise will resolve when complete. If provided, the `onComplete` callback\n * will be called asynchronously after synchronization has finished.\n *\n * Passing `null` for the new value is equivalent to calling `remove()`; namely,\n * all data at this location and all child locations will be deleted.\n *\n * `set()` will remove any priority stored at this location, so if priority is\n * meant to be preserved, you need to use `setWithPriority()` instead.\n *\n * Note that modifying data with `set()` will cancel any pending transactions\n * at that location, so extreme care should be taken if mixing `set()` and\n * `transaction()` to modify the same data.\n *\n * A single `set()` will generate a single \"value\" event at the location where\n * the `set()` was performed.\n *\n * @param ref - The location to write to.\n * @param value - The value to be written (string, number, boolean, object,\n *   array, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function set(ref: DatabaseReference, value: unknown): Promise<void> {\n  ref = getModularInstance(ref);\n  validateWritablePath('set', ref._path);\n  validateFirebaseDataArg('set', value, ref._path, false);\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    ref._path,\n    value,\n    /*priority=*/ null,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Sets a priority for the data at this Database location.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\n * ).\n *\n * @param ref - The location to write to.\n * @param priority - The priority to be written (string, number, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function setPriority(\n  ref: DatabaseReference,\n  priority: string | number | null\n): Promise<void> {\n  ref = getModularInstance(ref);\n  validateWritablePath('setPriority', ref._path);\n  validatePriority('setPriority', priority, false);\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    pathChild(ref._path, '.priority'),\n    priority,\n    null,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Writes data the Database location. Like `set()` but also specifies the\n * priority for that data.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\n * ).\n *\n * @param ref - The location to write to.\n * @param value - The value to be written (string, number, boolean, object,\n *   array, or null).\n * @param priority - The priority to be written (string, number, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function setWithPriority(\n  ref: DatabaseReference,\n  value: unknown,\n  priority: string | number | null\n): Promise<void> {\n  validateWritablePath('setWithPriority', ref._path);\n  validateFirebaseDataArg('setWithPriority', value, ref._path, false);\n  validatePriority('setWithPriority', priority, false);\n  if (ref.key === '.length' || ref.key === '.keys') {\n    throw 'setWithPriority failed: ' + ref.key + ' is a read-only object.';\n  }\n\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    ref._path,\n    value,\n    priority,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Writes multiple values to the Database at once.\n *\n * The `values` argument contains multiple property-value pairs that will be\n * written to the Database together. Each child property can either be a simple\n * property (for example, \"name\") or a relative path (for example,\n * \"name/first\") from the current location to the data to update.\n *\n * As opposed to the `set()` method, `update()` can be use to selectively update\n * only the referenced properties at the current location (instead of replacing\n * all the child properties at the current location).\n *\n * The effect of the write will be visible immediately, and the corresponding\n * events ('value', 'child_added', etc.) will be triggered. Synchronization of\n * the data to the Firebase servers will also be started, and the returned\n * Promise will resolve when complete. If provided, the `onComplete` callback\n * will be called asynchronously after synchronization has finished.\n *\n * A single `update()` will generate a single \"value\" event at the location\n * where the `update()` was performed, regardless of how many children were\n * modified.\n *\n * Note that modifying data with `update()` will cancel any pending\n * transactions at that location, so extreme care should be taken if mixing\n * `update()` and `transaction()` to modify the same data.\n *\n * Passing `null` to `update()` will remove the data at this location.\n *\n * See\n * {@link https://firebase.googleblog.com/2015/09/introducing-multi-location-updates-and_86.html | Introducing multi-location updates and more}.\n *\n * @param ref - The location to write to.\n * @param values - Object containing multiple values.\n * @returns Resolves when update on server is complete.\n */\nexport function update(ref: DatabaseReference, values: object): Promise<void> {\n  validateFirebaseMergeDataArg('update', values, ref._path, false);\n  const deferred = new Deferred<void>();\n  repoUpdate(\n    ref._repo,\n    ref._path,\n    values as Record<string, unknown>,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Gets the most up-to-date result for this query.\n *\n * @param query - The query to run.\n * @returns A `Promise` which resolves to the resulting DataSnapshot if a value is\n * available, or rejects if the client is unable to return a value (e.g., if the\n * server is unreachable and there is nothing cached).\n */\nexport function get(query: Query): Promise<DataSnapshot> {\n  query = getModularInstance(query) as QueryImpl;\n  return repoGetValue(query._repo, query).then(node => {\n    return new DataSnapshot(\n      node,\n      new ReferenceImpl(query._repo, query._path),\n      query._queryParams.getIndex()\n    );\n  });\n}\n\n/**\n * Represents registration for 'value' events.\n */\nexport class ValueEventRegistration implements EventRegistration {\n  constructor(private callbackContext: CallbackContext) {}\n\n  respondsTo(eventType: string): boolean {\n    return eventType === 'value';\n  }\n\n  createEvent(change: Change, query: QueryContext): DataEvent {\n    const index = query._queryParams.getIndex();\n    return new DataEvent(\n      'value',\n      this,\n      new DataSnapshot(\n        change.snapshotNode,\n        new ReferenceImpl(query._repo, query._path),\n        index\n      )\n    );\n  }\n\n  getEventRunner(eventData: CancelEvent | DataEvent): () => void {\n    if (eventData.getEventType() === 'cancel') {\n      return () =>\n        this.callbackContext.onCancel((eventData as CancelEvent).error);\n    } else {\n      return () =>\n        this.callbackContext.onValue((eventData as DataEvent).snapshot, null);\n    }\n  }\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null {\n    if (this.callbackContext.hasCancelCallback) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n\n  matches(other: EventRegistration): boolean {\n    if (!(other instanceof ValueEventRegistration)) {\n      return false;\n    } else if (!other.callbackContext || !this.callbackContext) {\n      // If no callback specified, we consider it to match any callback.\n      return true;\n    } else {\n      return other.callbackContext.matches(this.callbackContext);\n    }\n  }\n\n  hasAnyCallback(): boolean {\n    return this.callbackContext !== null;\n  }\n}\n\n/**\n * Represents the registration of a child_x event.\n */\nexport class ChildEventRegistration implements EventRegistration {\n  constructor(\n    private eventType: string,\n    private callbackContext: CallbackContext | null\n  ) {}\n\n  respondsTo(eventType: string): boolean {\n    let eventToCheck =\n      eventType === 'children_added' ? 'child_added' : eventType;\n    eventToCheck =\n      eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\n    return this.eventType === eventToCheck;\n  }\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null {\n    if (this.callbackContext.hasCancelCallback) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n\n  createEvent(change: Change, query: QueryContext): DataEvent {\n    assert(change.childName != null, 'Child events should have a childName.');\n    const childRef = child(\n      new ReferenceImpl(query._repo, query._path),\n      change.childName\n    );\n    const index = query._queryParams.getIndex();\n    return new DataEvent(\n      change.type as EventType,\n      this,\n      new DataSnapshot(change.snapshotNode, childRef, index),\n      change.prevName\n    );\n  }\n\n  getEventRunner(eventData: CancelEvent | DataEvent): () => void {\n    if (eventData.getEventType() === 'cancel') {\n      return () =>\n        this.callbackContext.onCancel((eventData as CancelEvent).error);\n    } else {\n      return () =>\n        this.callbackContext.onValue(\n          (eventData as DataEvent).snapshot,\n          (eventData as DataEvent).prevName\n        );\n    }\n  }\n\n  matches(other: EventRegistration): boolean {\n    if (other instanceof ChildEventRegistration) {\n      return (\n        this.eventType === other.eventType &&\n        (!this.callbackContext ||\n          !other.callbackContext ||\n          this.callbackContext.matches(other.callbackContext))\n      );\n    }\n\n    return false;\n  }\n\n  hasAnyCallback(): boolean {\n    return !!this.callbackContext;\n  }\n}\n\nfunction addEventListener(\n  query: Query,\n  eventType: EventType,\n  callback: UserCallback,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n) {\n  let cancelCallback: ((error: Error) => unknown) | undefined;\n  if (typeof cancelCallbackOrListenOptions === 'object') {\n    cancelCallback = undefined;\n    options = cancelCallbackOrListenOptions;\n  }\n  if (typeof cancelCallbackOrListenOptions === 'function') {\n    cancelCallback = cancelCallbackOrListenOptions;\n  }\n\n  if (options && options.onlyOnce) {\n    const userCallback = callback;\n    const onceCallback: UserCallback = (dataSnapshot, previousChildName) => {\n      repoRemoveEventCallbackForQuery(query._repo, query, container);\n      userCallback(dataSnapshot, previousChildName);\n    };\n    onceCallback.userCallback = callback.userCallback;\n    onceCallback.context = callback.context;\n    callback = onceCallback;\n  }\n\n  const callbackContext = new CallbackContext(\n    callback,\n    cancelCallback || undefined\n  );\n  const container =\n    eventType === 'value'\n      ? new ValueEventRegistration(callbackContext)\n      : new ChildEventRegistration(eventType, callbackContext);\n  repoAddEventCallbackForQuery(query._repo, query, container);\n  return () => repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'value',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName?: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_added',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_changed',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_moved',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_removed',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\nexport { EventType };\n\n/**\n * Detaches a callback previously attached with `on()`.\n *\n * Detach a callback previously attached with `on()`. Note that if `on()` was\n * called multiple times with the same eventType and callback, the callback\n * will be called multiple times for each event, and `off()` must be called\n * multiple times to remove the callback. Calling `off()` on a parent listener\n * will not automatically remove listeners registered on child nodes, `off()`\n * must also be called on any child listeners to remove the callback.\n *\n * If a callback is not specified, all callbacks for the specified eventType\n * will be removed. Similarly, if no eventType is specified, all callbacks\n * for the `Reference` will be removed.\n *\n * Individual listeners can also be removed by invoking their unsubscribe\n * callbacks.\n *\n * @param query - The query that the listener was registered with.\n * @param eventType - One of the following strings: \"value\", \"child_added\",\n * \"child_changed\", \"child_removed\", or \"child_moved.\" If omitted, all callbacks\n * for the `Reference` will be removed.\n * @param callback - The callback function that was passed to `on()` or\n * `undefined` to remove all callbacks.\n */\nexport function off(\n  query: Query,\n  eventType?: EventType,\n  callback?: (\n    snapshot: DataSnapshot,\n    previousChildName?: string | null\n  ) => unknown\n): void {\n  let container: EventRegistration | null = null;\n  const expCallback = callback ? new CallbackContext(callback) : null;\n  if (eventType === 'value') {\n    container = new ValueEventRegistration(expCallback);\n  } else if (eventType) {\n    container = new ChildEventRegistration(eventType, expCallback);\n  }\n  repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\n\n/** Describes the different query constraints available in this SDK. */\nexport type QueryConstraintType =\n  | 'endAt'\n  | 'endBefore'\n  | 'startAt'\n  | 'startAfter'\n  | 'limitToFirst'\n  | 'limitToLast'\n  | 'orderByChild'\n  | 'orderByKey'\n  | 'orderByPriority'\n  | 'orderByValue'\n  | 'equalTo';\n\n/**\n * A `QueryConstraint` is used to narrow the set of documents returned by a\n * Database query. `QueryConstraint`s are created by invoking {@link endAt},\n * {@link endBefore}, {@link startAt}, {@link startAfter}, {@link\n * limitToFirst}, {@link limitToLast}, {@link orderByChild},\n * {@link orderByChild}, {@link orderByKey} , {@link orderByPriority} ,\n * {@link orderByValue}  or {@link equalTo} and\n * can then be passed to {@link query} to create a new query instance that\n * also contains this `QueryConstraint`.\n */\nexport abstract class QueryConstraint {\n  /** The type of this query constraints */\n  abstract readonly type: QueryConstraintType;\n\n  /**\n   * Takes the provided `Query` and returns a copy of the `Query` with this\n   * `QueryConstraint` applied.\n   */\n  abstract _apply<T>(query: QueryImpl): QueryImpl;\n}\n\nclass QueryEndAtConstraint extends QueryConstraint {\n  readonly type: 'endAt';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('endAt', this._value, query._path, true);\n    const newParams = queryParamsEndAt(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasEnd()) {\n      throw new Error(\n        'endAt: Starting point was already set (by another call to endAt, ' +\n          'endBefore or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified ending point.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The ending point is inclusive, so children with exactly the specified value\n * will be included in the query. The optional key argument can be used to\n * further limit the range of the query. If it is specified, then children that\n * have exactly the specified value must also have a key name less than or equal\n * to the specified key.\n *\n * You can read more about `endAt()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to end at. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to end at, among the children with the previously\n * specified priority. This argument is only allowed if ordering by child,\n * value, or priority.\n */\nexport function endAt(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('endAt', 'key', key, true);\n  return new QueryEndAtConstraint(value, key);\n}\n\nclass QueryEndBeforeConstraint extends QueryConstraint {\n  readonly type: 'endBefore';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('endBefore', this._value, query._path, false);\n    const newParams = queryParamsEndBefore(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasEnd()) {\n      throw new Error(\n        'endBefore: Starting point was already set (by another call to endAt, ' +\n          'endBefore or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified ending point (exclusive).\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The ending point is exclusive. If only a value is provided, children\n * with a value less than the specified value will be included in the query.\n * If a key is specified, then children must have a value lesss than or equal\n * to the specified value and a a key name less than the specified key.\n *\n * @param value - The value to end before. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to end before, among the children with the\n * previously specified priority. This argument is only allowed if ordering by\n * child, value, or priority.\n */\nexport function endBefore(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('endBefore', 'key', key, true);\n  return new QueryEndBeforeConstraint(value, key);\n}\n\nclass QueryStartAtConstraint extends QueryConstraint {\n  readonly type: 'startAt';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('startAt', this._value, query._path, true);\n    const newParams = queryParamsStartAt(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasStart()) {\n      throw new Error(\n        'startAt: Starting point was already set (by another call to startAt, ' +\n          'startBefore or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified starting point.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The starting point is inclusive, so children with exactly the specified value\n * will be included in the query. The optional key argument can be used to\n * further limit the range of the query. If it is specified, then children that\n * have exactly the specified value must also have a key name greater than or\n * equal to the specified key.\n *\n * You can read more about `startAt()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to start at. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start at. This argument is only allowed if\n * ordering by child, value, or priority.\n */\nexport function startAt(\n  value: number | string | boolean | null = null,\n  key?: string\n): QueryConstraint {\n  validateKey('startAt', 'key', key, true);\n  return new QueryStartAtConstraint(value, key);\n}\n\nclass QueryStartAfterConstraint extends QueryConstraint {\n  readonly type: 'startAfter';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('startAfter', this._value, query._path, false);\n    const newParams = queryParamsStartAfter(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasStart()) {\n      throw new Error(\n        'startAfter: Starting point was already set (by another call to startAt, ' +\n          'startAfter, or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified starting point (exclusive).\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The starting point is exclusive. If only a value is provided, children\n * with a value greater than the specified value will be included in the query.\n * If a key is specified, then children must have a value greater than or equal\n * to the specified value and a a key name greater than the specified key.\n *\n * @param value - The value to start after. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start after. This argument is only allowed if\n * ordering by child, value, or priority.\n */\nexport function startAfter(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('startAfter', 'key', key, true);\n  return new QueryStartAfterConstraint(value, key);\n}\n\nclass QueryLimitToFirstConstraint extends QueryConstraint {\n  readonly type: 'limitToFirst';\n\n  constructor(private readonly _limit: number) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    if (query._queryParams.hasLimit()) {\n      throw new Error(\n        'limitToFirst: Limit was already set (by another call to limitToFirst ' +\n          'or limitToLast).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      queryParamsLimitToFirst(query._queryParams, this._limit),\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that if limited to the first specific number\n * of children.\n *\n * The `limitToFirst()` method is used to set a maximum number of children to be\n * synced for a given callback. If we set a limit of 100, we will initially only\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\n * stored in our Database, a `child_added` event will fire for each message.\n * However, if we have over 100 messages, we will only receive a `child_added`\n * event for the first 100 ordered messages. As items change, we will receive\n * `child_removed` events for each item that drops out of the active list so\n * that the total number stays at 100.\n *\n * You can read more about `limitToFirst()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param limit - The maximum number of nodes to include in this query.\n */\nexport function limitToFirst(limit: number): QueryConstraint {\n  if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n    throw new Error('limitToFirst: First argument must be a positive integer.');\n  }\n  return new QueryLimitToFirstConstraint(limit);\n}\n\nclass QueryLimitToLastConstraint extends QueryConstraint {\n  readonly type: 'limitToLast';\n\n  constructor(private readonly _limit: number) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    if (query._queryParams.hasLimit()) {\n      throw new Error(\n        'limitToLast: Limit was already set (by another call to limitToFirst ' +\n          'or limitToLast).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      queryParamsLimitToLast(query._queryParams, this._limit),\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that is limited to return only the last\n * specified number of children.\n *\n * The `limitToLast()` method is used to set a maximum number of children to be\n * synced for a given callback. If we set a limit of 100, we will initially only\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\n * stored in our Database, a `child_added` event will fire for each message.\n * However, if we have over 100 messages, we will only receive a `child_added`\n * event for the last 100 ordered messages. As items change, we will receive\n * `child_removed` events for each item that drops out of the active list so\n * that the total number stays at 100.\n *\n * You can read more about `limitToLast()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param limit - The maximum number of nodes to include in this query.\n */\nexport function limitToLast(limit: number): QueryConstraint {\n  if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n    throw new Error('limitToLast: First argument must be a positive integer.');\n  }\n\n  return new QueryLimitToLastConstraint(limit);\n}\n\nclass QueryOrderByChildConstraint extends QueryConstraint {\n  readonly type: 'orderByChild';\n\n  constructor(private readonly _path: string) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByChild');\n    const parsedPath = new Path(this._path);\n    if (pathIsEmpty(parsedPath)) {\n      throw new Error(\n        'orderByChild: cannot pass in empty path. Use orderByValue() instead.'\n      );\n    }\n    const index = new PathIndex(parsedPath);\n    const newParams = queryParamsOrderBy(query._queryParams, index);\n    validateQueryEndpoints(newParams);\n\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by the specified child key.\n *\n * Queries can only order by one key at a time. Calling `orderByChild()`\n * multiple times on the same query is an error.\n *\n * Firebase queries allow you to order your data by any child key on the fly.\n * However, if you know in advance what your indexes will be, you can define\n * them via the .indexOn rule in your Security Rules for better performance. See\n * the{@link https://firebase.google.com/docs/database/security/indexing-data}\n * rule for more information.\n *\n * You can read more about `orderByChild()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n *\n * @param path - The path to order by.\n */\nexport function orderByChild(path: string): QueryConstraint {\n  if (path === '$key') {\n    throw new Error(\n      'orderByChild: \"$key\" is invalid.  Use orderByKey() instead.'\n    );\n  } else if (path === '$priority') {\n    throw new Error(\n      'orderByChild: \"$priority\" is invalid.  Use orderByPriority() instead.'\n    );\n  } else if (path === '$value') {\n    throw new Error(\n      'orderByChild: \"$value\" is invalid.  Use orderByValue() instead.'\n    );\n  }\n  validatePathString('orderByChild', 'path', path, false);\n  return new QueryOrderByChildConstraint(path);\n}\n\nclass QueryOrderByKeyConstraint extends QueryConstraint {\n  readonly type: 'orderByKey';\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByKey');\n    const newParams = queryParamsOrderBy(query._queryParams, KEY_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by the key.\n *\n * Sorts the results of a query by their (ascending) key values.\n *\n * You can read more about `orderByKey()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n */\nexport function orderByKey(): QueryConstraint {\n  return new QueryOrderByKeyConstraint();\n}\n\nclass QueryOrderByPriorityConstraint extends QueryConstraint {\n  readonly type: 'orderByPriority';\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByPriority');\n    const newParams = queryParamsOrderBy(query._queryParams, PRIORITY_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by priority.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}\n * for alternatives to priority.\n */\nexport function orderByPriority(): QueryConstraint {\n  return new QueryOrderByPriorityConstraint();\n}\n\nclass QueryOrderByValueConstraint extends QueryConstraint {\n  readonly type: 'orderByValue';\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByValue');\n    const newParams = queryParamsOrderBy(query._queryParams, VALUE_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by value.\n *\n * If the children of a query are all scalar values (string, number, or\n * boolean), you can order the results by their (ascending) values.\n *\n * You can read more about `orderByValue()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n */\nexport function orderByValue(): QueryConstraint {\n  return new QueryOrderByValueConstraint();\n}\n\nclass QueryEqualToValueConstraint extends QueryConstraint {\n  readonly type: 'equalTo';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('equalTo', this._value, query._path, false);\n    if (query._queryParams.hasStart()) {\n      throw new Error(\n        'equalTo: Starting point was already set (by another call to startAt/startAfter or ' +\n          'equalTo).'\n      );\n    }\n    if (query._queryParams.hasEnd()) {\n      throw new Error(\n        'equalTo: Ending point was already set (by another call to endAt/endBefore or ' +\n          'equalTo).'\n      );\n    }\n    return new QueryEndAtConstraint(this._value, this._key)._apply(\n      new QueryStartAtConstraint(this._value, this._key)._apply(query)\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` that includes children that match the specified\n * value.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The optional key argument can be used to further limit the range of the\n * query. If it is specified, then children that have exactly the specified\n * value must also have exactly the specified key as their key name. This can be\n * used to filter result sets with many matches for the same value.\n *\n * You can read more about `equalTo()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to match for. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start at, among the children with the\n * previously specified priority. This argument is only allowed if ordering by\n * child, value, or priority.\n */\nexport function equalTo(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('equalTo', 'key', key, true);\n  return new QueryEqualToValueConstraint(value, key);\n}\n\n/**\n * Creates a new immutable instance of `Query` that is extended to also include\n * additional query constraints.\n *\n * @param query - The Query instance to use as a base for the new constraints.\n * @param queryConstraints - The list of `QueryConstraint`s to apply.\n * @throws if any of the provided query constraints cannot be combined with the\n * existing or new constraints.\n */\nexport function query(\n  query: Query,\n  ...queryConstraints: QueryConstraint[]\n): Query {\n  let queryImpl = getModularInstance(query) as QueryImpl;\n  for (const constraint of queryConstraints) {\n    queryImpl = constraint._apply(queryImpl);\n  }\n  return queryImpl;\n}\n\n/**\n * Define reference constructor in various modules\n *\n * We are doing this here to avoid several circular\n * dependency issues\n */\nsyncPointSetReferenceConstructor(ReferenceImpl);\nsyncTreeSetReferenceConstructor(ReferenceImpl);\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport {\n  _FirebaseService,\n  _getProvider,\n  FirebaseApp,\n  getApp\n} from '@firebase/app';\nimport { AppCheckInternalComponentName } from '@firebase/app-check-interop-types';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\nimport {\n  getModularInstance,\n  createMockUserToken,\n  EmulatorMockTokenOptions\n} from '@firebase/util';\n\nimport { AppCheckTokenProvider } from '../core/AppCheckTokenProvider';\nimport {\n  AuthTokenProvider,\n  EmulatorTokenProvider,\n  FirebaseAuthTokenProvider\n} from '../core/AuthTokenProvider';\nimport { Repo, repoInterrupt, repoResume, repoStart } from '../core/Repo';\nimport { RepoInfo } from '../core/RepoInfo';\nimport { parseRepoInfo } from '../core/util/libs/parser';\nimport { newEmptyPath, pathIsEmpty } from '../core/util/Path';\nimport {\n  fatal,\n  log,\n  enableLogging as enableLoggingImpl\n} from '../core/util/util';\nimport { validateUrl } from '../core/util/validation';\n\nimport { ReferenceImpl } from './Reference_impl';\n\nexport { EmulatorMockTokenOptions } from '@firebase/util';\n/**\n * This variable is also defined in the firebase Node.js Admin SDK. Before\n * modifying this definition, consult the definition in:\n *\n * https://github.com/firebase/firebase-admin-node\n *\n * and make sure the two are consistent.\n */\nconst FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';\n\n/**\n * Creates and caches `Repo` instances.\n */\nconst repos: {\n  [appName: string]: {\n    [dbUrl: string]: Repo;\n  };\n} = {};\n\n/**\n * If true, any new `Repo` will be created to use `ReadonlyRestClient` (for testing purposes).\n */\nlet useRestClient = false;\n\n/**\n * Update an existing `Repo` in place to point to a new host/port.\n */\nfunction repoManagerApplyEmulatorSettings(\n  repo: Repo,\n  host: string,\n  port: number,\n  tokenProvider?: AuthTokenProvider\n): void {\n  repo.repoInfo_ = new RepoInfo(\n    `${host}:${port}`,\n    /* secure= */ false,\n    repo.repoInfo_.namespace,\n    repo.repoInfo_.webSocketOnly,\n    repo.repoInfo_.nodeAdmin,\n    repo.repoInfo_.persistenceKey,\n    repo.repoInfo_.includeNamespaceInQueryParams\n  );\n\n  if (tokenProvider) {\n    repo.authTokenProvider_ = tokenProvider;\n  }\n}\n\n/**\n * This function should only ever be called to CREATE a new database instance.\n * @internal\n */\nexport function repoManagerDatabaseFromApp(\n  app: FirebaseApp,\n  authProvider: Provider<FirebaseAuthInternalName>,\n  appCheckProvider?: Provider<AppCheckInternalComponentName>,\n  url?: string,\n  nodeAdmin?: boolean\n): Database {\n  let dbUrl: string | undefined = url || app.options.databaseURL;\n  if (dbUrl === undefined) {\n    if (!app.options.projectId) {\n      fatal(\n        \"Can't determine Firebase Database URL. Be sure to include \" +\n          ' a Project ID when calling firebase.initializeApp().'\n      );\n    }\n\n    log('Using default host for project ', app.options.projectId);\n    dbUrl = `${app.options.projectId}-default-rtdb.firebaseio.com`;\n  }\n\n  let parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n  let repoInfo = parsedUrl.repoInfo;\n\n  let isEmulator: boolean;\n\n  let dbEmulatorHost: string | undefined = undefined;\n  if (typeof process !== 'undefined') {\n    dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];\n  }\n\n  if (dbEmulatorHost) {\n    isEmulator = true;\n    dbUrl = `http://${dbEmulatorHost}?ns=${repoInfo.namespace}`;\n    parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n    repoInfo = parsedUrl.repoInfo;\n  } else {\n    isEmulator = !parsedUrl.repoInfo.secure;\n  }\n\n  const authTokenProvider =\n    nodeAdmin && isEmulator\n      ? new EmulatorTokenProvider(EmulatorTokenProvider.OWNER)\n      : new FirebaseAuthTokenProvider(app.name, app.options, authProvider);\n\n  validateUrl('Invalid Firebase Database URL', parsedUrl);\n  if (!pathIsEmpty(parsedUrl.path)) {\n    fatal(\n      'Database URL must point to the root of a Firebase Database ' +\n        '(not including a child path).'\n    );\n  }\n\n  const repo = repoManagerCreateRepo(\n    repoInfo,\n    app,\n    authTokenProvider,\n    new AppCheckTokenProvider(app.name, appCheckProvider)\n  );\n  return new Database(repo, app);\n}\n\n/**\n * Remove the repo and make sure it is disconnected.\n *\n */\nfunction repoManagerDeleteRepo(repo: Repo, appName: string): void {\n  const appRepos = repos[appName];\n  // This should never happen...\n  if (!appRepos || appRepos[repo.key] !== repo) {\n    fatal(`Database ${appName}(${repo.repoInfo_}) has already been deleted.`);\n  }\n  repoInterrupt(repo);\n  delete appRepos[repo.key];\n}\n\n/**\n * Ensures a repo doesn't already exist and then creates one using the\n * provided app.\n *\n * @param repoInfo - The metadata about the Repo\n * @returns The Repo object for the specified server / repoName.\n */\nfunction repoManagerCreateRepo(\n  repoInfo: RepoInfo,\n  app: FirebaseApp,\n  authTokenProvider: AuthTokenProvider,\n  appCheckProvider: AppCheckTokenProvider\n): Repo {\n  let appRepos = repos[app.name];\n\n  if (!appRepos) {\n    appRepos = {};\n    repos[app.name] = appRepos;\n  }\n\n  let repo = appRepos[repoInfo.toURLString()];\n  if (repo) {\n    fatal(\n      'Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.'\n    );\n  }\n  repo = new Repo(repoInfo, useRestClient, authTokenProvider, appCheckProvider);\n  appRepos[repoInfo.toURLString()] = repo;\n\n  return repo;\n}\n\n/**\n * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\n */\nexport function repoManagerForceRestClient(forceRestClient: boolean): void {\n  useRestClient = forceRestClient;\n}\n\n/**\n * Class representing a Firebase Realtime Database.\n */\nexport class Database implements _FirebaseService {\n  /** Represents a `Database` instance. */\n  readonly 'type' = 'database';\n\n  /** Track if the instance has been used (root or repo accessed) */\n  _instanceStarted: boolean = false;\n\n  /** Backing state for root_ */\n  private _rootInternal?: ReferenceImpl;\n\n  /** @hideconstructor */\n  constructor(\n    public _repoInternal: Repo,\n    /** The {@link @firebase/app#FirebaseApp} associated with this Realtime Database instance. */\n    readonly app: FirebaseApp\n  ) {}\n\n  get _repo(): Repo {\n    if (!this._instanceStarted) {\n      repoStart(\n        this._repoInternal,\n        this.app.options.appId,\n        this.app.options['databaseAuthVariableOverride']\n      );\n      this._instanceStarted = true;\n    }\n    return this._repoInternal;\n  }\n\n  get _root(): ReferenceImpl {\n    if (!this._rootInternal) {\n      this._rootInternal = new ReferenceImpl(this._repo, newEmptyPath());\n    }\n    return this._rootInternal;\n  }\n\n  _delete(): Promise<void> {\n    if (this._rootInternal !== null) {\n      repoManagerDeleteRepo(this._repo, this.app.name);\n      this._repoInternal = null;\n      this._rootInternal = null;\n    }\n    return Promise.resolve();\n  }\n\n  _checkNotDeleted(apiName: string) {\n    if (this._rootInternal === null) {\n      fatal('Cannot call ' + apiName + ' on a deleted database.');\n    }\n  }\n}\n\n/**\n * Returns the instance of the Realtime Database SDK that is associated\n * with the provided {@link @firebase/app#FirebaseApp}. Initializes a new instance with\n * with default settings if no instance exists or if the existing instance uses\n * a custom database URL.\n *\n * @param app - The {@link @firebase/app#FirebaseApp} instance that the returned Realtime\n * Database instance is associated with.\n * @param url - The URL of the Realtime Database instance to connect to. If not\n * provided, the SDK connects to the default instance of the Firebase App.\n * @returns The `Database` instance of the provided app.\n */\nexport function getDatabase(\n  app: FirebaseApp = getApp(),\n  url?: string\n): Database {\n  return _getProvider(app, 'database').getImmediate({\n    identifier: url\n  }) as Database;\n}\n\n/**\n * Modify the provided instance to communicate with the Realtime Database\n * emulator.\n *\n * <p>Note: This method must be called before performing any other operation.\n *\n * @param db - The instance to modify.\n * @param host - The emulator host (ex: localhost)\n * @param port - The emulator port (ex: 8080)\n * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules\n */\nexport function connectDatabaseEmulator(\n  db: Database,\n  host: string,\n  port: number,\n  options: {\n    mockUserToken?: EmulatorMockTokenOptions | string;\n  } = {}\n): void {\n  db = getModularInstance(db);\n  db._checkNotDeleted('useEmulator');\n  if (db._instanceStarted) {\n    fatal(\n      'Cannot call useEmulator() after instance has already been initialized.'\n    );\n  }\n\n  const repo = db._repoInternal;\n  let tokenProvider: EmulatorTokenProvider | undefined = undefined;\n  if (repo.repoInfo_.nodeAdmin) {\n    if (options.mockUserToken) {\n      fatal(\n        'mockUserToken is not supported by the Admin SDK. For client access with mock users, please use the \"firebase\" package instead of \"firebase-admin\".'\n      );\n    }\n    tokenProvider = new EmulatorTokenProvider(EmulatorTokenProvider.OWNER);\n  } else if (options.mockUserToken) {\n    const token =\n      typeof options.mockUserToken === 'string'\n        ? options.mockUserToken\n        : createMockUserToken(options.mockUserToken, db.app.options.projectId);\n    tokenProvider = new EmulatorTokenProvider(token);\n  }\n\n  // Modify the repo to apply emulator settings\n  repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider);\n}\n\n/**\n * Disconnects from the server (all Database operations will be completed\n * offline).\n *\n * The client automatically maintains a persistent connection to the Database\n * server, which will remain active indefinitely and reconnect when\n * disconnected. However, the `goOffline()` and `goOnline()` methods may be used\n * to control the client connection in cases where a persistent connection is\n * undesirable.\n *\n * While offline, the client will no longer receive data updates from the\n * Database. However, all Database operations performed locally will continue to\n * immediately fire events, allowing your application to continue behaving\n * normally. Additionally, each operation performed locally will automatically\n * be queued and retried upon reconnection to the Database server.\n *\n * To reconnect to the Database and begin receiving remote events, see\n * `goOnline()`.\n *\n * @param db - The instance to disconnect.\n */\nexport function goOffline(db: Database): void {\n  db = getModularInstance(db);\n  db._checkNotDeleted('goOffline');\n  repoInterrupt(db._repo);\n}\n\n/**\n * Reconnects to the server and synchronizes the offline Database state\n * with the server state.\n *\n * This method should be used after disabling the active connection with\n * `goOffline()`. Once reconnected, the client will transmit the proper data\n * and fire the appropriate events so that your client \"catches up\"\n * automatically.\n *\n * @param db - The instance to reconnect.\n */\nexport function goOnline(db: Database): void {\n  db = getModularInstance(db);\n  db._checkNotDeleted('goOnline');\n  repoResume(db._repo);\n}\n\n/**\n * Logs debugging information to the console.\n *\n * @param enabled - Enables logging if `true`, disables logging if `false`.\n * @param persistent - Remembers the logging state between page refreshes if\n * `true`.\n */\nexport function enableLogging(enabled: boolean, persistent?: boolean);\n\n/**\n * Logs debugging information to the console.\n *\n * @param logger - A custom logger function to control how things get logged.\n */\nexport function enableLogging(logger: (message: string) => unknown);\n\nexport function enableLogging(\n  logger: boolean | ((message: string) => unknown),\n  persistent?: boolean\n): void {\n  enableLoggingImpl(logger, persistent);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PersistentConnection } from '../core/PersistentConnection';\nimport { RepoInfo } from '../core/RepoInfo';\nimport { Connection } from '../realtime/Connection';\n\nimport { repoManagerForceRestClient } from './Database';\n\nexport const DataConnection = PersistentConnection;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(PersistentConnection.prototype as any).simpleListen = function (\n  pathString: string,\n  onComplete: (a: unknown) => void\n) {\n  this.sendRequest('q', { p: pathString }, onComplete);\n};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(PersistentConnection.prototype as any).echo = function (\n  data: unknown,\n  onEcho: (a: unknown) => void\n) {\n  this.sendRequest('echo', { d: data }, onEcho);\n};\n\n// RealTimeConnection properties that we use in tests.\nexport const RealTimeConnection = Connection;\n\n/**\n * @internal\n */\nexport const hijackHash = function (newHash: () => string) {\n  const oldPut = PersistentConnection.prototype.put;\n  PersistentConnection.prototype.put = function (\n    pathString,\n    data,\n    onComplete,\n    hash\n  ) {\n    if (hash !== undefined) {\n      hash = newHash();\n    }\n    oldPut.call(this, pathString, data, onComplete, hash);\n  };\n  return function () {\n    PersistentConnection.prototype.put = oldPut;\n  };\n};\n\nexport const ConnectionTarget = RepoInfo;\n\n/**\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\n * @internal\n */\nexport const forceRestClient = function (forceRestClient: boolean) {\n  repoManagerForceRestClient(forceRestClient);\n};\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport {\n  _registerComponent,\n  registerVersion,\n  SDK_VERSION\n} from '@firebase/app';\nimport { Component, ComponentType } from '@firebase/component';\n\nimport { name, version } from '../package.json';\nimport { setSDKVersion } from '../src/core/version';\n\nimport { repoManagerDatabaseFromApp } from './api/Database';\n\nexport function registerDatabase(variant?: string): void {\n  setSDKVersion(SDK_VERSION);\n  _registerComponent(\n    new Component(\n      'database',\n      (container, { instanceIdentifier: url }) => {\n        const app = container.getProvider('app').getImmediate()!;\n        const authProvider = container.getProvider('auth-internal');\n        const appCheckProvider = container.getProvider('app-check-internal');\n        return repoManagerDatabaseFromApp(\n          app,\n          authProvider,\n          appCheckProvider,\n          url\n        );\n      },\n      ComponentType.PUBLIC\n    ).setMultipleInstances(true)\n  );\n  registerVersion(name, version, variant);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n}\n"],"names":["createSvgIcon","_jsx","d","SDK_VERSION","DOMStorageWrapper","domStorage_","prefix_","key","value","this","removeItem","prefixedName_","setItem","storedVal","getItem","name","toString","MemoryStorage","cache_","isInMemoryStorage","createStoragefor","domStorageName","window","domStorage","e","PersistentStorage","SessionStorage","logClient","LUIDGenerator","id","sha1","str","utf8Bytes","update","sha1Bytes","digest","buildLogMessage_","message","i","length","arg","Array","isArray","apply","logger","firstLog_","enableLogging","logger_","persistent","logLevel","log","bind","set","remove","get","varArgs","logWrapper","prefix","error","fatal","Error","warn","isInvalidJSONNumber","data","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","MIN_NAME","MAX_NAME","nameCompare","a","b","aAsInt","tryParseInt","bAsInt","stringCompare","requireKey","obj","ObjectToUniqueKey","keys","k","push","sort","splitStringBySize","segsize","len","dataSegs","c","substring","each","fn","hasOwnProperty","doubleToIEEE754String","v","s","f","ln","bias","Infinity","Math","abs","pow","min","floor","LN2","round","bits","reverse","join","hexByteString","hexByte","parseInt","substr","toLowerCase","INTEGER_REGEXP_","RegExp","INTEGER_32_MIN","INTEGER_32_MAX","test","intVal","exceptionGuard","setTimeout","stack","setTimeoutNonBlocking","time","timeout","AppCheckTokenProvider","appName_","appCheckProvider","appCheck","getImmediate","optional","then","forceRefresh","getToken","Promise","resolve","reject","listener","addTokenListener","FirebaseAuthTokenProvider","firebaseOptions_","authProvider_","auth_","onInit","auth","catch","code","addAuthTokenListener","removeAuthTokenListener","errorMessage","EmulatorTokenProvider","accessToken","OWNER","PROTOCOL_VERSION","FORGE_DOMAIN_RE","WEBSOCKET","LONG_POLLING","RepoInfo","host","secure","namespace","webSocketOnly","nodeAdmin","persistenceKey","includeNamespaceInQueryParams","_host","_domain","indexOf","internalHost","newHost","isCacheableHost","toURLString","protocol","query","repoInfoConnectionURL","repoInfo","type","params","connURL","isCustomHost","repoInfoNeedsQueryParam","pairs","StatsCollection","counters_","amount","collections","reporters","statsManagerGetCollection","hashString","PacketReceiver","onMessage_","pendingResponses","currentResponseNum","closeAfterResponse","onClose","responseNum","callback","requestNum","toProcess","FIREBASE_LONGPOLL_START_PARAM","FIREBASE_LONGPOLL_CLOSE_COMMAND","BrowserPollConnection","connId","applicationId","appCheckToken","authToken","transportSessionId","lastSessionId","bytesSent","bytesReceived","everConnected_","log_","stats_","urlFn","onMessage","onDisconnect","curSegmentNum","onDisconnect_","myPacketOrderer","isClosed_","connectTimeoutTimer_","onClosed_","document","readyState","called","wrappedFn","body","addEventListener","attachEvent","executeWhenDOMReady","scriptTagHolder","FirebaseIFrameScriptHolder","args","command","arg1","arg2","incrementIncomingBytes_","clearTimeout","password","sendNewPolls","closeAfter","pN","handleResponse","urlParams","random","uniqueCallbackIdentifier","location","hostname","connectURL","addTag","startLongPoll","addDisconnectPingFrame","close","myDisconnFrame","removeChild","shutdown_","dataStr","incrementCounter","base64data","MAX_URL_DATA_SIZE","enqueueSegment","pw","createElement","src","style","display","appendChild","forceAllow_","forceDisallow_","href","Windows","UI","commandCB","onMessageCB","outstandingRequests","Set","pendingSegs","currentSerial","myIFrame","createIFrame_","script","domain","iframeContents","doc","open","write","alive","innerHTML","myID","myPW","newRequest_","size","theURL","curDataString","theSeg","shift","seg","ts","addLongPollTag_","segnum","totalsegs","url","serial","add","doNewRequest","delete","keepaliveTimeout","loadCB","doNodeLongPoll","newScript","async","onload","onreadystatechange","rstate","parentNode","onerror","iframe","contentWindow","contentDocument","WebSocketImpl","MozWebSocket","WebSocket","WebSocketConnection","keepaliveTimer","frames","totalFrames","connectionURL_","device","options","headers","process","platform","env","proxy","origin","mySock","onopen","onclose","onmessage","m","handleIncomingFrame","fullMess","jsonMess","frameCount","isNaN","handleNewFrameCount_","mess","resetKeepAlive","appendFrame_","remainingData","extractFrameCount_","sendString_","String","clearInterval","setInterval","send","isOldAndroid","navigator","userAgent","oldAndroidMatch","match","parseFloat","responsesRequiredToBeHealthy","healthyTimeout","TransportManager","initTransports_","isWebSocketsAvailable","isSkipPollConnection","previouslyFailed","transports_","transports","ALL_TRANSPORTS","transport","Connection","repoInfo_","applicationId_","appCheckToken_","authToken_","onReady_","onKill_","connectionCount","pendingDataMessages","state_","transportManager_","start_","conn","initialTransport","conn_","nextTransportId_","primaryResponsesRequired_","onMessageReceived","connReceiver_","onConnectionLost","disconnReceiver_","tx_","rx_","secondaryConn_","isHealthy_","healthyTimeoutMS","healthyTimeout_","markConnectionHealthy","everConnected","onConnectionLost_","onSecondaryConnectionLost_","onPrimaryMessageReceived_","onSecondaryMessageReceived_","dataMsg","msg","t","sendData_","controlData","cmd","upgradeIfSecondaryHealthy_","secondaryResponsesRequired_","parsedData","layer","onSecondaryControl_","proceedWithUpgrade_","start","tryCleanupConnection","onControl_","onDataMessage_","onPrimaryResponse_","payload","onHandshake_","onConnectionShutdown_","onReset_","sendPingOnPrimaryIfNecessary_","handshake","timestamp","version","h","sessionId","onConnectionEstablished_","tryStartUpgrade_","upgradeTransport","startUpgrade_","closeConnections_","reason","ServerActions","pathString","onComplete","hash","token","stats","EventEmitter","allowedEvents_","listeners_","eventType","listeners","context","validateEventType_","eventData","getInitialEvent","splice","find","et","OnlineMonitor","online_","trigger","Path","pathOrString","pieceNum","pieces_","split","copyTo","pieceNum_","newEmptyPath","pathGetFront","path","pathGetLength","pathPopFront","pathGetBack","pathSlice","begin","slice","pathParent","pieces","pathChild","childPathObj","childPieces","pathIsEmpty","newRelativePath","outerPath","innerPath","outer","inner","pathEquals","other","j","pathContains","ValidationPath","errorPrefix_","parts_","byteLength_","max","validationPathCheckValid","validationPath","validationPathToErrorString","VisibilityMonitor","hidden","visibilityChange","visible_","visible","RECONNECT_MIN_DELAY","PersistentConnection","onDataUpdate_","onConnectStatus_","onServerInfoUpdate_","authTokenProvider_","appCheckTokenProvider_","authOverride_","nextPersistentConnectionId_","interruptReasons_","listens","Map","outstandingPuts_","outstandingGets_","outstandingPutCount_","outstandingGetCount_","onDisconnectRequestQueue_","connected_","reconnectDelay_","maxReconnectDelay_","securityDebugCallback_","establishConnectionTimer_","requestCBHash_","requestNumber_","realtime_","forceTokenRefresh_","invalidAuthTokenCount_","invalidAppCheckTokenCount_","firstConnection_","lastConnectionAttemptTime_","lastConnectionEstablishedTime_","getInstance","on","onVisible_","onOnline_","action","onResponse","curReqNum","r","sendRequest","initConnection_","deferred","request","p","_path","q","_queryObject","outstandingGet","index","undefined","sendGet_","promise","currentHashFn","tag","queryId","_queryIdentifier","has","_queryParams","isDefault","loadsAllData","listenSpec","hashFn","sendListen_","req","status","warnOnListenWarnings_","removeListen_","tryAuth","reduceReconnectDelayIfAdminCredential_","credential","tryAppCheck","authMethod","requestData","cred","res","onAuthRevoked_","onAppCheckRevoked_","sendUnlisten_","queryObj","sendOnDisconnect_","response","putInternal","sendPut_","queued","result","errorReason","reqNum","onDataPush_","onListenRevoked_","onSecurityDebugPacket_","Date","getTime","handleTimestamp_","sendConnectStats_","restoreState_","establishConnection_","scheduleConnect_","online","cancelSentTransactions_","shouldReconnect_","timeSinceLastConnectAttempt","reconnectDelay","onDataMessage","onReady","onRealtimeDisconnect_","nextConnectionId_","canceled","connection","closeFn","sendRequestFn","all","interrupt","delta","serverTimeOffset","put","map","listen","normalizedPathString","statusCode","explanation","notifyForInvalidToken","console","replace","values","queries","clientName","reportStats","currentlyOnline","warnings","indexSpec","getIndex","indexPath","__EMPTY_NODE","NamedNode","node","Index","compare","oldNode","newNode","oldWrapped","newWrapped","MIN","KeyIndex","indexValue","val","KEY_INDEX","SortedMapIterator","startKey","comparator","isReverse_","resultGenerator_","nodeStack_","cmp","isEmpty","left","right","pop","LLRBNode","color","RED","SortedMap","EMPTY_NODE","count","inorderTraversal","reverseTraversal","min_","maxKey","n","copy","insert","fixUp_","isRed_","moveRedLeft_","removeMin_","smallest","rotateRight_","moveRedRight_","rotateLeft_","colorFlip_","nl","nr","blackDepth","check_","BLACK","MAX_NODE","LLRBEmptyNode","comparator_","root_","rightParent","minKey","resultGenerator","NAME_ONLY_COMPARATOR","NAME_COMPARATOR","__childrenNodeConstructor","nodeFromJSON","priorityHashText","priority","validatePriorityNode","priorityNode","isLeafNode","getPriority","LeafNode","value_","priorityNode_","lazyHash_","newPriorityNode","childName","childNode","newChildNode","updatePriority","updateImmediateChild","front","updateChild","exportFormat","getValue","toHash","compareToLeafNode_","otherLeaf","otherLeafType","thisLeafType","otherIndex","VALUE_TYPE_ORDER","thisIndex","equals","_defaultIndexMap","PriorityIndex","aPriority","bPriority","indexCmp","compareTo","PRIORITY_INDEX","LOG_2","Base12Num","num","current_","mask","bits_","buildChildSet","childList","keyFn","mapSortFn","buildBalancedTree","low","high","namedNode","middle","root","base12","buildPennant","chunkSize","childTree","attachPennant","pennant","isOne","nextBitIsOne","buildFrom12Array","fallbackObject","IndexMap","indexes_","indexSet_","indexKey","sortedMap","indexDefinition","existingChildren","newIndex","sawIndexedValue","iter","getIterator","Wrap","next","getNext","isDefinedOn","getCompare","indexName","newIndexSet","newIndexes","indexedChildren","existingSnap","newChildren","ChildrenNode","children_","indexMap_","getImmediateChild","getChild","newIndexMap","removeFromIndexes","addToIndexes","newPriority","newImmediateChild","numKeys","allIntegerKeys","forEachChild","array","childHash","idx","resolveIndex_","getPredecessorKey","getFirstChildName","getLastChildName","wrappedNode","getIteratorFrom","minPost","startPost","iterator","peek","getReverseIteratorFrom","maxPost","endPost","hasIndex","addIndex","otherChildrenNode","thisIter","otherIter","thisCurrent","otherCurrent","Default","Object","defineProperties","MAX","setPriorityMaxNode","json","jsonLeaf","childData","children","childrenHavePriority","hinzeJsonObj","child","childSet","sortedChildSet","setNodeFromJSON","PathIndex","indexPath_","snap","aChild","extractChild","bChild","valueNode","ValueIndex","VALUE_INDEX","PUSH_CHARS","lastPushTime","lastRandChars","changeValue","snapshotNode","changeChildAdded","changeChildRemoved","changeChildChanged","oldSnap","IndexedFilter","index_","newChild","affectedPath","source","optChangeAccumulator","isIndexed","oldChild","hasChild","trackChildChange","withIndex","newSnap","RangedFilter","indexedFilter_","startPost_","getStartPost_","endPost_","getEndPost_","getStartPost","getEndPost","matches","filtered","self","updateFullNode","hasStart","startName","getIndexStartName","makePost","getIndexStartValue","hasEnd","endName","getIndexEndName","getIndexEndValue","LimitedFilter","rangedFilter_","limit_","getLimit","reverse_","isViewFromLeft","numChildren","getIndexedFilter","fullLimitUpdateChild_","hasNext","getReverseIterator","indexCompare","foundStartPost","childKey","childSnap","changeAccumulator","oldEventCache","newChildNamedNode","windowBoundary","getFirstChild","getLastChild","inRange","oldChildSnap","nextChild","getChildAfterChild","compareNext","newEventCache","QueryParams","limitSet_","startSet_","startNameSet_","startAfterSet_","endSet_","endNameSet_","endBeforeSet_","viewFrom_","indexStartValue_","indexStartName_","indexEndValue_","indexEndName_","queryParamsToRestQueryStringParameters","queryParams","orderBy","qs","queryParamsGetQueryObject","viewFrom","ReadonlyRestClient","listens_","listenId","getListenId_","thisListen","queryStringParameters","restRequest_","xhr","XMLHttpRequest","responseText","SnapshotHolder","rootNode_","newSnapshotNode","newSparseSnapshotTree","sparseSnapshotTreeRemember","sparseSnapshotTree","clear","sparseSnapshotTreeForEachTree","prefixPath","func","forEach","tree","sparseSnapshotTreeForEachChild","OperationType","StatsListener","collection_","last_","newStats","stat","StatsReporter","collection","server_","statsToReport_","statsListener_","reportStats_","reportedStats","haveStatsToReport","newOperationSourceServerTaggedQuery","fromUser","fromServer","tagged","emptyChildrenSingleton","AckUserWrite","affectedTree","revert","ACK_USER_WRITE","subtree","Overwrite","OVERWRITE","Merge","MERGE","CacheNode","node_","fullyInitialized_","filtered_","isFullyInitialized","isCompleteForChild","EventGenerator","query_","eventGeneratorGenerateEventsForType","eventGenerator","events","changes","registrations","eventCache","filteredChanges","filter","change","aWrapped","bWrapped","eventGeneratorCompareChanges","materializedChange","prevName","getPredecessorChildName","eventGeneratorMaterializeSingleChange","registration","respondsTo","createEvent","newViewCache","serverCache","viewCacheUpdateEventSnap","viewCache","eventSnap","complete","viewCacheUpdateServerSnap","serverSnap","viewCacheGetCompleteEventSnap","getNode","viewCacheGetCompleteServerSnap","EmptyChildren","ImmutableTree","relativePath","predicate","childExistingPathAndValue","findRootMostMatchingPathAndValue","toSet","newTree","setTree","fold_","pathSoFar","accum","findOnPath_","pathToFollow","foreachOnPath_","currentRelativePath","foreach_","childPath","CompoundWrite","writeTree_","compoundWriteAddWrite","compoundWrite","rootmost","findRootMostValueAndPath","rootMostPath","compoundWriteAddWrites","updates","newWrite","compoundWriteRemoveWrite","empty","compoundWriteHasCompleteWrite","compoundWriteGetCompleteNode","compoundWriteGetCompleteChildren","compoundWriteChildCompoundWrite","shadowingNode","compoundWriteIsEmpty","compoundWriteApply","applySubtreeWrite","writeTree","priorityWrite","writeTreeChildWrites","newWriteTreeRef","writeTreeGetWrite","writeId","allWrites","record","writeTreeRemoveWrite","findIndex","writeToRemove","removedWriteWasVisible","removedWriteOverlapsWithOtherWrites","currentWrite","writeTreeRecordContainsPath_","visibleWrites","writeTreeLayerTree_","writeTreeDefaultFilter_","lastWriteId","writeTreeResetTree_","writeRecord","writes","treeRoot","writePath","deepNode","writeTreeCalcCompleteEventCache","treePath","completeServerCache","writeIdsToExclude","includeHiddenWrites","merge","subMerge","writeTreeRefCalcCompleteEventCache","writeTreeRef","writeTreeRefCalcCompleteEventChildren","completeServerChildren","completeChildren","topLevelSet","writeTreeCalcCompleteEventChildren","writeTreeRefCalcEventCacheAfterServerOverwrite","existingEventSnap","existingServerSnap","childMerge","writeTreeCalcEventCacheAfterServerOverwrite","writeTreeRefShadowingWrite","writeTreeShadowingWrite","writeTreeRefCalcIndexedSlice","completeServerData","toIterate","nodes","writeTreeCalcIndexedSlice","writeTreeRefCalcCompleteChild","existingServerCache","writeTreeCalcCompleteChild","writeTreeRefChild","ChildChangeAccumulator","changeMap","oldChange","oldType","from","NO_COMPLETE_CHILD_SOURCE","WriteTreeCompleteChildSource","writes_","viewCache_","optCompleteServerCache_","serverNode","viewProcessorApplyOperation","viewProcessor","oldViewCache","operation","writesCache","completeCache","filterServerNode","accumulator","overwrite","viewProcessorApplyUserOverwrite","isFiltered","viewProcessorApplyServerOverwrite","changedChildren","curViewCache","foreach","viewProcessorCacheHasChild","viewProcessorApplyUserMerge","viewProcessorApplyServerMerge","ackUserWrite","serverChildren","filtersNodes","viewProcessorRevertUserWrite","ackPath","isCompleteForPath","mergePath","serverCachePath","viewProcessorAckUserWrite","LISTEN_COMPLETE","oldServerNode","viewProcessorGenerateEventCacheAfterServerEvent","viewProcessorListenComplete","getChanges","isLeafOrEmpty","oldCompleteSnap","viewProcessorMaybeAddValueEvent","changePath","oldEventSnap","completeEventChildren","completeNode","oldEventNode","updatedPriority","newEventChild","childChangePath","eventChildUpdate","changedSnap","newServerCache","oldServerSnap","serverFilter","newServerNode","getCompleteChild","viewProcessorApplyMerge","viewMergeTree","childMergeTree","isUnknownDeepMerge","referenceConstructor","View","initialViewCache","eventRegistrations_","indexFilter","hasLimit","processor_","newViewProcessor","initialServerCache","initialEventCache","eventGenerator_","viewGetCompleteServerCache","view","cache","viewApplyOperation","viewGenerateEventsForChanges_","eventRegistration","eventRegistrations","moves","indexedValueChanged","eventGeneratorGenerateEventsForChanges","SyncPoint","views","syncPointApplyOperation","syncPoint","optCompleteServerCache","concat","syncPointGetView","serverCacheComplete","eventCacheComplete","syncPointGetCompleteServerCache","SyncTree","listenProvider_","syncPointTree_","pendingWriteTree_","tagToQueryMap","queryToTagMap","syncTreeApplyUserOverwrite","syncTree","newData","writeTreeAddOverwrite","syncTreeApplyOperationToSyncPoints_","syncTreeAckUserWrite","needToReevaluate","syncTreeApplyServerOverwrite","syncTreeCalcCompleteEventCache","findOnPath","syncTreeGetServerValue","foreachOnPath","pathToSyncPoint","sp","serverCacheNode","viewGetCompleteNode","syncTreeApplyOperationHelper_","syncPointTree","syncTreeApplyOperationDescendantsHelper_","childOperation","operationForChild","childServerCache","childWritesCache","syncTreeQueryKeyForTag_","syncTreeParseQueryKey_","queryKey","splitIndex","syncTreeApplyTaggedOperation_","queryPath","ExistingValueProvider","DeferredValueProvider","syncTree_","path_","resolveDeferredLeafValue","existingVal","serverValues","resolveScalarDeferredValue","resolveComplexDeferredValue","JSON","stringify","op","existing","unused","existingNode","resolveDeferredValueTree","resolveDeferredValue","resolveDeferredValueSnapshot","rawPri","leafNode","childrenNode","Tree","parent","childCount","treeSubTree","pathObj","treeGetValue","treeSetValue","treeUpdateParents","treeHasChildren","treeForEachChild","treeForEachDescendant","includeSelf","childrenFirst","treeGetPath","childEmpty","treeIsEmpty","childExists","treeUpdateChild","INVALID_KEY_REGEX_","INVALID_PATH_REGEX_","MAX_LEAF_SIZE_","isValidKey","isValidPathString","validateFirebaseData","errorPrefix","hasDotValue","hasActualChild","last","validationPathPop","validatePathString","fnName","argumentName","errorPrefixFxn","validateUrl","parsedUrl","isValidRootPathString","EventQueue","eventLists_","recursionDepth_","eventQueueQueueEvents","eventQueue","eventDataList","currList","getPath","eventQueueRaiseEventsAtPath","eventQueueRaiseQueuedEventsMatchingPredicate","eventPath","eventQueueRaiseEventsForChangedPath","changedPath","sentAll","eventList","eventListRaise","eventFn","getEventRunner","INTERRUPT_REASON","Repo","forceRestClient_","appCheckProvider_","dataUpdateCount","eventQueue_","nextWriteId_","interceptServerDataCallback_","transactionQueueTree_","persistentConnection_","repoStart","repo","appId","authOverride","search","isMerge","repoOnDataUpdate","repoOnConnectStatus","connectStatus","repoUpdateInfo","repoOnServerInfoUpdate","addTokenChangeListener","refreshAuthToken","refreshAppCheckToken","statsReporter_","creatorFunction","statsManagerGetOrCreateReporter","infoData_","infoSyncTree_","startListening","infoEvents","stopListening","serverSyncTree_","unlisten","repoServerTime","offset","repoGenerateServerValues","taggedChildren","raw","changeTree","fromObject","syncTreeApplyTaggedQueryMerge","taggedSnap","syncTreeApplyTaggedQueryOverwrite","syncTreeApplyServerMerge","repoRerunTransactions","repoLog","resolvedOnDisconnectTree","resolved","repoAbortTransactions","repoRunOnDisconnectEvents","updateSnapshot","repoGetNextWriteId","repoInterrupt","repoGetLatestState","excludeSets","repoSendReadyTransactions","repoPruneCompletedTransactionsBelowNode","queue","repoBuildTransactionQueue","allRun","every","transaction","repoSendTransactionQueue","setsToIgnore","txn","currentWriteId","latestState","snapToSend","latestHash","retryCount","currentOutputSnapshotRaw","dataToSend","pathToSend","callbacks","currentOutputSnapshotResolved","unwatcher","abortReason","rootMostTransactionNode","repoGetAncestorTransactionNode","abortTransaction","currentNode","currentInputSnapshot","newDataNode","oldWriteId","newNodeResolved","applyLocally","repoRerunTransactionQueue","transactionNode","transactionQueue","repoAggregateTransactionQueuesForNode","order","nodeQueue","to","treeForEachAncestor","repoAbortTransactionsOnNode","lastSent","parseRepoInfo","dataURL","parseDatabaseURL","scheme","subdomain","port","colonInd","slashInd","questionMarkInd","pathStringDecoded","piece","decodeURIComponent","decodePath","queryString","results","charAt","segment","kv","decodeQuery","hostWithoutPort","dotInd","QueryImpl","_repo","_orderByCalled","ReferenceImpl","sameRepo","samePath","sameQueryIdentifier","encodeURIComponent","pathToUrlEncodedString","parentPath","ref","DataSnapshot","_node","_index","childRef","exportVal","db","_checkNotDeleted","_root","cached","err","repoGetValue","syncPointSetReferenceConstructor","syncTreeSetReferenceConstructor","repos","useRestClient","repoManagerDatabaseFromApp","app","authProvider","dbUrl","databaseURL","projectId","isEmulator","dbEmulatorHost","authTokenProvider","appRepos","repoManagerCreateRepo","Database","_repoInternal","_instanceStarted","_rootInternal","appName","repoManagerDeleteRepo","apiName","getDatabase","identifier","prototype","simpleListen","echo","onEcho","variant","setSDKVersion","container","instanceIdentifier","getProvider","setMultipleInstances"],"sourceRoot":""}